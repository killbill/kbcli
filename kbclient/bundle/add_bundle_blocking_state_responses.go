// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/killbill/kbcli/v2/kbmodel"
)

// AddBundleBlockingStateReader is a Reader for the AddBundleBlockingState structure.
type AddBundleBlockingStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddBundleBlockingStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddBundleBlockingStateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddBundleBlockingStateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddBundleBlockingStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddBundleBlockingStateCreated creates a AddBundleBlockingStateCreated with default headers values
func NewAddBundleBlockingStateCreated() *AddBundleBlockingStateCreated {
	return &AddBundleBlockingStateCreated{}
}

/*
AddBundleBlockingStateCreated describes a response with status code 201, with default header values.

Blocking state created successfully
*/
type AddBundleBlockingStateCreated struct {
	Payload []*kbmodel.BlockingState
}

// IsSuccess returns true when this add bundle blocking state created response has a 2xx status code
func (o *AddBundleBlockingStateCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add bundle blocking state created response has a 3xx status code
func (o *AddBundleBlockingStateCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add bundle blocking state created response has a 4xx status code
func (o *AddBundleBlockingStateCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add bundle blocking state created response has a 5xx status code
func (o *AddBundleBlockingStateCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add bundle blocking state created response a status code equal to that given
func (o *AddBundleBlockingStateCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add bundle blocking state created response
func (o *AddBundleBlockingStateCreated) Code() int {
	return 201
}

func (o *AddBundleBlockingStateCreated) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/bundles/{bundleId}/block][%d] addBundleBlockingStateCreated  %+v", 201, o.Payload)
}

func (o *AddBundleBlockingStateCreated) String() string {
	return fmt.Sprintf("[POST /1.0/kb/bundles/{bundleId}/block][%d] addBundleBlockingStateCreated  %+v", 201, o.Payload)
}

func (o *AddBundleBlockingStateCreated) GetPayload() []*kbmodel.BlockingState {
	return o.Payload
}

func (o *AddBundleBlockingStateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddBundleBlockingStateBadRequest creates a AddBundleBlockingStateBadRequest with default headers values
func NewAddBundleBlockingStateBadRequest() *AddBundleBlockingStateBadRequest {
	return &AddBundleBlockingStateBadRequest{}
}

/*
AddBundleBlockingStateBadRequest describes a response with status code 400, with default header values.

Invalid bundle id supplied
*/
type AddBundleBlockingStateBadRequest struct {
}

// IsSuccess returns true when this add bundle blocking state bad request response has a 2xx status code
func (o *AddBundleBlockingStateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add bundle blocking state bad request response has a 3xx status code
func (o *AddBundleBlockingStateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add bundle blocking state bad request response has a 4xx status code
func (o *AddBundleBlockingStateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add bundle blocking state bad request response has a 5xx status code
func (o *AddBundleBlockingStateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add bundle blocking state bad request response a status code equal to that given
func (o *AddBundleBlockingStateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add bundle blocking state bad request response
func (o *AddBundleBlockingStateBadRequest) Code() int {
	return 400
}

func (o *AddBundleBlockingStateBadRequest) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/bundles/{bundleId}/block][%d] addBundleBlockingStateBadRequest ", 400)
}

func (o *AddBundleBlockingStateBadRequest) String() string {
	return fmt.Sprintf("[POST /1.0/kb/bundles/{bundleId}/block][%d] addBundleBlockingStateBadRequest ", 400)
}

func (o *AddBundleBlockingStateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddBundleBlockingStateNotFound creates a AddBundleBlockingStateNotFound with default headers values
func NewAddBundleBlockingStateNotFound() *AddBundleBlockingStateNotFound {
	return &AddBundleBlockingStateNotFound{}
}

/*
AddBundleBlockingStateNotFound describes a response with status code 404, with default header values.

Bundle not found
*/
type AddBundleBlockingStateNotFound struct {
}

// IsSuccess returns true when this add bundle blocking state not found response has a 2xx status code
func (o *AddBundleBlockingStateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add bundle blocking state not found response has a 3xx status code
func (o *AddBundleBlockingStateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add bundle blocking state not found response has a 4xx status code
func (o *AddBundleBlockingStateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add bundle blocking state not found response has a 5xx status code
func (o *AddBundleBlockingStateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add bundle blocking state not found response a status code equal to that given
func (o *AddBundleBlockingStateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add bundle blocking state not found response
func (o *AddBundleBlockingStateNotFound) Code() int {
	return 404
}

func (o *AddBundleBlockingStateNotFound) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/bundles/{bundleId}/block][%d] addBundleBlockingStateNotFound ", 404)
}

func (o *AddBundleBlockingStateNotFound) String() string {
	return fmt.Sprintf("[POST /1.0/kb/bundles/{bundleId}/block][%d] addBundleBlockingStateNotFound ", 404)
}

func (o *AddBundleBlockingStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
