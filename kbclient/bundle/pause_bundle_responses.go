// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/killbill/kbcli/v3/kbcommon"

	strfmt "github.com/go-openapi/strfmt"
)

// PauseBundleReader is a Reader for the PauseBundle structure.
type PauseBundleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PauseBundleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPauseBundleNoContent()
		result.HttpResponse = response
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		errorResult := kbcommon.NewKillbillError(response.Code())
		if err := consumer.Consume(response.Body(), &errorResult); err != nil && err != io.EOF {
			return nil, err
		}
		return nil, errorResult
	}
}

// NewPauseBundleNoContent creates a PauseBundleNoContent with default headers values
func NewPauseBundleNoContent() *PauseBundleNoContent {
	return &PauseBundleNoContent{}
}

/*PauseBundleNoContent handles this case with default header values.

Successful operation
*/
type PauseBundleNoContent struct {
	HttpResponse runtime.ClientResponse
}

func (o *PauseBundleNoContent) Error() string {
	return fmt.Sprintf("[PUT /1.0/kb/bundles/{bundleId}/pause][%d] pauseBundleNoContent ", 204)
}

func (o *PauseBundleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPauseBundleBadRequest creates a PauseBundleBadRequest with default headers values
func NewPauseBundleBadRequest() *PauseBundleBadRequest {
	return &PauseBundleBadRequest{}
}

/*PauseBundleBadRequest handles this case with default header values.

Invalid bundle id supplied
*/
type PauseBundleBadRequest struct {
	HttpResponse runtime.ClientResponse
}

func (o *PauseBundleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /1.0/kb/bundles/{bundleId}/pause][%d] pauseBundleBadRequest ", 400)
}

func (o *PauseBundleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPauseBundleNotFound creates a PauseBundleNotFound with default headers values
func NewPauseBundleNotFound() *PauseBundleNotFound {
	return &PauseBundleNotFound{}
}

/*PauseBundleNotFound handles this case with default header values.

Bundle not found
*/
type PauseBundleNotFound struct {
	HttpResponse runtime.ClientResponse
}

func (o *PauseBundleNotFound) Error() string {
	return fmt.Sprintf("[PUT /1.0/kb/bundles/{bundleId}/pause][%d] pauseBundleNotFound ", 404)
}

func (o *PauseBundleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
