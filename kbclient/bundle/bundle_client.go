// Code generated by go-swagger; DO NOT EDIT.

package bundle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new bundle API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bundle API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddBundleBlockingState(params *AddBundleBlockingStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBundleBlockingStateCreated, error)

	CreateBundleCustomFields(params *CreateBundleCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBundleCustomFieldsCreated, error)

	CreateBundleTags(params *CreateBundleTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBundleTagsCreated, error)

	DeleteBundleCustomFields(params *DeleteBundleCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBundleCustomFieldsNoContent, error)

	DeleteBundleTags(params *DeleteBundleTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBundleTagsNoContent, error)

	GetBundle(params *GetBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleOK, error)

	GetBundleAuditLogsWithHistory(params *GetBundleAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleAuditLogsWithHistoryOK, error)

	GetBundleByKey(params *GetBundleByKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleByKeyOK, error)

	GetBundleCustomFields(params *GetBundleCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleCustomFieldsOK, error)

	GetBundleTags(params *GetBundleTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleTagsOK, error)

	GetBundles(params *GetBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundlesOK, error)

	ModifyBundleCustomFields(params *ModifyBundleCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyBundleCustomFieldsNoContent, error)

	PauseBundle(params *PauseBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseBundleNoContent, error)

	RenameExternalKey(params *RenameExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameExternalKeyNoContent, error)

	ResumeBundle(params *ResumeBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeBundleNoContent, error)

	SearchBundles(params *SearchBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchBundlesOK, error)

	TransferBundle(params *TransferBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TransferBundleCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddBundleBlockingState blocks a bundle
*/
func (a *Client) AddBundleBlockingState(params *AddBundleBlockingStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddBundleBlockingStateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBundleBlockingStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBundleBlockingState",
		Method:             "POST",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddBundleBlockingStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBundleBlockingStateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBundleBlockingState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBundleCustomFields adds custom fields to bundle
*/
func (a *Client) CreateBundleCustomFields(params *CreateBundleCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBundleCustomFieldsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBundleCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBundleCustomFields",
		Method:             "POST",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBundleCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBundleCustomFieldsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBundleCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBundleTags adds tags to bundle
*/
func (a *Client) CreateBundleTags(params *CreateBundleTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBundleTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBundleTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBundleTags",
		Method:             "POST",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBundleTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBundleTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBundleTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBundleCustomFields removes custom fields from bundle
*/
func (a *Client) DeleteBundleCustomFields(params *DeleteBundleCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBundleCustomFieldsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBundleCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBundleCustomFields",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBundleCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBundleCustomFieldsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBundleCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBundleTags removes tags from bundle
*/
func (a *Client) DeleteBundleTags(params *DeleteBundleTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBundleTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBundleTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBundleTags",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBundleTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBundleTagsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBundleTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBundle retrieves a bundle by id
*/
func (a *Client) GetBundle(params *GetBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundle",
		Method:             "GET",
		PathPattern:        "/1.0/kb/bundles/{bundleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBundleAuditLogsWithHistory retrieves bundle audit logs with history by id
*/
func (a *Client) GetBundleAuditLogsWithHistory(params *GetBundleAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleAuditLogsWithHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleAuditLogsWithHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundleAuditLogsWithHistory",
		Method:             "GET",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/auditLogsWithHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBundleAuditLogsWithHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleAuditLogsWithHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundleAuditLogsWithHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBundleByKey retrieves a bundle by external key
*/
func (a *Client) GetBundleByKey(params *GetBundleByKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleByKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleByKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundleByKey",
		Method:             "GET",
		PathPattern:        "/1.0/kb/bundles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBundleByKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleByKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundleByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBundleCustomFields retrieves bundle custom fields
*/
func (a *Client) GetBundleCustomFields(params *GetBundleCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleCustomFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundleCustomFields",
		Method:             "GET",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBundleCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleCustomFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundleCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBundleTags retrieves bundle tags
*/
func (a *Client) GetBundleTags(params *GetBundleTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundleTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundleTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundleTags",
		Method:             "GET",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBundleTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundleTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundleTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBundles lists bundles
*/
func (a *Client) GetBundles(params *GetBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBundlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBundlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBundles",
		Method:             "GET",
		PathPattern:        "/1.0/kb/bundles/pagination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBundlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBundlesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBundles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyBundleCustomFields modifies custom fields to bundle
*/
func (a *Client) ModifyBundleCustomFields(params *ModifyBundleCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyBundleCustomFieldsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyBundleCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyBundleCustomFields",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyBundleCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyBundleCustomFieldsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyBundleCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PauseBundle pauses a bundle
*/
func (a *Client) PauseBundle(params *PauseBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PauseBundleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pauseBundle",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PauseBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PauseBundleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pauseBundle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RenameExternalKey updates a bundle external key
*/
func (a *Client) RenameExternalKey(params *RenameExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RenameExternalKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenameExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "renameExternalKey",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/renameKey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RenameExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RenameExternalKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for renameExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeBundle resumes a bundle
*/
func (a *Client) ResumeBundle(params *ResumeBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ResumeBundleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resumeBundle",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/bundles/{bundleId}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeBundleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeBundle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchBundles searches bundles
*/
func (a *Client) SearchBundles(params *SearchBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchBundlesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchBundlesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchBundles",
		Method:             "GET",
		PathPattern:        "/1.0/kb/bundles/search/{searchKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchBundlesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchBundlesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchBundles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TransferBundle transfers a bundle to another account
*/
func (a *Client) TransferBundle(params *TransferBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TransferBundleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferBundleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "transferBundle",
		Method:             "POST",
		PathPattern:        "/1.0/kb/bundles/{bundleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TransferBundleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferBundleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for transferBundle: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
