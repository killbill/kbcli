// Code generated by go-swagger; DO NOT EDIT.

package security

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new security API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for security API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddRoleDefinition(params *AddRoleDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRoleDefinitionCreated, error)

	AddUserRoles(params *AddUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserRolesCreated, error)

	GetCurrentUserPermissions(params *GetCurrentUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserPermissionsOK, error)

	GetCurrentUserSubject(params *GetCurrentUserSubjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserSubjectOK, error)

	GetRoleDefinition(params *GetRoleDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoleDefinitionOK, error)

	GetUserRoles(params *GetUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserRolesOK, error)

	InvalidateUser(params *InvalidateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvalidateUserNoContent, error)

	UpdateRoleDefinition(params *UpdateRoleDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRoleDefinitionNoContent, error)

	UpdateUserPassword(params *UpdateUserPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserPasswordNoContent, error)

	UpdateUserRoles(params *UpdateUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserRolesNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddRoleDefinition adds a new role definition
*/
func (a *Client) AddRoleDefinition(params *AddRoleDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRoleDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRoleDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRoleDefinition",
		Method:             "POST",
		PathPattern:        "/1.0/kb/security/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddRoleDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddRoleDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addRoleDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddUserRoles adds a new user with roles to make api requests
*/
func (a *Client) AddUserRoles(params *AddUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserRolesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserRoles",
		Method:             "POST",
		PathPattern:        "/1.0/kb/security/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserRolesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCurrentUserPermissions lists user permissions
*/
func (a *Client) GetCurrentUserPermissions(params *GetCurrentUserPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentUserPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentUserPermissions",
		Method:             "GET",
		PathPattern:        "/1.0/kb/security/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentUserPermissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentUserPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentUserPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCurrentUserSubject gets user information
*/
func (a *Client) GetCurrentUserSubject(params *GetCurrentUserSubjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCurrentUserSubjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentUserSubjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCurrentUserSubject",
		Method:             "GET",
		PathPattern:        "/1.0/kb/security/subject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentUserSubjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentUserSubjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCurrentUserSubject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRoleDefinition gets role definition
*/
func (a *Client) GetRoleDefinition(params *GetRoleDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRoleDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRoleDefinition",
		Method:             "GET",
		PathPattern:        "/1.0/kb/security/roles/{role}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRoleDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRoleDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRoleDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserRoles gets roles associated to a user
*/
func (a *Client) GetUserRoles(params *GetUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserRoles",
		Method:             "GET",
		PathPattern:        "/1.0/kb/security/users/{username}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InvalidateUser invalidates an existing user
*/
func (a *Client) InvalidateUser(params *InvalidateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InvalidateUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInvalidateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "invalidateUser",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/security/users/{username}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InvalidateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InvalidateUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for invalidateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRoleDefinition updates a new role definition
*/
func (a *Client) UpdateRoleDefinition(params *UpdateRoleDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRoleDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoleDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRoleDefinition",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/security/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRoleDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRoleDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRoleDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserPassword updates a user password
*/
func (a *Client) UpdateUserPassword(params *UpdateUserPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserPasswordNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserPasswordParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserPassword",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/security/users/{username}/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserPasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserPasswordNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserPassword: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserRoles updates roles associated to a user
*/
func (a *Client) UpdateUserRoles(params *UpdateUserRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserRolesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserRoles",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/security/users/{username}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserRolesNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
