// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// RecordUsageReader is a Reader for the RecordUsage structure.
type RecordUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RecordUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRecordUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRecordUsageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRecordUsageOK creates a RecordUsageOK with default headers values
func NewRecordUsageOK() *RecordUsageOK {
	return &RecordUsageOK{}
}

/*
RecordUsageOK describes a response with status code 200, with default header values.

Successfully recorded usage data change
*/
type RecordUsageOK struct {
}

// IsSuccess returns true when this record usage o k response has a 2xx status code
func (o *RecordUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this record usage o k response has a 3xx status code
func (o *RecordUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record usage o k response has a 4xx status code
func (o *RecordUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this record usage o k response has a 5xx status code
func (o *RecordUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this record usage o k response a status code equal to that given
func (o *RecordUsageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the record usage o k response
func (o *RecordUsageOK) Code() int {
	return 200
}

func (o *RecordUsageOK) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/usages][%d] recordUsageOK ", 200)
}

func (o *RecordUsageOK) String() string {
	return fmt.Sprintf("[POST /1.0/kb/usages][%d] recordUsageOK ", 200)
}

func (o *RecordUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRecordUsageBadRequest creates a RecordUsageBadRequest with default headers values
func NewRecordUsageBadRequest() *RecordUsageBadRequest {
	return &RecordUsageBadRequest{}
}

/*
RecordUsageBadRequest describes a response with status code 400, with default header values.

Invalid subscription (e.g. inactive)
*/
type RecordUsageBadRequest struct {
}

// IsSuccess returns true when this record usage bad request response has a 2xx status code
func (o *RecordUsageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record usage bad request response has a 3xx status code
func (o *RecordUsageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record usage bad request response has a 4xx status code
func (o *RecordUsageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this record usage bad request response has a 5xx status code
func (o *RecordUsageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this record usage bad request response a status code equal to that given
func (o *RecordUsageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the record usage bad request response
func (o *RecordUsageBadRequest) Code() int {
	return 400
}

func (o *RecordUsageBadRequest) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/usages][%d] recordUsageBadRequest ", 400)
}

func (o *RecordUsageBadRequest) String() string {
	return fmt.Sprintf("[POST /1.0/kb/usages][%d] recordUsageBadRequest ", 400)
}

func (o *RecordUsageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
