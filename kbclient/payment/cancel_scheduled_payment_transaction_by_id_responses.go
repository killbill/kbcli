// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CancelScheduledPaymentTransactionByIDReader is a Reader for the CancelScheduledPaymentTransactionByID structure.
type CancelScheduledPaymentTransactionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelScheduledPaymentTransactionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCancelScheduledPaymentTransactionByIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelScheduledPaymentTransactionByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelScheduledPaymentTransactionByIDNoContent creates a CancelScheduledPaymentTransactionByIDNoContent with default headers values
func NewCancelScheduledPaymentTransactionByIDNoContent() *CancelScheduledPaymentTransactionByIDNoContent {
	return &CancelScheduledPaymentTransactionByIDNoContent{}
}

/*
CancelScheduledPaymentTransactionByIDNoContent describes a response with status code 204, with default header values.

Successful operation
*/
type CancelScheduledPaymentTransactionByIDNoContent struct {
}

// IsSuccess returns true when this cancel scheduled payment transaction by Id no content response has a 2xx status code
func (o *CancelScheduledPaymentTransactionByIDNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel scheduled payment transaction by Id no content response has a 3xx status code
func (o *CancelScheduledPaymentTransactionByIDNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel scheduled payment transaction by Id no content response has a 4xx status code
func (o *CancelScheduledPaymentTransactionByIDNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel scheduled payment transaction by Id no content response has a 5xx status code
func (o *CancelScheduledPaymentTransactionByIDNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel scheduled payment transaction by Id no content response a status code equal to that given
func (o *CancelScheduledPaymentTransactionByIDNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the cancel scheduled payment transaction by Id no content response
func (o *CancelScheduledPaymentTransactionByIDNoContent) Code() int {
	return 204
}

func (o *CancelScheduledPaymentTransactionByIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /1.0/kb/payments/{paymentTransactionId}/cancelScheduledPaymentTransaction][%d] cancelScheduledPaymentTransactionByIdNoContent ", 204)
}

func (o *CancelScheduledPaymentTransactionByIDNoContent) String() string {
	return fmt.Sprintf("[DELETE /1.0/kb/payments/{paymentTransactionId}/cancelScheduledPaymentTransaction][%d] cancelScheduledPaymentTransactionByIdNoContent ", 204)
}

func (o *CancelScheduledPaymentTransactionByIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelScheduledPaymentTransactionByIDBadRequest creates a CancelScheduledPaymentTransactionByIDBadRequest with default headers values
func NewCancelScheduledPaymentTransactionByIDBadRequest() *CancelScheduledPaymentTransactionByIDBadRequest {
	return &CancelScheduledPaymentTransactionByIDBadRequest{}
}

/*
CancelScheduledPaymentTransactionByIDBadRequest describes a response with status code 400, with default header values.

Invalid paymentTransactionId supplied
*/
type CancelScheduledPaymentTransactionByIDBadRequest struct {
}

// IsSuccess returns true when this cancel scheduled payment transaction by Id bad request response has a 2xx status code
func (o *CancelScheduledPaymentTransactionByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel scheduled payment transaction by Id bad request response has a 3xx status code
func (o *CancelScheduledPaymentTransactionByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel scheduled payment transaction by Id bad request response has a 4xx status code
func (o *CancelScheduledPaymentTransactionByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel scheduled payment transaction by Id bad request response has a 5xx status code
func (o *CancelScheduledPaymentTransactionByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel scheduled payment transaction by Id bad request response a status code equal to that given
func (o *CancelScheduledPaymentTransactionByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cancel scheduled payment transaction by Id bad request response
func (o *CancelScheduledPaymentTransactionByIDBadRequest) Code() int {
	return 400
}

func (o *CancelScheduledPaymentTransactionByIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /1.0/kb/payments/{paymentTransactionId}/cancelScheduledPaymentTransaction][%d] cancelScheduledPaymentTransactionByIdBadRequest ", 400)
}

func (o *CancelScheduledPaymentTransactionByIDBadRequest) String() string {
	return fmt.Sprintf("[DELETE /1.0/kb/payments/{paymentTransactionId}/cancelScheduledPaymentTransaction][%d] cancelScheduledPaymentTransactionByIdBadRequest ", 400)
}

func (o *CancelScheduledPaymentTransactionByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
