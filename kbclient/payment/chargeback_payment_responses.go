// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/killbill/kbcli/v2/kbmodel"
)

// ChargebackPaymentReader is a Reader for the ChargebackPayment structure.
type ChargebackPaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChargebackPaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewChargebackPaymentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewChargebackPaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewChargebackPaymentPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewChargebackPaymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewChargebackPaymentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewChargebackPaymentBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewChargebackPaymentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewChargebackPaymentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewChargebackPaymentCreated creates a ChargebackPaymentCreated with default headers values
func NewChargebackPaymentCreated() *ChargebackPaymentCreated {
	return &ChargebackPaymentCreated{}
}

/*
ChargebackPaymentCreated describes a response with status code 201, with default header values.

Payment transaction created successfully
*/
type ChargebackPaymentCreated struct {
	Payload *kbmodel.Payment
}

// IsSuccess returns true when this chargeback payment created response has a 2xx status code
func (o *ChargebackPaymentCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this chargeback payment created response has a 3xx status code
func (o *ChargebackPaymentCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chargeback payment created response has a 4xx status code
func (o *ChargebackPaymentCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this chargeback payment created response has a 5xx status code
func (o *ChargebackPaymentCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this chargeback payment created response a status code equal to that given
func (o *ChargebackPaymentCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the chargeback payment created response
func (o *ChargebackPaymentCreated) Code() int {
	return 201
}

func (o *ChargebackPaymentCreated) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentCreated  %+v", 201, o.Payload)
}

func (o *ChargebackPaymentCreated) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentCreated  %+v", 201, o.Payload)
}

func (o *ChargebackPaymentCreated) GetPayload() *kbmodel.Payment {
	return o.Payload
}

func (o *ChargebackPaymentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kbmodel.Payment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChargebackPaymentBadRequest creates a ChargebackPaymentBadRequest with default headers values
func NewChargebackPaymentBadRequest() *ChargebackPaymentBadRequest {
	return &ChargebackPaymentBadRequest{}
}

/*
ChargebackPaymentBadRequest describes a response with status code 400, with default header values.

Invalid paymentId supplied
*/
type ChargebackPaymentBadRequest struct {
}

// IsSuccess returns true when this chargeback payment bad request response has a 2xx status code
func (o *ChargebackPaymentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chargeback payment bad request response has a 3xx status code
func (o *ChargebackPaymentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chargeback payment bad request response has a 4xx status code
func (o *ChargebackPaymentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this chargeback payment bad request response has a 5xx status code
func (o *ChargebackPaymentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this chargeback payment bad request response a status code equal to that given
func (o *ChargebackPaymentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the chargeback payment bad request response
func (o *ChargebackPaymentBadRequest) Code() int {
	return 400
}

func (o *ChargebackPaymentBadRequest) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentBadRequest ", 400)
}

func (o *ChargebackPaymentBadRequest) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentBadRequest ", 400)
}

func (o *ChargebackPaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChargebackPaymentPaymentRequired creates a ChargebackPaymentPaymentRequired with default headers values
func NewChargebackPaymentPaymentRequired() *ChargebackPaymentPaymentRequired {
	return &ChargebackPaymentPaymentRequired{}
}

/*
ChargebackPaymentPaymentRequired describes a response with status code 402, with default header values.

Transaction declined by gateway
*/
type ChargebackPaymentPaymentRequired struct {
}

// IsSuccess returns true when this chargeback payment payment required response has a 2xx status code
func (o *ChargebackPaymentPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chargeback payment payment required response has a 3xx status code
func (o *ChargebackPaymentPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chargeback payment payment required response has a 4xx status code
func (o *ChargebackPaymentPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this chargeback payment payment required response has a 5xx status code
func (o *ChargebackPaymentPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this chargeback payment payment required response a status code equal to that given
func (o *ChargebackPaymentPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the chargeback payment payment required response
func (o *ChargebackPaymentPaymentRequired) Code() int {
	return 402
}

func (o *ChargebackPaymentPaymentRequired) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentPaymentRequired ", 402)
}

func (o *ChargebackPaymentPaymentRequired) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentPaymentRequired ", 402)
}

func (o *ChargebackPaymentPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChargebackPaymentNotFound creates a ChargebackPaymentNotFound with default headers values
func NewChargebackPaymentNotFound() *ChargebackPaymentNotFound {
	return &ChargebackPaymentNotFound{}
}

/*
ChargebackPaymentNotFound describes a response with status code 404, with default header values.

Account or payment not found
*/
type ChargebackPaymentNotFound struct {
}

// IsSuccess returns true when this chargeback payment not found response has a 2xx status code
func (o *ChargebackPaymentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chargeback payment not found response has a 3xx status code
func (o *ChargebackPaymentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chargeback payment not found response has a 4xx status code
func (o *ChargebackPaymentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this chargeback payment not found response has a 5xx status code
func (o *ChargebackPaymentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this chargeback payment not found response a status code equal to that given
func (o *ChargebackPaymentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the chargeback payment not found response
func (o *ChargebackPaymentNotFound) Code() int {
	return 404
}

func (o *ChargebackPaymentNotFound) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentNotFound ", 404)
}

func (o *ChargebackPaymentNotFound) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentNotFound ", 404)
}

func (o *ChargebackPaymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChargebackPaymentUnprocessableEntity creates a ChargebackPaymentUnprocessableEntity with default headers values
func NewChargebackPaymentUnprocessableEntity() *ChargebackPaymentUnprocessableEntity {
	return &ChargebackPaymentUnprocessableEntity{}
}

/*
ChargebackPaymentUnprocessableEntity describes a response with status code 422, with default header values.

Payment is aborted by a control plugin
*/
type ChargebackPaymentUnprocessableEntity struct {
}

// IsSuccess returns true when this chargeback payment unprocessable entity response has a 2xx status code
func (o *ChargebackPaymentUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chargeback payment unprocessable entity response has a 3xx status code
func (o *ChargebackPaymentUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chargeback payment unprocessable entity response has a 4xx status code
func (o *ChargebackPaymentUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this chargeback payment unprocessable entity response has a 5xx status code
func (o *ChargebackPaymentUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this chargeback payment unprocessable entity response a status code equal to that given
func (o *ChargebackPaymentUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the chargeback payment unprocessable entity response
func (o *ChargebackPaymentUnprocessableEntity) Code() int {
	return 422
}

func (o *ChargebackPaymentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentUnprocessableEntity ", 422)
}

func (o *ChargebackPaymentUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentUnprocessableEntity ", 422)
}

func (o *ChargebackPaymentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChargebackPaymentBadGateway creates a ChargebackPaymentBadGateway with default headers values
func NewChargebackPaymentBadGateway() *ChargebackPaymentBadGateway {
	return &ChargebackPaymentBadGateway{}
}

/*
ChargebackPaymentBadGateway describes a response with status code 502, with default header values.

Failed to submit payment transaction
*/
type ChargebackPaymentBadGateway struct {
}

// IsSuccess returns true when this chargeback payment bad gateway response has a 2xx status code
func (o *ChargebackPaymentBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chargeback payment bad gateway response has a 3xx status code
func (o *ChargebackPaymentBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chargeback payment bad gateway response has a 4xx status code
func (o *ChargebackPaymentBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this chargeback payment bad gateway response has a 5xx status code
func (o *ChargebackPaymentBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this chargeback payment bad gateway response a status code equal to that given
func (o *ChargebackPaymentBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the chargeback payment bad gateway response
func (o *ChargebackPaymentBadGateway) Code() int {
	return 502
}

func (o *ChargebackPaymentBadGateway) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentBadGateway ", 502)
}

func (o *ChargebackPaymentBadGateway) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentBadGateway ", 502)
}

func (o *ChargebackPaymentBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChargebackPaymentServiceUnavailable creates a ChargebackPaymentServiceUnavailable with default headers values
func NewChargebackPaymentServiceUnavailable() *ChargebackPaymentServiceUnavailable {
	return &ChargebackPaymentServiceUnavailable{}
}

/*
ChargebackPaymentServiceUnavailable describes a response with status code 503, with default header values.

Payment in unknown status, failed to receive gateway response
*/
type ChargebackPaymentServiceUnavailable struct {
}

// IsSuccess returns true when this chargeback payment service unavailable response has a 2xx status code
func (o *ChargebackPaymentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chargeback payment service unavailable response has a 3xx status code
func (o *ChargebackPaymentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chargeback payment service unavailable response has a 4xx status code
func (o *ChargebackPaymentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this chargeback payment service unavailable response has a 5xx status code
func (o *ChargebackPaymentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this chargeback payment service unavailable response a status code equal to that given
func (o *ChargebackPaymentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the chargeback payment service unavailable response
func (o *ChargebackPaymentServiceUnavailable) Code() int {
	return 503
}

func (o *ChargebackPaymentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentServiceUnavailable ", 503)
}

func (o *ChargebackPaymentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentServiceUnavailable ", 503)
}

func (o *ChargebackPaymentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewChargebackPaymentGatewayTimeout creates a ChargebackPaymentGatewayTimeout with default headers values
func NewChargebackPaymentGatewayTimeout() *ChargebackPaymentGatewayTimeout {
	return &ChargebackPaymentGatewayTimeout{}
}

/*
ChargebackPaymentGatewayTimeout describes a response with status code 504, with default header values.

Payment operation timeout
*/
type ChargebackPaymentGatewayTimeout struct {
}

// IsSuccess returns true when this chargeback payment gateway timeout response has a 2xx status code
func (o *ChargebackPaymentGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chargeback payment gateway timeout response has a 3xx status code
func (o *ChargebackPaymentGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chargeback payment gateway timeout response has a 4xx status code
func (o *ChargebackPaymentGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this chargeback payment gateway timeout response has a 5xx status code
func (o *ChargebackPaymentGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this chargeback payment gateway timeout response a status code equal to that given
func (o *ChargebackPaymentGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the chargeback payment gateway timeout response
func (o *ChargebackPaymentGatewayTimeout) Code() int {
	return 504
}

func (o *ChargebackPaymentGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentGatewayTimeout ", 504)
}

func (o *ChargebackPaymentGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/chargebacks][%d] chargebackPaymentGatewayTimeout ", 504)
}

func (o *ChargebackPaymentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
