// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new payment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelScheduledPaymentTransactionByExternalKey(params *CancelScheduledPaymentTransactionByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelScheduledPaymentTransactionByExternalKeyNoContent, error)

	CancelScheduledPaymentTransactionByID(params *CancelScheduledPaymentTransactionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelScheduledPaymentTransactionByIDNoContent, error)

	CaptureAuthorization(params *CaptureAuthorizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CaptureAuthorizationCreated, error)

	CaptureAuthorizationByExternalKey(params *CaptureAuthorizationByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CaptureAuthorizationByExternalKeyCreated, error)

	ChargebackPayment(params *ChargebackPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChargebackPaymentCreated, error)

	ChargebackPaymentByExternalKey(params *ChargebackPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChargebackPaymentByExternalKeyCreated, error)

	ChargebackReversalPayment(params *ChargebackReversalPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChargebackReversalPaymentCreated, error)

	ChargebackReversalPaymentByExternalKey(params *ChargebackReversalPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChargebackReversalPaymentByExternalKeyCreated, error)

	CompleteTransaction(params *CompleteTransactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompleteTransactionNoContent, error)

	CompleteTransactionByExternalKey(params *CompleteTransactionByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompleteTransactionByExternalKeyNoContent, error)

	CreateComboPayment(params *CreateComboPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComboPaymentCreated, error)

	CreatePaymentCustomFields(params *CreatePaymentCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentCustomFieldsCreated, error)

	CreatePaymentTags(params *CreatePaymentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentTagsCreated, error)

	DeletePaymentCustomFields(params *DeletePaymentCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePaymentCustomFieldsNoContent, error)

	DeletePaymentTags(params *DeletePaymentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePaymentTagsNoContent, error)

	GetPayment(params *GetPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentOK, error)

	GetPaymentAttemptAuditLogsWithHistory(params *GetPaymentAttemptAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentAttemptAuditLogsWithHistoryOK, error)

	GetPaymentAuditLogsWithHistory(params *GetPaymentAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentAuditLogsWithHistoryOK, error)

	GetPaymentByExternalKey(params *GetPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentByExternalKeyOK, error)

	GetPaymentCustomFields(params *GetPaymentCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentCustomFieldsOK, error)

	GetPaymentTags(params *GetPaymentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentTagsOK, error)

	GetPayments(params *GetPaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentsOK, error)

	ModifyPaymentCustomFields(params *ModifyPaymentCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyPaymentCustomFieldsNoContent, error)

	RefundPayment(params *RefundPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefundPaymentCreated, error)

	RefundPaymentByExternalKey(params *RefundPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefundPaymentByExternalKeyCreated, error)

	SearchPayments(params *SearchPaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPaymentsOK, error)

	VoidPayment(params *VoidPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VoidPaymentNoContent, error)

	VoidPaymentByExternalKey(params *VoidPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VoidPaymentByExternalKeyNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CancelScheduledPaymentTransactionByExternalKey cancels a scheduled payment attempt retry
*/
func (a *Client) CancelScheduledPaymentTransactionByExternalKey(params *CancelScheduledPaymentTransactionByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelScheduledPaymentTransactionByExternalKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelScheduledPaymentTransactionByExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelScheduledPaymentTransactionByExternalKey",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/payments/cancelScheduledPaymentTransaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelScheduledPaymentTransactionByExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelScheduledPaymentTransactionByExternalKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelScheduledPaymentTransactionByExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CancelScheduledPaymentTransactionByID cancels a scheduled payment attempt retry
*/
func (a *Client) CancelScheduledPaymentTransactionByID(params *CancelScheduledPaymentTransactionByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelScheduledPaymentTransactionByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelScheduledPaymentTransactionByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelScheduledPaymentTransactionById",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/payments/{paymentTransactionId}/cancelScheduledPaymentTransaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelScheduledPaymentTransactionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelScheduledPaymentTransactionByIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelScheduledPaymentTransactionById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CaptureAuthorization captures an existing authorization
*/
func (a *Client) CaptureAuthorization(params *CaptureAuthorizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CaptureAuthorizationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCaptureAuthorizationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "captureAuthorization",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CaptureAuthorizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CaptureAuthorizationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for captureAuthorization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CaptureAuthorizationByExternalKey captures an existing authorization
*/
func (a *Client) CaptureAuthorizationByExternalKey(params *CaptureAuthorizationByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CaptureAuthorizationByExternalKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCaptureAuthorizationByExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "captureAuthorizationByExternalKey",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CaptureAuthorizationByExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CaptureAuthorizationByExternalKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for captureAuthorizationByExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ChargebackPayment records a chargeback
*/
func (a *Client) ChargebackPayment(params *ChargebackPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChargebackPaymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChargebackPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "chargebackPayment",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/{paymentId}/chargebacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChargebackPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChargebackPaymentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for chargebackPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ChargebackPaymentByExternalKey records a chargeback
*/
func (a *Client) ChargebackPaymentByExternalKey(params *ChargebackPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChargebackPaymentByExternalKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChargebackPaymentByExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "chargebackPaymentByExternalKey",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/chargebacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChargebackPaymentByExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChargebackPaymentByExternalKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for chargebackPaymentByExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ChargebackReversalPayment records a chargeback reversal
*/
func (a *Client) ChargebackReversalPayment(params *ChargebackReversalPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChargebackReversalPaymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChargebackReversalPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "chargebackReversalPayment",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/{paymentId}/chargebackReversals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChargebackReversalPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChargebackReversalPaymentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for chargebackReversalPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ChargebackReversalPaymentByExternalKey records a chargeback reversal
*/
func (a *Client) ChargebackReversalPaymentByExternalKey(params *ChargebackReversalPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChargebackReversalPaymentByExternalKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChargebackReversalPaymentByExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "chargebackReversalPaymentByExternalKey",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/chargebackReversals",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChargebackReversalPaymentByExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChargebackReversalPaymentByExternalKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for chargebackReversalPaymentByExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CompleteTransaction completes an existing transaction
*/
func (a *Client) CompleteTransaction(params *CompleteTransactionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompleteTransactionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompleteTransactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "completeTransaction",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/payments/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompleteTransactionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompleteTransactionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for completeTransaction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CompleteTransactionByExternalKey completes an existing transaction
*/
func (a *Client) CompleteTransactionByExternalKey(params *CompleteTransactionByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CompleteTransactionByExternalKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompleteTransactionByExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "completeTransactionByExternalKey",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompleteTransactionByExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompleteTransactionByExternalKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for completeTransactionByExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateComboPayment combos api to create a new payment transaction on a existing or not account
*/
func (a *Client) CreateComboPayment(params *CreateComboPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateComboPaymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateComboPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createComboPayment",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/combo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateComboPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateComboPaymentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createComboPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePaymentCustomFields adds custom fields to payment
*/
func (a *Client) CreatePaymentCustomFields(params *CreatePaymentCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentCustomFieldsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPaymentCustomFields",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/{paymentId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePaymentCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentCustomFieldsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPaymentCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePaymentTags adds tags to payment payment
*/
func (a *Client) CreatePaymentTags(params *CreatePaymentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePaymentTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePaymentTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPaymentTags",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/{paymentId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePaymentTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePaymentTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPaymentTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePaymentCustomFields removes custom fields from payment payment
*/
func (a *Client) DeletePaymentCustomFields(params *DeletePaymentCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePaymentCustomFieldsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePaymentCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePaymentCustomFields",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/payments/{paymentId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePaymentCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePaymentCustomFieldsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePaymentCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePaymentTags removes tags from payment payment
*/
func (a *Client) DeletePaymentTags(params *DeletePaymentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePaymentTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePaymentTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePaymentTags",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/payments/{paymentId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePaymentTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePaymentTagsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePaymentTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPayment retrieves a payment by id
*/
func (a *Client) GetPayment(params *GetPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPayment",
		Method:             "GET",
		PathPattern:        "/1.0/kb/payments/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPaymentAttemptAuditLogsWithHistory retrieves payment attempt audit logs with history by id
*/
func (a *Client) GetPaymentAttemptAuditLogsWithHistory(params *GetPaymentAttemptAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentAttemptAuditLogsWithHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentAttemptAuditLogsWithHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPaymentAttemptAuditLogsWithHistory",
		Method:             "GET",
		PathPattern:        "/1.0/kb/payments/attempts/{paymentAttemptId}/auditLogsWithHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentAttemptAuditLogsWithHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentAttemptAuditLogsWithHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaymentAttemptAuditLogsWithHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPaymentAuditLogsWithHistory retrieves payment audit logs with history by id
*/
func (a *Client) GetPaymentAuditLogsWithHistory(params *GetPaymentAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentAuditLogsWithHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentAuditLogsWithHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPaymentAuditLogsWithHistory",
		Method:             "GET",
		PathPattern:        "/1.0/kb/payments/{paymentId}/auditLogsWithHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentAuditLogsWithHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentAuditLogsWithHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaymentAuditLogsWithHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPaymentByExternalKey retrieves a payment by external key
*/
func (a *Client) GetPaymentByExternalKey(params *GetPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentByExternalKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentByExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPaymentByExternalKey",
		Method:             "GET",
		PathPattern:        "/1.0/kb/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentByExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentByExternalKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaymentByExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPaymentCustomFields retrieves payment custom fields
*/
func (a *Client) GetPaymentCustomFields(params *GetPaymentCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentCustomFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPaymentCustomFields",
		Method:             "GET",
		PathPattern:        "/1.0/kb/payments/{paymentId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentCustomFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaymentCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPaymentTags retrieves payment payment tags
*/
func (a *Client) GetPaymentTags(params *GetPaymentTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPaymentTags",
		Method:             "GET",
		PathPattern:        "/1.0/kb/payments/{paymentId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaymentTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPayments gets payments
*/
func (a *Client) GetPayments(params *GetPaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPayments",
		Method:             "GET",
		PathPattern:        "/1.0/kb/payments/pagination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyPaymentCustomFields modifies custom fields to payment
*/
func (a *Client) ModifyPaymentCustomFields(params *ModifyPaymentCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyPaymentCustomFieldsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyPaymentCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyPaymentCustomFields",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/payments/{paymentId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyPaymentCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyPaymentCustomFieldsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyPaymentCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefundPayment refunds an existing payment
*/
func (a *Client) RefundPayment(params *RefundPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefundPaymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefundPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refundPayment",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/{paymentId}/refunds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefundPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefundPaymentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refundPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefundPaymentByExternalKey refunds an existing payment
*/
func (a *Client) RefundPaymentByExternalKey(params *RefundPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefundPaymentByExternalKeyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefundPaymentByExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refundPaymentByExternalKey",
		Method:             "POST",
		PathPattern:        "/1.0/kb/payments/refunds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefundPaymentByExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefundPaymentByExternalKeyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refundPaymentByExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPayments searches payments
*/
func (a *Client) SearchPayments(params *SearchPaymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchPaymentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPaymentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchPayments",
		Method:             "GET",
		PathPattern:        "/1.0/kb/payments/search/{searchKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPaymentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPaymentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchPayments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoidPayment voids an existing payment
*/
func (a *Client) VoidPayment(params *VoidPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VoidPaymentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoidPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "voidPayment",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/payments/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VoidPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoidPaymentNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for voidPayment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoidPaymentByExternalKey voids an existing payment
*/
func (a *Client) VoidPaymentByExternalKey(params *VoidPaymentByExternalKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VoidPaymentByExternalKeyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoidPaymentByExternalKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "voidPaymentByExternalKey",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VoidPaymentByExternalKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoidPaymentByExternalKeyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for voidPaymentByExternalKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
