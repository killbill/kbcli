// Code generated by go-swagger; DO NOT EDIT.

package payment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/killbill/kbcli/v2/kbmodel"
)

// RefundPaymentReader is a Reader for the RefundPayment structure.
type RefundPaymentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefundPaymentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRefundPaymentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRefundPaymentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewRefundPaymentPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRefundPaymentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRefundPaymentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 502:
		result := NewRefundPaymentBadGateway()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRefundPaymentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 504:
		result := NewRefundPaymentGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRefundPaymentCreated creates a RefundPaymentCreated with default headers values
func NewRefundPaymentCreated() *RefundPaymentCreated {
	return &RefundPaymentCreated{}
}

/*
RefundPaymentCreated describes a response with status code 201, with default header values.

Payment transaction created successfully
*/
type RefundPaymentCreated struct {
	Payload *kbmodel.Payment
}

// IsSuccess returns true when this refund payment created response has a 2xx status code
func (o *RefundPaymentCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this refund payment created response has a 3xx status code
func (o *RefundPaymentCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refund payment created response has a 4xx status code
func (o *RefundPaymentCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this refund payment created response has a 5xx status code
func (o *RefundPaymentCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this refund payment created response a status code equal to that given
func (o *RefundPaymentCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the refund payment created response
func (o *RefundPaymentCreated) Code() int {
	return 201
}

func (o *RefundPaymentCreated) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentCreated  %+v", 201, o.Payload)
}

func (o *RefundPaymentCreated) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentCreated  %+v", 201, o.Payload)
}

func (o *RefundPaymentCreated) GetPayload() *kbmodel.Payment {
	return o.Payload
}

func (o *RefundPaymentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(kbmodel.Payment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefundPaymentBadRequest creates a RefundPaymentBadRequest with default headers values
func NewRefundPaymentBadRequest() *RefundPaymentBadRequest {
	return &RefundPaymentBadRequest{}
}

/*
RefundPaymentBadRequest describes a response with status code 400, with default header values.

Invalid paymentId supplied
*/
type RefundPaymentBadRequest struct {
}

// IsSuccess returns true when this refund payment bad request response has a 2xx status code
func (o *RefundPaymentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refund payment bad request response has a 3xx status code
func (o *RefundPaymentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refund payment bad request response has a 4xx status code
func (o *RefundPaymentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this refund payment bad request response has a 5xx status code
func (o *RefundPaymentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this refund payment bad request response a status code equal to that given
func (o *RefundPaymentBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the refund payment bad request response
func (o *RefundPaymentBadRequest) Code() int {
	return 400
}

func (o *RefundPaymentBadRequest) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentBadRequest ", 400)
}

func (o *RefundPaymentBadRequest) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentBadRequest ", 400)
}

func (o *RefundPaymentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefundPaymentPaymentRequired creates a RefundPaymentPaymentRequired with default headers values
func NewRefundPaymentPaymentRequired() *RefundPaymentPaymentRequired {
	return &RefundPaymentPaymentRequired{}
}

/*
RefundPaymentPaymentRequired describes a response with status code 402, with default header values.

Transaction declined by gateway
*/
type RefundPaymentPaymentRequired struct {
}

// IsSuccess returns true when this refund payment payment required response has a 2xx status code
func (o *RefundPaymentPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refund payment payment required response has a 3xx status code
func (o *RefundPaymentPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refund payment payment required response has a 4xx status code
func (o *RefundPaymentPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this refund payment payment required response has a 5xx status code
func (o *RefundPaymentPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this refund payment payment required response a status code equal to that given
func (o *RefundPaymentPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the refund payment payment required response
func (o *RefundPaymentPaymentRequired) Code() int {
	return 402
}

func (o *RefundPaymentPaymentRequired) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentPaymentRequired ", 402)
}

func (o *RefundPaymentPaymentRequired) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentPaymentRequired ", 402)
}

func (o *RefundPaymentPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefundPaymentNotFound creates a RefundPaymentNotFound with default headers values
func NewRefundPaymentNotFound() *RefundPaymentNotFound {
	return &RefundPaymentNotFound{}
}

/*
RefundPaymentNotFound describes a response with status code 404, with default header values.

Account or payment not found
*/
type RefundPaymentNotFound struct {
}

// IsSuccess returns true when this refund payment not found response has a 2xx status code
func (o *RefundPaymentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refund payment not found response has a 3xx status code
func (o *RefundPaymentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refund payment not found response has a 4xx status code
func (o *RefundPaymentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this refund payment not found response has a 5xx status code
func (o *RefundPaymentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this refund payment not found response a status code equal to that given
func (o *RefundPaymentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the refund payment not found response
func (o *RefundPaymentNotFound) Code() int {
	return 404
}

func (o *RefundPaymentNotFound) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentNotFound ", 404)
}

func (o *RefundPaymentNotFound) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentNotFound ", 404)
}

func (o *RefundPaymentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefundPaymentUnprocessableEntity creates a RefundPaymentUnprocessableEntity with default headers values
func NewRefundPaymentUnprocessableEntity() *RefundPaymentUnprocessableEntity {
	return &RefundPaymentUnprocessableEntity{}
}

/*
RefundPaymentUnprocessableEntity describes a response with status code 422, with default header values.

Payment is aborted by a control plugin
*/
type RefundPaymentUnprocessableEntity struct {
}

// IsSuccess returns true when this refund payment unprocessable entity response has a 2xx status code
func (o *RefundPaymentUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refund payment unprocessable entity response has a 3xx status code
func (o *RefundPaymentUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refund payment unprocessable entity response has a 4xx status code
func (o *RefundPaymentUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this refund payment unprocessable entity response has a 5xx status code
func (o *RefundPaymentUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this refund payment unprocessable entity response a status code equal to that given
func (o *RefundPaymentUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the refund payment unprocessable entity response
func (o *RefundPaymentUnprocessableEntity) Code() int {
	return 422
}

func (o *RefundPaymentUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentUnprocessableEntity ", 422)
}

func (o *RefundPaymentUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentUnprocessableEntity ", 422)
}

func (o *RefundPaymentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefundPaymentBadGateway creates a RefundPaymentBadGateway with default headers values
func NewRefundPaymentBadGateway() *RefundPaymentBadGateway {
	return &RefundPaymentBadGateway{}
}

/*
RefundPaymentBadGateway describes a response with status code 502, with default header values.

Failed to submit payment transaction
*/
type RefundPaymentBadGateway struct {
}

// IsSuccess returns true when this refund payment bad gateway response has a 2xx status code
func (o *RefundPaymentBadGateway) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refund payment bad gateway response has a 3xx status code
func (o *RefundPaymentBadGateway) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refund payment bad gateway response has a 4xx status code
func (o *RefundPaymentBadGateway) IsClientError() bool {
	return false
}

// IsServerError returns true when this refund payment bad gateway response has a 5xx status code
func (o *RefundPaymentBadGateway) IsServerError() bool {
	return true
}

// IsCode returns true when this refund payment bad gateway response a status code equal to that given
func (o *RefundPaymentBadGateway) IsCode(code int) bool {
	return code == 502
}

// Code gets the status code for the refund payment bad gateway response
func (o *RefundPaymentBadGateway) Code() int {
	return 502
}

func (o *RefundPaymentBadGateway) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentBadGateway ", 502)
}

func (o *RefundPaymentBadGateway) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentBadGateway ", 502)
}

func (o *RefundPaymentBadGateway) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefundPaymentServiceUnavailable creates a RefundPaymentServiceUnavailable with default headers values
func NewRefundPaymentServiceUnavailable() *RefundPaymentServiceUnavailable {
	return &RefundPaymentServiceUnavailable{}
}

/*
RefundPaymentServiceUnavailable describes a response with status code 503, with default header values.

Payment in unknown status, failed to receive gateway response
*/
type RefundPaymentServiceUnavailable struct {
}

// IsSuccess returns true when this refund payment service unavailable response has a 2xx status code
func (o *RefundPaymentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refund payment service unavailable response has a 3xx status code
func (o *RefundPaymentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refund payment service unavailable response has a 4xx status code
func (o *RefundPaymentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this refund payment service unavailable response has a 5xx status code
func (o *RefundPaymentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this refund payment service unavailable response a status code equal to that given
func (o *RefundPaymentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

// Code gets the status code for the refund payment service unavailable response
func (o *RefundPaymentServiceUnavailable) Code() int {
	return 503
}

func (o *RefundPaymentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentServiceUnavailable ", 503)
}

func (o *RefundPaymentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentServiceUnavailable ", 503)
}

func (o *RefundPaymentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefundPaymentGatewayTimeout creates a RefundPaymentGatewayTimeout with default headers values
func NewRefundPaymentGatewayTimeout() *RefundPaymentGatewayTimeout {
	return &RefundPaymentGatewayTimeout{}
}

/*
RefundPaymentGatewayTimeout describes a response with status code 504, with default header values.

Payment operation timeout
*/
type RefundPaymentGatewayTimeout struct {
}

// IsSuccess returns true when this refund payment gateway timeout response has a 2xx status code
func (o *RefundPaymentGatewayTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this refund payment gateway timeout response has a 3xx status code
func (o *RefundPaymentGatewayTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this refund payment gateway timeout response has a 4xx status code
func (o *RefundPaymentGatewayTimeout) IsClientError() bool {
	return false
}

// IsServerError returns true when this refund payment gateway timeout response has a 5xx status code
func (o *RefundPaymentGatewayTimeout) IsServerError() bool {
	return true
}

// IsCode returns true when this refund payment gateway timeout response a status code equal to that given
func (o *RefundPaymentGatewayTimeout) IsCode(code int) bool {
	return code == 504
}

// Code gets the status code for the refund payment gateway timeout response
func (o *RefundPaymentGatewayTimeout) Code() int {
	return 504
}

func (o *RefundPaymentGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentGatewayTimeout ", 504)
}

func (o *RefundPaymentGatewayTimeout) String() string {
	return fmt.Sprintf("[POST /1.0/kb/payments/{paymentId}/refunds][%d] refundPaymentGatewayTimeout ", 504)
}

func (o *RefundPaymentGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
