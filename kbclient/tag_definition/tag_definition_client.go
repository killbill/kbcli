// Code generated by go-swagger; DO NOT EDIT.

package tag_definition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tag definition API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tag definition API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTagDefinition(params *CreateTagDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTagDefinitionCreated, error)

	DeleteTagDefinition(params *DeleteTagDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTagDefinitionNoContent, error)

	GetTagDefinition(params *GetTagDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagDefinitionOK, error)

	GetTagDefinitionAuditLogsWithHistory(params *GetTagDefinitionAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagDefinitionAuditLogsWithHistoryOK, error)

	GetTagDefinitions(params *GetTagDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagDefinitionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateTagDefinition creates a tag definition
*/
func (a *Client) CreateTagDefinition(params *CreateTagDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTagDefinitionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTagDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTagDefinition",
		Method:             "POST",
		PathPattern:        "/1.0/kb/tagDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTagDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTagDefinitionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTagDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTagDefinition deletes a tag definition
*/
func (a *Client) DeleteTagDefinition(params *DeleteTagDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTagDefinitionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTagDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTagDefinition",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/tagDefinitions/{tagDefinitionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTagDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTagDefinitionNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTagDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagDefinition retrieves a tag definition
*/
func (a *Client) GetTagDefinition(params *GetTagDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagDefinitionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagDefinition",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tagDefinitions/{tagDefinitionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTagDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagDefinitionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagDefinition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagDefinitionAuditLogsWithHistory retrieves tag definition audit logs with history by id
*/
func (a *Client) GetTagDefinitionAuditLogsWithHistory(params *GetTagDefinitionAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagDefinitionAuditLogsWithHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagDefinitionAuditLogsWithHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagDefinitionAuditLogsWithHistory",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tagDefinitions/{tagDefinitionId}/auditLogsWithHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTagDefinitionAuditLogsWithHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagDefinitionAuditLogsWithHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagDefinitionAuditLogsWithHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTagDefinitions lists tag definitions
*/
func (a *Client) GetTagDefinitions(params *GetTagDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTagDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagDefinitionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTagDefinitions",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tagDefinitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTagDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTagDefinitionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTagDefinitions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
