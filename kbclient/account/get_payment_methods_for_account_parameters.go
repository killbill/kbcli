// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPaymentMethodsForAccountParams creates a new GetPaymentMethodsForAccountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPaymentMethodsForAccountParams() *GetPaymentMethodsForAccountParams {
	return &GetPaymentMethodsForAccountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPaymentMethodsForAccountParamsWithTimeout creates a new GetPaymentMethodsForAccountParams object
// with the ability to set a timeout on a request.
func NewGetPaymentMethodsForAccountParamsWithTimeout(timeout time.Duration) *GetPaymentMethodsForAccountParams {
	return &GetPaymentMethodsForAccountParams{
		timeout: timeout,
	}
}

// NewGetPaymentMethodsForAccountParamsWithContext creates a new GetPaymentMethodsForAccountParams object
// with the ability to set a context for a request.
func NewGetPaymentMethodsForAccountParamsWithContext(ctx context.Context) *GetPaymentMethodsForAccountParams {
	return &GetPaymentMethodsForAccountParams{
		Context: ctx,
	}
}

// NewGetPaymentMethodsForAccountParamsWithHTTPClient creates a new GetPaymentMethodsForAccountParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPaymentMethodsForAccountParamsWithHTTPClient(client *http.Client) *GetPaymentMethodsForAccountParams {
	return &GetPaymentMethodsForAccountParams{
		HTTPClient: client,
	}
}

/*
GetPaymentMethodsForAccountParams contains all the parameters to send to the API endpoint

	for the get payment methods for account operation.

	Typically these are written to a http.Request.
*/
type GetPaymentMethodsForAccountParams struct {

	// AccountID.
	//
	// Format: uuid
	AccountID strfmt.UUID

	// Audit.
	//
	// Default: "NONE"
	Audit *string

	// IncludedDeleted.
	IncludedDeleted *bool

	// PluginProperty.
	PluginProperty []string

	// WithPluginInfo.
	WithPluginInfo *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get payment methods for account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPaymentMethodsForAccountParams) WithDefaults() *GetPaymentMethodsForAccountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get payment methods for account params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPaymentMethodsForAccountParams) SetDefaults() {
	var (
		auditDefault = string("NONE")

		includedDeletedDefault = bool(false)

		withPluginInfoDefault = bool(false)
	)

	val := GetPaymentMethodsForAccountParams{
		Audit:           &auditDefault,
		IncludedDeleted: &includedDeletedDefault,
		WithPluginInfo:  &withPluginInfoDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) WithTimeout(timeout time.Duration) *GetPaymentMethodsForAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) WithContext(ctx context.Context) *GetPaymentMethodsForAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) WithHTTPClient(client *http.Client) *GetPaymentMethodsForAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) WithAccountID(accountID strfmt.UUID) *GetPaymentMethodsForAccountParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) SetAccountID(accountID strfmt.UUID) {
	o.AccountID = accountID
}

// WithAudit adds the audit to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) WithAudit(audit *string) *GetPaymentMethodsForAccountParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) SetAudit(audit *string) {
	o.Audit = audit
}

// WithIncludedDeleted adds the includedDeleted to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) WithIncludedDeleted(includedDeleted *bool) *GetPaymentMethodsForAccountParams {
	o.SetIncludedDeleted(includedDeleted)
	return o
}

// SetIncludedDeleted adds the includedDeleted to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) SetIncludedDeleted(includedDeleted *bool) {
	o.IncludedDeleted = includedDeleted
}

// WithPluginProperty adds the pluginProperty to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) WithPluginProperty(pluginProperty []string) *GetPaymentMethodsForAccountParams {
	o.SetPluginProperty(pluginProperty)
	return o
}

// SetPluginProperty adds the pluginProperty to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) SetPluginProperty(pluginProperty []string) {
	o.PluginProperty = pluginProperty
}

// WithWithPluginInfo adds the withPluginInfo to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) WithWithPluginInfo(withPluginInfo *bool) *GetPaymentMethodsForAccountParams {
	o.SetWithPluginInfo(withPluginInfo)
	return o
}

// SetWithPluginInfo adds the withPluginInfo to the get payment methods for account params
func (o *GetPaymentMethodsForAccountParams) SetWithPluginInfo(withPluginInfo *bool) {
	o.WithPluginInfo = withPluginInfo
}

// WriteToRequest writes these params to a swagger request
func (o *GetPaymentMethodsForAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID.String()); err != nil {
		return err
	}

	if o.Audit != nil {

		// query param audit
		var qrAudit string

		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := qrAudit
		if qAudit != "" {

			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}
	}

	if o.IncludedDeleted != nil {

		// query param includedDeleted
		var qrIncludedDeleted bool

		if o.IncludedDeleted != nil {
			qrIncludedDeleted = *o.IncludedDeleted
		}
		qIncludedDeleted := swag.FormatBool(qrIncludedDeleted)
		if qIncludedDeleted != "" {

			if err := r.SetQueryParam("includedDeleted", qIncludedDeleted); err != nil {
				return err
			}
		}
	}

	if o.PluginProperty != nil {

		// binding items for pluginProperty
		joinedPluginProperty := o.bindParamPluginProperty(reg)

		// query array param pluginProperty
		if err := r.SetQueryParam("pluginProperty", joinedPluginProperty...); err != nil {
			return err
		}
	}

	if o.WithPluginInfo != nil {

		// query param withPluginInfo
		var qrWithPluginInfo bool

		if o.WithPluginInfo != nil {
			qrWithPluginInfo = *o.WithPluginInfo
		}
		qWithPluginInfo := swag.FormatBool(qrWithPluginInfo)
		if qWithPluginInfo != "" {

			if err := r.SetQueryParam("withPluginInfo", qWithPluginInfo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetPaymentMethodsForAccount binds the parameter pluginProperty
func (o *GetPaymentMethodsForAccountParams) bindParamPluginProperty(formats strfmt.Registry) []string {
	pluginPropertyIR := o.PluginProperty

	var pluginPropertyIC []string
	for _, pluginPropertyIIR := range pluginPropertyIR { // explode []string

		pluginPropertyIIV := pluginPropertyIIR // string as string
		pluginPropertyIC = append(pluginPropertyIC, pluginPropertyIIV)
	}

	// items.CollectionFormat: "multi"
	pluginPropertyIS := swag.JoinByFormat(pluginPropertyIC, "multi")

	return pluginPropertyIS
}
