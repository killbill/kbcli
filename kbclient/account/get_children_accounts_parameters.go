// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetChildrenAccountsParams creates a new GetChildrenAccountsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetChildrenAccountsParams() *GetChildrenAccountsParams {
	return &GetChildrenAccountsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetChildrenAccountsParamsWithTimeout creates a new GetChildrenAccountsParams object
// with the ability to set a timeout on a request.
func NewGetChildrenAccountsParamsWithTimeout(timeout time.Duration) *GetChildrenAccountsParams {
	return &GetChildrenAccountsParams{
		timeout: timeout,
	}
}

// NewGetChildrenAccountsParamsWithContext creates a new GetChildrenAccountsParams object
// with the ability to set a context for a request.
func NewGetChildrenAccountsParamsWithContext(ctx context.Context) *GetChildrenAccountsParams {
	return &GetChildrenAccountsParams{
		Context: ctx,
	}
}

// NewGetChildrenAccountsParamsWithHTTPClient creates a new GetChildrenAccountsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetChildrenAccountsParamsWithHTTPClient(client *http.Client) *GetChildrenAccountsParams {
	return &GetChildrenAccountsParams{
		HTTPClient: client,
	}
}

/*
GetChildrenAccountsParams contains all the parameters to send to the API endpoint

	for the get children accounts operation.

	Typically these are written to a http.Request.
*/
type GetChildrenAccountsParams struct {

	// AccountID.
	//
	// Format: uuid
	AccountID strfmt.UUID

	// AccountWithBalance.
	AccountWithBalance *bool

	// AccountWithBalanceAndCBA.
	AccountWithBalanceAndCBA *bool

	// Audit.
	//
	// Default: "NONE"
	Audit *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get children accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChildrenAccountsParams) WithDefaults() *GetChildrenAccountsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get children accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChildrenAccountsParams) SetDefaults() {
	var (
		accountWithBalanceDefault = bool(false)

		accountWithBalanceAndCBADefault = bool(false)

		auditDefault = string("NONE")
	)

	val := GetChildrenAccountsParams{
		AccountWithBalance:       &accountWithBalanceDefault,
		AccountWithBalanceAndCBA: &accountWithBalanceAndCBADefault,
		Audit:                    &auditDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get children accounts params
func (o *GetChildrenAccountsParams) WithTimeout(timeout time.Duration) *GetChildrenAccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get children accounts params
func (o *GetChildrenAccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get children accounts params
func (o *GetChildrenAccountsParams) WithContext(ctx context.Context) *GetChildrenAccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get children accounts params
func (o *GetChildrenAccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get children accounts params
func (o *GetChildrenAccountsParams) WithHTTPClient(client *http.Client) *GetChildrenAccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get children accounts params
func (o *GetChildrenAccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get children accounts params
func (o *GetChildrenAccountsParams) WithAccountID(accountID strfmt.UUID) *GetChildrenAccountsParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get children accounts params
func (o *GetChildrenAccountsParams) SetAccountID(accountID strfmt.UUID) {
	o.AccountID = accountID
}

// WithAccountWithBalance adds the accountWithBalance to the get children accounts params
func (o *GetChildrenAccountsParams) WithAccountWithBalance(accountWithBalance *bool) *GetChildrenAccountsParams {
	o.SetAccountWithBalance(accountWithBalance)
	return o
}

// SetAccountWithBalance adds the accountWithBalance to the get children accounts params
func (o *GetChildrenAccountsParams) SetAccountWithBalance(accountWithBalance *bool) {
	o.AccountWithBalance = accountWithBalance
}

// WithAccountWithBalanceAndCBA adds the accountWithBalanceAndCBA to the get children accounts params
func (o *GetChildrenAccountsParams) WithAccountWithBalanceAndCBA(accountWithBalanceAndCBA *bool) *GetChildrenAccountsParams {
	o.SetAccountWithBalanceAndCBA(accountWithBalanceAndCBA)
	return o
}

// SetAccountWithBalanceAndCBA adds the accountWithBalanceAndCBA to the get children accounts params
func (o *GetChildrenAccountsParams) SetAccountWithBalanceAndCBA(accountWithBalanceAndCBA *bool) {
	o.AccountWithBalanceAndCBA = accountWithBalanceAndCBA
}

// WithAudit adds the audit to the get children accounts params
func (o *GetChildrenAccountsParams) WithAudit(audit *string) *GetChildrenAccountsParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the get children accounts params
func (o *GetChildrenAccountsParams) SetAudit(audit *string) {
	o.Audit = audit
}

// WriteToRequest writes these params to a swagger request
func (o *GetChildrenAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param accountId
	if err := r.SetPathParam("accountId", o.AccountID.String()); err != nil {
		return err
	}

	if o.AccountWithBalance != nil {

		// query param accountWithBalance
		var qrAccountWithBalance bool

		if o.AccountWithBalance != nil {
			qrAccountWithBalance = *o.AccountWithBalance
		}
		qAccountWithBalance := swag.FormatBool(qrAccountWithBalance)
		if qAccountWithBalance != "" {

			if err := r.SetQueryParam("accountWithBalance", qAccountWithBalance); err != nil {
				return err
			}
		}
	}

	if o.AccountWithBalanceAndCBA != nil {

		// query param accountWithBalanceAndCBA
		var qrAccountWithBalanceAndCBA bool

		if o.AccountWithBalanceAndCBA != nil {
			qrAccountWithBalanceAndCBA = *o.AccountWithBalanceAndCBA
		}
		qAccountWithBalanceAndCBA := swag.FormatBool(qrAccountWithBalanceAndCBA)
		if qAccountWithBalanceAndCBA != "" {

			if err := r.SetQueryParam("accountWithBalanceAndCBA", qAccountWithBalanceAndCBA); err != nil {
				return err
			}
		}
	}

	if o.Audit != nil {

		// query param audit
		var qrAudit string

		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := qrAudit
		if qAudit != "" {

			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
