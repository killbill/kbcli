// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountByKeyParams creates a new GetAccountByKeyParams object
// with the default values initialized.
func NewGetAccountByKeyParams() *GetAccountByKeyParams {
	var (
		accountWithBalanceDefault       = bool(false)
		accountWithBalanceAndCBADefault = bool(false)
		auditDefault                    = string("NONE")
	)
	return &GetAccountByKeyParams{
		AccountWithBalance:       &accountWithBalanceDefault,
		AccountWithBalanceAndCBA: &accountWithBalanceAndCBADefault,
		Audit:                    &auditDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountByKeyParamsWithTimeout creates a new GetAccountByKeyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountByKeyParamsWithTimeout(timeout time.Duration) *GetAccountByKeyParams {
	var (
		accountWithBalanceDefault       = bool(false)
		accountWithBalanceAndCBADefault = bool(false)
		auditDefault                    = string("NONE")
	)
	return &GetAccountByKeyParams{
		AccountWithBalance:       &accountWithBalanceDefault,
		AccountWithBalanceAndCBA: &accountWithBalanceAndCBADefault,
		Audit:                    &auditDefault,

		timeout: timeout,
	}
}

// NewGetAccountByKeyParamsWithContext creates a new GetAccountByKeyParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccountByKeyParamsWithContext(ctx context.Context) *GetAccountByKeyParams {
	var (
		accountWithBalanceDefault       = bool(false)
		accountWithBalanceAndCBADefault = bool(false)
		auditDefault                    = string("NONE")
	)
	return &GetAccountByKeyParams{
		AccountWithBalance:       &accountWithBalanceDefault,
		AccountWithBalanceAndCBA: &accountWithBalanceAndCBADefault,
		Audit:                    &auditDefault,

		Context: ctx,
	}
}

// NewGetAccountByKeyParamsWithHTTPClient creates a new GetAccountByKeyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccountByKeyParamsWithHTTPClient(client *http.Client) *GetAccountByKeyParams {
	var (
		accountWithBalanceDefault       = bool(false)
		accountWithBalanceAndCBADefault = bool(false)
		auditDefault                    = string("NONE")
	)
	return &GetAccountByKeyParams{
		AccountWithBalance:       &accountWithBalanceDefault,
		AccountWithBalanceAndCBA: &accountWithBalanceAndCBADefault,
		Audit:                    &auditDefault,
		HTTPClient:               client,
	}
}

/*GetAccountByKeyParams contains all the parameters to send to the API endpoint
for the get account by key operation typically these are written to a http.Request
*/
type GetAccountByKeyParams struct {

	/*AccountWithBalance*/
	AccountWithBalance *bool
	/*AccountWithBalanceAndCBA*/
	AccountWithBalanceAndCBA *bool
	/*Audit*/
	Audit *string
	/*ExternalKey*/
	ExternalKey string

	WithProfilingInfo     *string // If set, return KB hprof headers
	WithStackTrace        *bool   // If set, returns full stack trace with error message
	timeout               time.Duration
	Context               context.Context
	HTTPClient            *http.Client
	ProcessLocationHeader bool // For create APIs that return 201, send another request and retrieve the resource.
}

// WithTimeout adds the timeout to the get account by key params
func (o *GetAccountByKeyParams) WithTimeout(timeout time.Duration) *GetAccountByKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get account by key params
func (o *GetAccountByKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get account by key params
func (o *GetAccountByKeyParams) WithContext(ctx context.Context) *GetAccountByKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get account by key params
func (o *GetAccountByKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get account by key params
func (o *GetAccountByKeyParams) WithHTTPClient(client *http.Client) *GetAccountByKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get account by key params
func (o *GetAccountByKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountWithBalance adds the accountWithBalance to the get account by key params
func (o *GetAccountByKeyParams) WithAccountWithBalance(accountWithBalance *bool) *GetAccountByKeyParams {
	o.SetAccountWithBalance(accountWithBalance)
	return o
}

// SetAccountWithBalance adds the accountWithBalance to the get account by key params
func (o *GetAccountByKeyParams) SetAccountWithBalance(accountWithBalance *bool) {
	o.AccountWithBalance = accountWithBalance
}

// WithAccountWithBalanceAndCBA adds the accountWithBalanceAndCBA to the get account by key params
func (o *GetAccountByKeyParams) WithAccountWithBalanceAndCBA(accountWithBalanceAndCBA *bool) *GetAccountByKeyParams {
	o.SetAccountWithBalanceAndCBA(accountWithBalanceAndCBA)
	return o
}

// SetAccountWithBalanceAndCBA adds the accountWithBalanceAndCBA to the get account by key params
func (o *GetAccountByKeyParams) SetAccountWithBalanceAndCBA(accountWithBalanceAndCBA *bool) {
	o.AccountWithBalanceAndCBA = accountWithBalanceAndCBA
}

// WithAudit adds the audit to the get account by key params
func (o *GetAccountByKeyParams) WithAudit(audit *string) *GetAccountByKeyParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the get account by key params
func (o *GetAccountByKeyParams) SetAudit(audit *string) {
	o.Audit = audit
}

// WithExternalKey adds the externalKey to the get account by key params
func (o *GetAccountByKeyParams) WithExternalKey(externalKey string) *GetAccountByKeyParams {
	o.SetExternalKey(externalKey)
	return o
}

// SetExternalKey adds the externalKey to the get account by key params
func (o *GetAccountByKeyParams) SetExternalKey(externalKey string) {
	o.ExternalKey = externalKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountByKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountWithBalance != nil {

		// query param accountWithBalance
		var qrAccountWithBalance bool
		if o.AccountWithBalance != nil {
			qrAccountWithBalance = *o.AccountWithBalance
		}
		qAccountWithBalance := swag.FormatBool(qrAccountWithBalance)
		if qAccountWithBalance != "" {
			if err := r.SetQueryParam("accountWithBalance", qAccountWithBalance); err != nil {
				return err
			}
		}

	}

	if o.AccountWithBalanceAndCBA != nil {

		// query param accountWithBalanceAndCBA
		var qrAccountWithBalanceAndCBA bool
		if o.AccountWithBalanceAndCBA != nil {
			qrAccountWithBalanceAndCBA = *o.AccountWithBalanceAndCBA
		}
		qAccountWithBalanceAndCBA := swag.FormatBool(qrAccountWithBalanceAndCBA)
		if qAccountWithBalanceAndCBA != "" {
			if err := r.SetQueryParam("accountWithBalanceAndCBA", qAccountWithBalanceAndCBA); err != nil {
				return err
			}
		}

	}

	if o.Audit != nil {

		// query param audit
		var qrAudit string
		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := qrAudit
		if qAudit != "" {
			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}

	}

	// query param externalKey
	qrExternalKey := o.ExternalKey
	qExternalKey := qrExternalKey
	if qExternalKey != "" {
		if err := r.SetQueryParam("externalKey", qExternalKey); err != nil {
			return err
		}
	}

	// header param WithProfilingInfo
	if o.WithProfilingInfo != nil && len(*o.WithProfilingInfo) > 0 {
		if err := r.SetHeaderParam("X-Killbill-Profiling-Req", *o.WithProfilingInfo); err != nil {
			return err
		}
	}

	// header param withStackTrace
	if o.WithStackTrace != nil && *o.WithStackTrace {
		if err := r.SetQueryParam("withStackTrace", "true"); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
