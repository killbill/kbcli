// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPhaseForSubscriptionAndDateParams creates a new GetPhaseForSubscriptionAndDateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPhaseForSubscriptionAndDateParams() *GetPhaseForSubscriptionAndDateParams {
	return &GetPhaseForSubscriptionAndDateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPhaseForSubscriptionAndDateParamsWithTimeout creates a new GetPhaseForSubscriptionAndDateParams object
// with the ability to set a timeout on a request.
func NewGetPhaseForSubscriptionAndDateParamsWithTimeout(timeout time.Duration) *GetPhaseForSubscriptionAndDateParams {
	return &GetPhaseForSubscriptionAndDateParams{
		timeout: timeout,
	}
}

// NewGetPhaseForSubscriptionAndDateParamsWithContext creates a new GetPhaseForSubscriptionAndDateParams object
// with the ability to set a context for a request.
func NewGetPhaseForSubscriptionAndDateParamsWithContext(ctx context.Context) *GetPhaseForSubscriptionAndDateParams {
	return &GetPhaseForSubscriptionAndDateParams{
		Context: ctx,
	}
}

// NewGetPhaseForSubscriptionAndDateParamsWithHTTPClient creates a new GetPhaseForSubscriptionAndDateParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPhaseForSubscriptionAndDateParamsWithHTTPClient(client *http.Client) *GetPhaseForSubscriptionAndDateParams {
	return &GetPhaseForSubscriptionAndDateParams{
		HTTPClient: client,
	}
}

/*
GetPhaseForSubscriptionAndDateParams contains all the parameters to send to the API endpoint

	for the get phase for subscription and date operation.

	Typically these are written to a http.Request.
*/
type GetPhaseForSubscriptionAndDateParams struct {

	// RequestedDate.
	//
	// Format: date
	RequestedDate *strfmt.Date

	// SubscriptionID.
	//
	// Format: uuid
	SubscriptionID *strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get phase for subscription and date params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPhaseForSubscriptionAndDateParams) WithDefaults() *GetPhaseForSubscriptionAndDateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get phase for subscription and date params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPhaseForSubscriptionAndDateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) WithTimeout(timeout time.Duration) *GetPhaseForSubscriptionAndDateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) WithContext(ctx context.Context) *GetPhaseForSubscriptionAndDateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) WithHTTPClient(client *http.Client) *GetPhaseForSubscriptionAndDateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRequestedDate adds the requestedDate to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) WithRequestedDate(requestedDate *strfmt.Date) *GetPhaseForSubscriptionAndDateParams {
	o.SetRequestedDate(requestedDate)
	return o
}

// SetRequestedDate adds the requestedDate to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) SetRequestedDate(requestedDate *strfmt.Date) {
	o.RequestedDate = requestedDate
}

// WithSubscriptionID adds the subscriptionID to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) WithSubscriptionID(subscriptionID *strfmt.UUID) *GetPhaseForSubscriptionAndDateParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the get phase for subscription and date params
func (o *GetPhaseForSubscriptionAndDateParams) SetSubscriptionID(subscriptionID *strfmt.UUID) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPhaseForSubscriptionAndDateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RequestedDate != nil {

		// query param requestedDate
		var qrRequestedDate strfmt.Date

		if o.RequestedDate != nil {
			qrRequestedDate = *o.RequestedDate
		}
		qRequestedDate := qrRequestedDate.String()
		if qRequestedDate != "" {

			if err := r.SetQueryParam("requestedDate", qRequestedDate); err != nil {
				return err
			}
		}
	}

	if o.SubscriptionID != nil {

		// query param subscriptionId
		var qrSubscriptionID strfmt.UUID

		if o.SubscriptionID != nil {
			qrSubscriptionID = *o.SubscriptionID
		}
		qSubscriptionID := qrSubscriptionID.String()
		if qSubscriptionID != "" {

			if err := r.SetQueryParam("subscriptionId", qSubscriptionID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
