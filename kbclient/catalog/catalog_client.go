// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new catalog API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for catalog API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSimplePlan(params *AddSimplePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSimplePlanCreated, error)

	DeleteCatalog(params *DeleteCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogNoContent, error)

	GetAvailableAddons(params *GetAvailableAddonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailableAddonsOK, error)

	GetAvailableBasePlans(params *GetAvailableBasePlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailableBasePlansOK, error)

	GetCatalogJSON(params *GetCatalogJSONParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogJSONOK, error)

	GetCatalogVersions(params *GetCatalogVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogVersionsOK, error)

	GetCatalogXML(params *GetCatalogXMLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogXMLOK, error)

	GetPhaseForSubscriptionAndDate(params *GetPhaseForSubscriptionAndDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPhaseForSubscriptionAndDateOK, error)

	GetPlanForSubscriptionAndDate(params *GetPlanForSubscriptionAndDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlanForSubscriptionAndDateOK, error)

	GetPriceListForSubscriptionAndDate(params *GetPriceListForSubscriptionAndDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPriceListForSubscriptionAndDateOK, error)

	GetProductForSubscriptionAndDate(params *GetProductForSubscriptionAndDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProductForSubscriptionAndDateOK, error)

	UploadCatalogXML(params *UploadCatalogXMLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadCatalogXMLCreated, error)

	ValidateCatalogXML(params *ValidateCatalogXMLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateCatalogXMLOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddSimplePlan adds a simple plan entry in the current version of the catalog
*/
func (a *Client) AddSimplePlan(params *AddSimplePlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSimplePlanCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSimplePlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSimplePlan",
		Method:             "POST",
		PathPattern:        "/1.0/kb/catalog/simplePlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSimplePlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSimplePlanCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSimplePlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCatalog deletes all versions for a per tenant catalog
*/
func (a *Client) DeleteCatalog(params *DeleteCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCatalog",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/catalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCatalogNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCatalog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAvailableAddons retrieves available add ons for a given product
*/
func (a *Client) GetAvailableAddons(params *GetAvailableAddonsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailableAddonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailableAddonsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAvailableAddons",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog/availableAddons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAvailableAddonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailableAddonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAvailableAddons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAvailableBasePlans retrieves available base plans
*/
func (a *Client) GetAvailableBasePlans(params *GetAvailableBasePlansParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAvailableBasePlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAvailableBasePlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAvailableBasePlans",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog/availableBasePlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAvailableBasePlansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAvailableBasePlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAvailableBasePlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCatalogJSON retrieves the catalog as JSON
*/
func (a *Client) GetCatalogJSON(params *GetCatalogJSONParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogJSONParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogJson",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogJSONReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogJSONOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogJson: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCatalogVersions retrieves a list of catalog versions
*/
func (a *Client) GetCatalogVersions(params *GetCatalogVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogVersionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogVersionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogVersions",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogVersionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogVersionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogVersions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCatalogXML retrieves the full catalog as XML
*/
func (a *Client) GetCatalogXML(params *GetCatalogXMLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogXMLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogXMLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogXml",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog/xml",
		ProducesMediaTypes: []string{"text/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogXMLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogXMLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogXml: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPhaseForSubscriptionAndDate retrieves phase for a given subscription and date
*/
func (a *Client) GetPhaseForSubscriptionAndDate(params *GetPhaseForSubscriptionAndDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPhaseForSubscriptionAndDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhaseForSubscriptionAndDateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPhaseForSubscriptionAndDate",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog/phase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPhaseForSubscriptionAndDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhaseForSubscriptionAndDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhaseForSubscriptionAndDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPlanForSubscriptionAndDate retrieves plan for a given subscription and date
*/
func (a *Client) GetPlanForSubscriptionAndDate(params *GetPlanForSubscriptionAndDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPlanForSubscriptionAndDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlanForSubscriptionAndDateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPlanForSubscriptionAndDate",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog/plan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPlanForSubscriptionAndDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPlanForSubscriptionAndDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPlanForSubscriptionAndDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPriceListForSubscriptionAndDate retrieves price list for a given subscription and date
*/
func (a *Client) GetPriceListForSubscriptionAndDate(params *GetPriceListForSubscriptionAndDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPriceListForSubscriptionAndDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPriceListForSubscriptionAndDateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPriceListForSubscriptionAndDate",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog/priceList",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPriceListForSubscriptionAndDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPriceListForSubscriptionAndDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPriceListForSubscriptionAndDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProductForSubscriptionAndDate retrieves product for a given subscription and date
*/
func (a *Client) GetProductForSubscriptionAndDate(params *GetProductForSubscriptionAndDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProductForSubscriptionAndDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductForSubscriptionAndDateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProductForSubscriptionAndDate",
		Method:             "GET",
		PathPattern:        "/1.0/kb/catalog/product",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductForSubscriptionAndDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProductForSubscriptionAndDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProductForSubscriptionAndDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadCatalogXML uploads the full catalog as XML
*/
func (a *Client) UploadCatalogXML(params *UploadCatalogXMLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadCatalogXMLCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadCatalogXMLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadCatalogXml",
		Method:             "POST",
		PathPattern:        "/1.0/kb/catalog/xml",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadCatalogXMLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadCatalogXMLCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadCatalogXml: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateCatalogXML validates a XML catalog
*/
func (a *Client) ValidateCatalogXML(params *ValidateCatalogXMLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateCatalogXMLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCatalogXMLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateCatalogXml",
		Method:             "POST",
		PathPattern:        "/1.0/kb/catalog/xml/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateCatalogXMLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCatalogXMLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateCatalogXml: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
