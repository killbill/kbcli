// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetQueueEntriesParams creates a new GetQueueEntriesParams object
// with the default values initialized.
func NewGetQueueEntriesParams() *GetQueueEntriesParams {
	var (
		withBusEventsDefault     = bool(true)
		withHistoryDefault       = bool(true)
		withInProcessingDefault  = bool(true)
		withNotificationsDefault = bool(true)
	)
	return &GetQueueEntriesParams{
		WithBusEvents:     &withBusEventsDefault,
		WithHistory:       &withHistoryDefault,
		WithInProcessing:  &withInProcessingDefault,
		WithNotifications: &withNotificationsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetQueueEntriesParamsWithTimeout creates a new GetQueueEntriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetQueueEntriesParamsWithTimeout(timeout time.Duration) *GetQueueEntriesParams {
	var (
		withBusEventsDefault     = bool(true)
		withHistoryDefault       = bool(true)
		withInProcessingDefault  = bool(true)
		withNotificationsDefault = bool(true)
	)
	return &GetQueueEntriesParams{
		WithBusEvents:     &withBusEventsDefault,
		WithHistory:       &withHistoryDefault,
		WithInProcessing:  &withInProcessingDefault,
		WithNotifications: &withNotificationsDefault,

		timeout: timeout,
	}
}

// NewGetQueueEntriesParamsWithContext creates a new GetQueueEntriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetQueueEntriesParamsWithContext(ctx context.Context) *GetQueueEntriesParams {
	var (
		withBusEventsDefault     = bool(true)
		withHistoryDefault       = bool(true)
		withInProcessingDefault  = bool(true)
		withNotificationsDefault = bool(true)
	)
	return &GetQueueEntriesParams{
		WithBusEvents:     &withBusEventsDefault,
		WithHistory:       &withHistoryDefault,
		WithInProcessing:  &withInProcessingDefault,
		WithNotifications: &withNotificationsDefault,

		Context: ctx,
	}
}

// NewGetQueueEntriesParamsWithHTTPClient creates a new GetQueueEntriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetQueueEntriesParamsWithHTTPClient(client *http.Client) *GetQueueEntriesParams {
	var (
		withBusEventsDefault     = bool(true)
		withHistoryDefault       = bool(true)
		withInProcessingDefault  = bool(true)
		withNotificationsDefault = bool(true)
	)
	return &GetQueueEntriesParams{
		WithBusEvents:     &withBusEventsDefault,
		WithHistory:       &withHistoryDefault,
		WithInProcessing:  &withInProcessingDefault,
		WithNotifications: &withNotificationsDefault,
		HTTPClient:        client,
	}
}

/*GetQueueEntriesParams contains all the parameters to send to the API endpoint
for the get queue entries operation typically these are written to a http.Request
*/
type GetQueueEntriesParams struct {

	/*AccountID*/
	AccountID *strfmt.UUID
	/*MaxDate*/
	MaxDate *string
	/*MinDate*/
	MinDate *string
	/*QueueName*/
	QueueName *string
	/*ServiceName*/
	ServiceName *string
	/*WithBusEvents*/
	WithBusEvents *bool
	/*WithHistory*/
	WithHistory *bool
	/*WithInProcessing*/
	WithInProcessing *bool
	/*WithNotifications*/
	WithNotifications *bool

	WithProfilingInfo     *string // If set, return KB hprof headers
	WithStackTrace        *bool   // If set, returns full stack trace with error message
	timeout               time.Duration
	Context               context.Context
	HTTPClient            *http.Client
	ProcessLocationHeader bool // For create APIs that return 201, send another request and retrieve the resource.
}

// WithTimeout adds the timeout to the get queue entries params
func (o *GetQueueEntriesParams) WithTimeout(timeout time.Duration) *GetQueueEntriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get queue entries params
func (o *GetQueueEntriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get queue entries params
func (o *GetQueueEntriesParams) WithContext(ctx context.Context) *GetQueueEntriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get queue entries params
func (o *GetQueueEntriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get queue entries params
func (o *GetQueueEntriesParams) WithHTTPClient(client *http.Client) *GetQueueEntriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get queue entries params
func (o *GetQueueEntriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get queue entries params
func (o *GetQueueEntriesParams) WithAccountID(accountID *strfmt.UUID) *GetQueueEntriesParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get queue entries params
func (o *GetQueueEntriesParams) SetAccountID(accountID *strfmt.UUID) {
	o.AccountID = accountID
}

// WithMaxDate adds the maxDate to the get queue entries params
func (o *GetQueueEntriesParams) WithMaxDate(maxDate *string) *GetQueueEntriesParams {
	o.SetMaxDate(maxDate)
	return o
}

// SetMaxDate adds the maxDate to the get queue entries params
func (o *GetQueueEntriesParams) SetMaxDate(maxDate *string) {
	o.MaxDate = maxDate
}

// WithMinDate adds the minDate to the get queue entries params
func (o *GetQueueEntriesParams) WithMinDate(minDate *string) *GetQueueEntriesParams {
	o.SetMinDate(minDate)
	return o
}

// SetMinDate adds the minDate to the get queue entries params
func (o *GetQueueEntriesParams) SetMinDate(minDate *string) {
	o.MinDate = minDate
}

// WithQueueName adds the queueName to the get queue entries params
func (o *GetQueueEntriesParams) WithQueueName(queueName *string) *GetQueueEntriesParams {
	o.SetQueueName(queueName)
	return o
}

// SetQueueName adds the queueName to the get queue entries params
func (o *GetQueueEntriesParams) SetQueueName(queueName *string) {
	o.QueueName = queueName
}

// WithServiceName adds the serviceName to the get queue entries params
func (o *GetQueueEntriesParams) WithServiceName(serviceName *string) *GetQueueEntriesParams {
	o.SetServiceName(serviceName)
	return o
}

// SetServiceName adds the serviceName to the get queue entries params
func (o *GetQueueEntriesParams) SetServiceName(serviceName *string) {
	o.ServiceName = serviceName
}

// WithWithBusEvents adds the withBusEvents to the get queue entries params
func (o *GetQueueEntriesParams) WithWithBusEvents(withBusEvents *bool) *GetQueueEntriesParams {
	o.SetWithBusEvents(withBusEvents)
	return o
}

// SetWithBusEvents adds the withBusEvents to the get queue entries params
func (o *GetQueueEntriesParams) SetWithBusEvents(withBusEvents *bool) {
	o.WithBusEvents = withBusEvents
}

// WithWithHistory adds the withHistory to the get queue entries params
func (o *GetQueueEntriesParams) WithWithHistory(withHistory *bool) *GetQueueEntriesParams {
	o.SetWithHistory(withHistory)
	return o
}

// SetWithHistory adds the withHistory to the get queue entries params
func (o *GetQueueEntriesParams) SetWithHistory(withHistory *bool) {
	o.WithHistory = withHistory
}

// WithWithInProcessing adds the withInProcessing to the get queue entries params
func (o *GetQueueEntriesParams) WithWithInProcessing(withInProcessing *bool) *GetQueueEntriesParams {
	o.SetWithInProcessing(withInProcessing)
	return o
}

// SetWithInProcessing adds the withInProcessing to the get queue entries params
func (o *GetQueueEntriesParams) SetWithInProcessing(withInProcessing *bool) {
	o.WithInProcessing = withInProcessing
}

// WithWithNotifications adds the withNotifications to the get queue entries params
func (o *GetQueueEntriesParams) WithWithNotifications(withNotifications *bool) *GetQueueEntriesParams {
	o.SetWithNotifications(withNotifications)
	return o
}

// SetWithNotifications adds the withNotifications to the get queue entries params
func (o *GetQueueEntriesParams) SetWithNotifications(withNotifications *bool) {
	o.WithNotifications = withNotifications
}

// WriteToRequest writes these params to a swagger request
func (o *GetQueueEntriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID strfmt.UUID
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID.String()
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	if o.MaxDate != nil {

		// query param maxDate
		var qrMaxDate string
		if o.MaxDate != nil {
			qrMaxDate = *o.MaxDate
		}
		qMaxDate := qrMaxDate
		if qMaxDate != "" {
			if err := r.SetQueryParam("maxDate", qMaxDate); err != nil {
				return err
			}
		}

	}

	if o.MinDate != nil {

		// query param minDate
		var qrMinDate string
		if o.MinDate != nil {
			qrMinDate = *o.MinDate
		}
		qMinDate := qrMinDate
		if qMinDate != "" {
			if err := r.SetQueryParam("minDate", qMinDate); err != nil {
				return err
			}
		}

	}

	if o.QueueName != nil {

		// query param queueName
		var qrQueueName string
		if o.QueueName != nil {
			qrQueueName = *o.QueueName
		}
		qQueueName := qrQueueName
		if qQueueName != "" {
			if err := r.SetQueryParam("queueName", qQueueName); err != nil {
				return err
			}
		}

	}

	if o.ServiceName != nil {

		// query param serviceName
		var qrServiceName string
		if o.ServiceName != nil {
			qrServiceName = *o.ServiceName
		}
		qServiceName := qrServiceName
		if qServiceName != "" {
			if err := r.SetQueryParam("serviceName", qServiceName); err != nil {
				return err
			}
		}

	}

	if o.WithBusEvents != nil {

		// query param withBusEvents
		var qrWithBusEvents bool
		if o.WithBusEvents != nil {
			qrWithBusEvents = *o.WithBusEvents
		}
		qWithBusEvents := swag.FormatBool(qrWithBusEvents)
		if qWithBusEvents != "" {
			if err := r.SetQueryParam("withBusEvents", qWithBusEvents); err != nil {
				return err
			}
		}

	}

	if o.WithHistory != nil {

		// query param withHistory
		var qrWithHistory bool
		if o.WithHistory != nil {
			qrWithHistory = *o.WithHistory
		}
		qWithHistory := swag.FormatBool(qrWithHistory)
		if qWithHistory != "" {
			if err := r.SetQueryParam("withHistory", qWithHistory); err != nil {
				return err
			}
		}

	}

	if o.WithInProcessing != nil {

		// query param withInProcessing
		var qrWithInProcessing bool
		if o.WithInProcessing != nil {
			qrWithInProcessing = *o.WithInProcessing
		}
		qWithInProcessing := swag.FormatBool(qrWithInProcessing)
		if qWithInProcessing != "" {
			if err := r.SetQueryParam("withInProcessing", qWithInProcessing); err != nil {
				return err
			}
		}

	}

	if o.WithNotifications != nil {

		// query param withNotifications
		var qrWithNotifications bool
		if o.WithNotifications != nil {
			qrWithNotifications = *o.WithNotifications
		}
		qWithNotifications := swag.FormatBool(qrWithNotifications)
		if qWithNotifications != "" {
			if err := r.SetQueryParam("withNotifications", qWithNotifications); err != nil {
				return err
			}
		}

	}

	// header param WithProfilingInfo
	if o.WithProfilingInfo != nil && len(*o.WithProfilingInfo) > 0 {
		if err := r.SetHeaderParam("X-Killbill-Profiling-Req", *o.WithProfilingInfo); err != nil {
			return err
		}
	}

	// header param withStackTrace
	if o.WithStackTrace != nil && *o.WithStackTrace {
		if err := r.SetQueryParam("withStackTrace", "true"); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
