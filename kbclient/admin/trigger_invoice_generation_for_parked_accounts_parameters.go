// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTriggerInvoiceGenerationForParkedAccountsParams creates a new TriggerInvoiceGenerationForParkedAccountsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewTriggerInvoiceGenerationForParkedAccountsParams() *TriggerInvoiceGenerationForParkedAccountsParams {
	return &TriggerInvoiceGenerationForParkedAccountsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewTriggerInvoiceGenerationForParkedAccountsParamsWithTimeout creates a new TriggerInvoiceGenerationForParkedAccountsParams object
// with the ability to set a timeout on a request.
func NewTriggerInvoiceGenerationForParkedAccountsParamsWithTimeout(timeout time.Duration) *TriggerInvoiceGenerationForParkedAccountsParams {
	return &TriggerInvoiceGenerationForParkedAccountsParams{
		timeout: timeout,
	}
}

// NewTriggerInvoiceGenerationForParkedAccountsParamsWithContext creates a new TriggerInvoiceGenerationForParkedAccountsParams object
// with the ability to set a context for a request.
func NewTriggerInvoiceGenerationForParkedAccountsParamsWithContext(ctx context.Context) *TriggerInvoiceGenerationForParkedAccountsParams {
	return &TriggerInvoiceGenerationForParkedAccountsParams{
		Context: ctx,
	}
}

// NewTriggerInvoiceGenerationForParkedAccountsParamsWithHTTPClient creates a new TriggerInvoiceGenerationForParkedAccountsParams object
// with the ability to set a custom HTTPClient for a request.
func NewTriggerInvoiceGenerationForParkedAccountsParamsWithHTTPClient(client *http.Client) *TriggerInvoiceGenerationForParkedAccountsParams {
	return &TriggerInvoiceGenerationForParkedAccountsParams{
		HTTPClient: client,
	}
}

/*
TriggerInvoiceGenerationForParkedAccountsParams contains all the parameters to send to the API endpoint

	for the trigger invoice generation for parked accounts operation.

	Typically these are written to a http.Request.
*/
type TriggerInvoiceGenerationForParkedAccountsParams struct {

	// XKillbillComment.
	XKillbillComment *string

	// XKillbillCreatedBy.
	XKillbillCreatedBy string

	// XKillbillReason.
	XKillbillReason *string

	// Limit.
	//
	// Format: int64
	// Default: 100
	Limit *int64

	// Offset.
	//
	// Format: int64
	Offset *int64

	// PluginProperty.
	PluginProperty []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the trigger invoice generation for parked accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithDefaults() *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the trigger invoice generation for parked accounts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetDefaults() {
	var (
		limitDefault = int64(100)

		offsetDefault = int64(0)
	)

	val := TriggerInvoiceGenerationForParkedAccountsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithTimeout(timeout time.Duration) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithContext(ctx context.Context) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithHTTPClient(client *http.Client) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXKillbillComment adds the xKillbillComment to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithXKillbillComment(xKillbillComment *string) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetXKillbillComment(xKillbillComment)
	return o
}

// SetXKillbillComment adds the xKillbillComment to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetXKillbillComment(xKillbillComment *string) {
	o.XKillbillComment = xKillbillComment
}

// WithXKillbillCreatedBy adds the xKillbillCreatedBy to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithXKillbillCreatedBy(xKillbillCreatedBy string) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetXKillbillCreatedBy(xKillbillCreatedBy)
	return o
}

// SetXKillbillCreatedBy adds the xKillbillCreatedBy to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetXKillbillCreatedBy(xKillbillCreatedBy string) {
	o.XKillbillCreatedBy = xKillbillCreatedBy
}

// WithXKillbillReason adds the xKillbillReason to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithXKillbillReason(xKillbillReason *string) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetXKillbillReason(xKillbillReason)
	return o
}

// SetXKillbillReason adds the xKillbillReason to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetXKillbillReason(xKillbillReason *string) {
	o.XKillbillReason = xKillbillReason
}

// WithLimit adds the limit to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithLimit(limit *int64) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithOffset(offset *int64) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPluginProperty adds the pluginProperty to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WithPluginProperty(pluginProperty []string) *TriggerInvoiceGenerationForParkedAccountsParams {
	o.SetPluginProperty(pluginProperty)
	return o
}

// SetPluginProperty adds the pluginProperty to the trigger invoice generation for parked accounts params
func (o *TriggerInvoiceGenerationForParkedAccountsParams) SetPluginProperty(pluginProperty []string) {
	o.PluginProperty = pluginProperty
}

// WriteToRequest writes these params to a swagger request
func (o *TriggerInvoiceGenerationForParkedAccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XKillbillComment != nil {

		// header param X-Killbill-Comment
		if err := r.SetHeaderParam("X-Killbill-Comment", *o.XKillbillComment); err != nil {
			return err
		}
	}

	// header param X-Killbill-CreatedBy
	if err := r.SetHeaderParam("X-Killbill-CreatedBy", o.XKillbillCreatedBy); err != nil {
		return err
	}

	if o.XKillbillReason != nil {

		// header param X-Killbill-Reason
		if err := r.SetHeaderParam("X-Killbill-Reason", *o.XKillbillReason); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.PluginProperty != nil {

		// binding items for pluginProperty
		joinedPluginProperty := o.bindParamPluginProperty(reg)

		// query array param pluginProperty
		if err := r.SetQueryParam("pluginProperty", joinedPluginProperty...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamTriggerInvoiceGenerationForParkedAccounts binds the parameter pluginProperty
func (o *TriggerInvoiceGenerationForParkedAccountsParams) bindParamPluginProperty(formats strfmt.Registry) []string {
	pluginPropertyIR := o.PluginProperty

	var pluginPropertyIC []string
	for _, pluginPropertyIIR := range pluginPropertyIR { // explode []string

		pluginPropertyIIV := pluginPropertyIIR // string as string
		pluginPropertyIC = append(pluginPropertyIC, pluginPropertyIIV)
	}

	// items.CollectionFormat: "multi"
	pluginPropertyIS := swag.JoinByFormat(pluginPropertyIC, "multi")

	return pluginPropertyIS
}
