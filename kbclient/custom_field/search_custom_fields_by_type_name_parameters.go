// Code generated by go-swagger; DO NOT EDIT.

package custom_field

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchCustomFieldsByTypeNameParams creates a new SearchCustomFieldsByTypeNameParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchCustomFieldsByTypeNameParams() *SearchCustomFieldsByTypeNameParams {
	return &SearchCustomFieldsByTypeNameParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchCustomFieldsByTypeNameParamsWithTimeout creates a new SearchCustomFieldsByTypeNameParams object
// with the ability to set a timeout on a request.
func NewSearchCustomFieldsByTypeNameParamsWithTimeout(timeout time.Duration) *SearchCustomFieldsByTypeNameParams {
	return &SearchCustomFieldsByTypeNameParams{
		timeout: timeout,
	}
}

// NewSearchCustomFieldsByTypeNameParamsWithContext creates a new SearchCustomFieldsByTypeNameParams object
// with the ability to set a context for a request.
func NewSearchCustomFieldsByTypeNameParamsWithContext(ctx context.Context) *SearchCustomFieldsByTypeNameParams {
	return &SearchCustomFieldsByTypeNameParams{
		Context: ctx,
	}
}

// NewSearchCustomFieldsByTypeNameParamsWithHTTPClient creates a new SearchCustomFieldsByTypeNameParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchCustomFieldsByTypeNameParamsWithHTTPClient(client *http.Client) *SearchCustomFieldsByTypeNameParams {
	return &SearchCustomFieldsByTypeNameParams{
		HTTPClient: client,
	}
}

/*
SearchCustomFieldsByTypeNameParams contains all the parameters to send to the API endpoint

	for the search custom fields by type name operation.

	Typically these are written to a http.Request.
*/
type SearchCustomFieldsByTypeNameParams struct {

	// Audit.
	//
	// Default: "NONE"
	Audit *string

	// FieldName.
	FieldName *string

	// FieldValue.
	FieldValue *string

	// Limit.
	//
	// Format: int64
	// Default: 100
	Limit *int64

	// ObjectType.
	ObjectType *string

	// Offset.
	//
	// Format: int64
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search custom fields by type name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchCustomFieldsByTypeNameParams) WithDefaults() *SearchCustomFieldsByTypeNameParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search custom fields by type name params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchCustomFieldsByTypeNameParams) SetDefaults() {
	var (
		auditDefault = string("NONE")

		limitDefault = int64(100)

		offsetDefault = int64(0)
	)

	val := SearchCustomFieldsByTypeNameParams{
		Audit:  &auditDefault,
		Limit:  &limitDefault,
		Offset: &offsetDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithTimeout(timeout time.Duration) *SearchCustomFieldsByTypeNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithContext(ctx context.Context) *SearchCustomFieldsByTypeNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithHTTPClient(client *http.Client) *SearchCustomFieldsByTypeNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAudit adds the audit to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithAudit(audit *string) *SearchCustomFieldsByTypeNameParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetAudit(audit *string) {
	o.Audit = audit
}

// WithFieldName adds the fieldName to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithFieldName(fieldName *string) *SearchCustomFieldsByTypeNameParams {
	o.SetFieldName(fieldName)
	return o
}

// SetFieldName adds the fieldName to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetFieldName(fieldName *string) {
	o.FieldName = fieldName
}

// WithFieldValue adds the fieldValue to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithFieldValue(fieldValue *string) *SearchCustomFieldsByTypeNameParams {
	o.SetFieldValue(fieldValue)
	return o
}

// SetFieldValue adds the fieldValue to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetFieldValue(fieldValue *string) {
	o.FieldValue = fieldValue
}

// WithLimit adds the limit to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithLimit(limit *int64) *SearchCustomFieldsByTypeNameParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithObjectType adds the objectType to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithObjectType(objectType *string) *SearchCustomFieldsByTypeNameParams {
	o.SetObjectType(objectType)
	return o
}

// SetObjectType adds the objectType to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetObjectType(objectType *string) {
	o.ObjectType = objectType
}

// WithOffset adds the offset to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) WithOffset(offset *int64) *SearchCustomFieldsByTypeNameParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the search custom fields by type name params
func (o *SearchCustomFieldsByTypeNameParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *SearchCustomFieldsByTypeNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Audit != nil {

		// query param audit
		var qrAudit string

		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := qrAudit
		if qAudit != "" {

			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}
	}

	if o.FieldName != nil {

		// query param fieldName
		var qrFieldName string

		if o.FieldName != nil {
			qrFieldName = *o.FieldName
		}
		qFieldName := qrFieldName
		if qFieldName != "" {

			if err := r.SetQueryParam("fieldName", qFieldName); err != nil {
				return err
			}
		}
	}

	if o.FieldValue != nil {

		// query param fieldValue
		var qrFieldValue string

		if o.FieldValue != nil {
			qrFieldValue = *o.FieldValue
		}
		qFieldValue := qrFieldValue
		if qFieldValue != "" {

			if err := r.SetQueryParam("fieldValue", qFieldValue); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.ObjectType != nil {

		// query param objectType
		var qrObjectType string

		if o.ObjectType != nil {
			qrObjectType = *o.ObjectType
		}
		qObjectType := qrObjectType
		if qObjectType != "" {

			if err := r.SetQueryParam("objectType", qObjectType); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
