// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetSubscriptionByKeyParams creates a new GetSubscriptionByKeyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSubscriptionByKeyParams() *GetSubscriptionByKeyParams {
	return &GetSubscriptionByKeyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubscriptionByKeyParamsWithTimeout creates a new GetSubscriptionByKeyParams object
// with the ability to set a timeout on a request.
func NewGetSubscriptionByKeyParamsWithTimeout(timeout time.Duration) *GetSubscriptionByKeyParams {
	return &GetSubscriptionByKeyParams{
		timeout: timeout,
	}
}

// NewGetSubscriptionByKeyParamsWithContext creates a new GetSubscriptionByKeyParams object
// with the ability to set a context for a request.
func NewGetSubscriptionByKeyParamsWithContext(ctx context.Context) *GetSubscriptionByKeyParams {
	return &GetSubscriptionByKeyParams{
		Context: ctx,
	}
}

// NewGetSubscriptionByKeyParamsWithHTTPClient creates a new GetSubscriptionByKeyParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSubscriptionByKeyParamsWithHTTPClient(client *http.Client) *GetSubscriptionByKeyParams {
	return &GetSubscriptionByKeyParams{
		HTTPClient: client,
	}
}

/*
GetSubscriptionByKeyParams contains all the parameters to send to the API endpoint

	for the get subscription by key operation.

	Typically these are written to a http.Request.
*/
type GetSubscriptionByKeyParams struct {

	// Audit.
	//
	// Default: "NONE"
	Audit *string

	// ExternalKey.
	ExternalKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get subscription by key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubscriptionByKeyParams) WithDefaults() *GetSubscriptionByKeyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get subscription by key params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSubscriptionByKeyParams) SetDefaults() {
	var (
		auditDefault = string("NONE")
	)

	val := GetSubscriptionByKeyParams{
		Audit: &auditDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get subscription by key params
func (o *GetSubscriptionByKeyParams) WithTimeout(timeout time.Duration) *GetSubscriptionByKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get subscription by key params
func (o *GetSubscriptionByKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get subscription by key params
func (o *GetSubscriptionByKeyParams) WithContext(ctx context.Context) *GetSubscriptionByKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get subscription by key params
func (o *GetSubscriptionByKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get subscription by key params
func (o *GetSubscriptionByKeyParams) WithHTTPClient(client *http.Client) *GetSubscriptionByKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get subscription by key params
func (o *GetSubscriptionByKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAudit adds the audit to the get subscription by key params
func (o *GetSubscriptionByKeyParams) WithAudit(audit *string) *GetSubscriptionByKeyParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the get subscription by key params
func (o *GetSubscriptionByKeyParams) SetAudit(audit *string) {
	o.Audit = audit
}

// WithExternalKey adds the externalKey to the get subscription by key params
func (o *GetSubscriptionByKeyParams) WithExternalKey(externalKey string) *GetSubscriptionByKeyParams {
	o.SetExternalKey(externalKey)
	return o
}

// SetExternalKey adds the externalKey to the get subscription by key params
func (o *GetSubscriptionByKeyParams) SetExternalKey(externalKey string) {
	o.ExternalKey = externalKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubscriptionByKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Audit != nil {

		// query param audit
		var qrAudit string

		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := qrAudit
		if qAudit != "" {

			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}
	}

	// query param externalKey
	qrExternalKey := o.ExternalKey
	qExternalKey := qrExternalKey
	if qExternalKey != "" {

		if err := r.SetQueryParam("externalKey", qExternalKey); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
