// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSubscriptionEventAuditLogsWithHistoryParams creates a new GetSubscriptionEventAuditLogsWithHistoryParams object
// with the default values initialized.
func NewGetSubscriptionEventAuditLogsWithHistoryParams() *GetSubscriptionEventAuditLogsWithHistoryParams {
	var ()
	return &GetSubscriptionEventAuditLogsWithHistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSubscriptionEventAuditLogsWithHistoryParamsWithTimeout creates a new GetSubscriptionEventAuditLogsWithHistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSubscriptionEventAuditLogsWithHistoryParamsWithTimeout(timeout time.Duration) *GetSubscriptionEventAuditLogsWithHistoryParams {
	var ()
	return &GetSubscriptionEventAuditLogsWithHistoryParams{

		timeout: timeout,
	}
}

// NewGetSubscriptionEventAuditLogsWithHistoryParamsWithContext creates a new GetSubscriptionEventAuditLogsWithHistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSubscriptionEventAuditLogsWithHistoryParamsWithContext(ctx context.Context) *GetSubscriptionEventAuditLogsWithHistoryParams {
	var ()
	return &GetSubscriptionEventAuditLogsWithHistoryParams{

		Context: ctx,
	}
}

// NewGetSubscriptionEventAuditLogsWithHistoryParamsWithHTTPClient creates a new GetSubscriptionEventAuditLogsWithHistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSubscriptionEventAuditLogsWithHistoryParamsWithHTTPClient(client *http.Client) *GetSubscriptionEventAuditLogsWithHistoryParams {
	var ()
	return &GetSubscriptionEventAuditLogsWithHistoryParams{
		HTTPClient: client,
	}
}

/*GetSubscriptionEventAuditLogsWithHistoryParams contains all the parameters to send to the API endpoint
for the get subscription event audit logs with history operation typically these are written to a http.Request
*/
type GetSubscriptionEventAuditLogsWithHistoryParams struct {

	/*EventID*/
	EventID strfmt.UUID

	WithProfilingInfo     *string // If set, return KB hprof headers
	WithStackTrace        *bool   // If set, returns full stack trace with error message
	timeout               time.Duration
	Context               context.Context
	HTTPClient            *http.Client
	ProcessLocationHeader bool // For create APIs that return 201, send another request and retrieve the resource.
}

// WithTimeout adds the timeout to the get subscription event audit logs with history params
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) WithTimeout(timeout time.Duration) *GetSubscriptionEventAuditLogsWithHistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get subscription event audit logs with history params
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get subscription event audit logs with history params
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) WithContext(ctx context.Context) *GetSubscriptionEventAuditLogsWithHistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get subscription event audit logs with history params
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get subscription event audit logs with history params
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) WithHTTPClient(client *http.Client) *GetSubscriptionEventAuditLogsWithHistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get subscription event audit logs with history params
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventID adds the eventID to the get subscription event audit logs with history params
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) WithEventID(eventID strfmt.UUID) *GetSubscriptionEventAuditLogsWithHistoryParams {
	o.SetEventID(eventID)
	return o
}

// SetEventID adds the eventId to the get subscription event audit logs with history params
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) SetEventID(eventID strfmt.UUID) {
	o.EventID = eventID
}

// WriteToRequest writes these params to a swagger request
func (o *GetSubscriptionEventAuditLogsWithHistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param eventId
	if err := r.SetPathParam("eventId", o.EventID.String()); err != nil {
		return err
	}

	// header param WithProfilingInfo
	if o.WithProfilingInfo != nil && len(*o.WithProfilingInfo) > 0 {
		if err := r.SetHeaderParam("X-Killbill-Profiling-Req", *o.WithProfilingInfo); err != nil {
			return err
		}
	}

	// header param withStackTrace
	if o.WithStackTrace != nil && *o.WithStackTrace {
		if err := r.SetQueryParam("withStackTrace", "true"); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
