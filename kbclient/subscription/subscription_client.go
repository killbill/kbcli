// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscription API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSubscriptionBlockingState(params *AddSubscriptionBlockingStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSubscriptionBlockingStateCreated, error)

	CancelSubscriptionPlan(params *CancelSubscriptionPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelSubscriptionPlanNoContent, error)

	ChangeSubscriptionPlan(params *ChangeSubscriptionPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangeSubscriptionPlanNoContent, error)

	CreateSubscription(params *CreateSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionCreated, error)

	CreateSubscriptionCustomFields(params *CreateSubscriptionCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionCustomFieldsCreated, error)

	CreateSubscriptionTags(params *CreateSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionTagsCreated, error)

	CreateSubscriptionWithAddOns(params *CreateSubscriptionWithAddOnsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionWithAddOnsCreated, error)

	CreateSubscriptionsWithAddOns(params *CreateSubscriptionsWithAddOnsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionsWithAddOnsCreated, error)

	DeleteSubscriptionCustomFields(params *DeleteSubscriptionCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubscriptionCustomFieldsNoContent, error)

	DeleteSubscriptionTags(params *DeleteSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubscriptionTagsNoContent, error)

	GetSubscription(params *GetSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionOK, error)

	GetSubscriptionAuditLogsWithHistory(params *GetSubscriptionAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionAuditLogsWithHistoryOK, error)

	GetSubscriptionByKey(params *GetSubscriptionByKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionByKeyOK, error)

	GetSubscriptionCustomFields(params *GetSubscriptionCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionCustomFieldsOK, error)

	GetSubscriptionEventAuditLogsWithHistory(params *GetSubscriptionEventAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionEventAuditLogsWithHistoryOK, error)

	GetSubscriptionTags(params *GetSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionTagsOK, error)

	ModifySubscriptionCustomFields(params *ModifySubscriptionCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifySubscriptionCustomFieldsNoContent, error)

	UncancelSubscriptionPlan(params *UncancelSubscriptionPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UncancelSubscriptionPlanNoContent, error)

	UndoChangeSubscriptionPlan(params *UndoChangeSubscriptionPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndoChangeSubscriptionPlanNoContent, error)

	UpdateSubscriptionBCD(params *UpdateSubscriptionBCDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSubscriptionBCDNoContent, error)

	UpdateSubscriptionQuantity(params *UpdateSubscriptionQuantityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSubscriptionQuantityNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddSubscriptionBlockingState blocks a subscription
*/
func (a *Client) AddSubscriptionBlockingState(params *AddSubscriptionBlockingStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSubscriptionBlockingStateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSubscriptionBlockingStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSubscriptionBlockingState",
		Method:             "POST",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/block",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSubscriptionBlockingStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSubscriptionBlockingStateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSubscriptionBlockingState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CancelSubscriptionPlan cancels an entitlement plan
*/
func (a *Client) CancelSubscriptionPlan(params *CancelSubscriptionPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CancelSubscriptionPlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelSubscriptionPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelSubscriptionPlan",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelSubscriptionPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelSubscriptionPlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelSubscriptionPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ChangeSubscriptionPlan changes entitlement plan
*/
func (a *Client) ChangeSubscriptionPlan(params *ChangeSubscriptionPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangeSubscriptionPlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeSubscriptionPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "changeSubscriptionPlan",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeSubscriptionPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeSubscriptionPlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for changeSubscriptionPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscription creates an subscription
*/
func (a *Client) CreateSubscription(params *CreateSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscription",
		Method:             "POST",
		PathPattern:        "/1.0/kb/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscriptionCustomFields adds custom fields to subscription
*/
func (a *Client) CreateSubscriptionCustomFields(params *CreateSubscriptionCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionCustomFieldsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscriptionCustomFields",
		Method:             "POST",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionCustomFieldsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubscriptionCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscriptionTags create subscription tags API
*/
func (a *Client) CreateSubscriptionTags(params *CreateSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscriptionTags",
		Method:             "POST",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubscriptionTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscriptionWithAddOns creates an entitlement with add on products
*/
func (a *Client) CreateSubscriptionWithAddOns(params *CreateSubscriptionWithAddOnsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionWithAddOnsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionWithAddOnsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscriptionWithAddOns",
		Method:             "POST",
		PathPattern:        "/1.0/kb/subscriptions/createSubscriptionWithAddOns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionWithAddOnsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionWithAddOnsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubscriptionWithAddOns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSubscriptionsWithAddOns creates multiple entitlements with add on products
*/
func (a *Client) CreateSubscriptionsWithAddOns(params *CreateSubscriptionsWithAddOnsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSubscriptionsWithAddOnsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionsWithAddOnsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSubscriptionsWithAddOns",
		Method:             "POST",
		PathPattern:        "/1.0/kb/subscriptions/createSubscriptionsWithAddOns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionsWithAddOnsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionsWithAddOnsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSubscriptionsWithAddOns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubscriptionCustomFields removes custom fields from subscription
*/
func (a *Client) DeleteSubscriptionCustomFields(params *DeleteSubscriptionCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubscriptionCustomFieldsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSubscriptionCustomFields",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubscriptionCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubscriptionCustomFieldsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSubscriptionCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSubscriptionTags removes tags from subscription
*/
func (a *Client) DeleteSubscriptionTags(params *DeleteSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSubscriptionTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSubscriptionTags",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubscriptionTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubscriptionTagsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSubscriptionTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscription retrieves a subscription by id
*/
func (a *Client) GetSubscription(params *GetSubscriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscription",
		Method:             "GET",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionAuditLogsWithHistory retrieves subscription audit logs with history by id
*/
func (a *Client) GetSubscriptionAuditLogsWithHistory(params *GetSubscriptionAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionAuditLogsWithHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionAuditLogsWithHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionAuditLogsWithHistory",
		Method:             "GET",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/auditLogsWithHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionAuditLogsWithHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionAuditLogsWithHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionAuditLogsWithHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionByKey retrieves a subscription by external key
*/
func (a *Client) GetSubscriptionByKey(params *GetSubscriptionByKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionByKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionByKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionByKey",
		Method:             "GET",
		PathPattern:        "/1.0/kb/subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionByKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionByKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionByKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionCustomFields retrieves subscription custom fields
*/
func (a *Client) GetSubscriptionCustomFields(params *GetSubscriptionCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionCustomFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionCustomFields",
		Method:             "GET",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionCustomFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionEventAuditLogsWithHistory retrieves subscription event audit logs with history by id
*/
func (a *Client) GetSubscriptionEventAuditLogsWithHistory(params *GetSubscriptionEventAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionEventAuditLogsWithHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionEventAuditLogsWithHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionEventAuditLogsWithHistory",
		Method:             "GET",
		PathPattern:        "/1.0/kb/subscriptions/events/{eventId}/auditLogsWithHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionEventAuditLogsWithHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionEventAuditLogsWithHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionEventAuditLogsWithHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSubscriptionTags retrieves subscription tags
*/
func (a *Client) GetSubscriptionTags(params *GetSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSubscriptionTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSubscriptionTags",
		Method:             "GET",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSubscriptionTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifySubscriptionCustomFields modifies custom fields to subscription
*/
func (a *Client) ModifySubscriptionCustomFields(params *ModifySubscriptionCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifySubscriptionCustomFieldsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifySubscriptionCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifySubscriptionCustomFields",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifySubscriptionCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifySubscriptionCustomFieldsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifySubscriptionCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UncancelSubscriptionPlan uns cancel an entitlement
*/
func (a *Client) UncancelSubscriptionPlan(params *UncancelSubscriptionPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UncancelSubscriptionPlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUncancelSubscriptionPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uncancelSubscriptionPlan",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/uncancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UncancelSubscriptionPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UncancelSubscriptionPlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uncancelSubscriptionPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UndoChangeSubscriptionPlan undos a pending change plan on an entitlement
*/
func (a *Client) UndoChangeSubscriptionPlan(params *UndoChangeSubscriptionPlanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndoChangeSubscriptionPlanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUndoChangeSubscriptionPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "undoChangeSubscriptionPlan",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/undoChangePlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UndoChangeSubscriptionPlanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UndoChangeSubscriptionPlanNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for undoChangeSubscriptionPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSubscriptionBCD updates the b c d associated to a subscription
*/
func (a *Client) UpdateSubscriptionBCD(params *UpdateSubscriptionBCDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSubscriptionBCDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubscriptionBCDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSubscriptionBCD",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/bcd",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSubscriptionBCDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSubscriptionBCDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSubscriptionBCD: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSubscriptionQuantity updates the quantity associated to a subscription
*/
func (a *Client) UpdateSubscriptionQuantity(params *UpdateSubscriptionQuantityParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSubscriptionQuantityNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubscriptionQuantityParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSubscriptionQuantity",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/subscriptions/{subscriptionId}/quantity",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSubscriptionQuantityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSubscriptionQuantityNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSubscriptionQuantity: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
