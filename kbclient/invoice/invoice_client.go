// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new invoice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invoice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AdjustInvoiceItem(params *AdjustInvoiceItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdjustInvoiceItemCreated, error)

	CommitInvoice(params *CommitInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CommitInvoiceNoContent, error)

	CreateExternalCharges(params *CreateExternalChargesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateExternalChargesCreated, error)

	CreateFutureInvoice(params *CreateFutureInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFutureInvoiceCreated, error)

	CreateFutureInvoiceGroup(params *CreateFutureInvoiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFutureInvoiceGroupCreated, error)

	CreateInstantPayment(params *CreateInstantPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInstantPaymentCreated, *CreateInstantPaymentNoContent, error)

	CreateInvoiceCustomFields(params *CreateInvoiceCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInvoiceCustomFieldsCreated, error)

	CreateInvoiceTags(params *CreateInvoiceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInvoiceTagsCreated, error)

	CreateMigrationInvoice(params *CreateMigrationInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMigrationInvoiceCreated, error)

	CreateTaxItems(params *CreateTaxItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTaxItemsCreated, error)

	DeleteCBA(params *DeleteCBAParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCBANoContent, error)

	DeleteInvoiceCustomFields(params *DeleteInvoiceCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInvoiceCustomFieldsNoContent, error)

	DeleteInvoiceTags(params *DeleteInvoiceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInvoiceTagsNoContent, error)

	GenerateDryRunInvoice(params *GenerateDryRunInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateDryRunInvoiceOK, *GenerateDryRunInvoiceNoContent, error)

	GetCatalogTranslation(params *GetCatalogTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogTranslationOK, error)

	GetInvoice(params *GetInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceOK, error)

	GetInvoiceAsHTML(params *GetInvoiceAsHTMLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceAsHTMLOK, error)

	GetInvoiceAuditLogsWithHistory(params *GetInvoiceAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceAuditLogsWithHistoryOK, error)

	GetInvoiceByItemID(params *GetInvoiceByItemIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceByItemIDOK, error)

	GetInvoiceByNumber(params *GetInvoiceByNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceByNumberOK, error)

	GetInvoiceCustomFields(params *GetInvoiceCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceCustomFieldsOK, error)

	GetInvoiceMPTemplate(params *GetInvoiceMPTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceMPTemplateOK, error)

	GetInvoiceTags(params *GetInvoiceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceTagsOK, error)

	GetInvoiceTemplate(params *GetInvoiceTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceTemplateOK, error)

	GetInvoiceTranslation(params *GetInvoiceTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceTranslationOK, error)

	GetInvoices(params *GetInvoicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoicesOK, error)

	GetInvoicesGroup(params *GetInvoicesGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoicesGroupOK, error)

	GetPaymentsForInvoice(params *GetPaymentsForInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentsForInvoiceOK, error)

	ModifyInvoiceCustomFields(params *ModifyInvoiceCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyInvoiceCustomFieldsNoContent, error)

	SearchInvoices(params *SearchInvoicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchInvoicesOK, error)

	UploadCatalogTranslation(params *UploadCatalogTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadCatalogTranslationCreated, error)

	UploadInvoiceMPTemplate(params *UploadInvoiceMPTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadInvoiceMPTemplateOK, error)

	UploadInvoiceTemplate(params *UploadInvoiceTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadInvoiceTemplateCreated, error)

	UploadInvoiceTranslation(params *UploadInvoiceTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadInvoiceTranslationCreated, error)

	VoidInvoice(params *VoidInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VoidInvoiceNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AdjustInvoiceItem adjusts an invoice item
*/
func (a *Client) AdjustInvoiceItem(params *AdjustInvoiceItemParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AdjustInvoiceItemCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAdjustInvoiceItemParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "adjustInvoiceItem",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AdjustInvoiceItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AdjustInvoiceItemCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for adjustInvoiceItem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CommitInvoice performs the invoice status transition from d r a f t to c o m m i t t e d
*/
func (a *Client) CommitInvoice(params *CommitInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CommitInvoiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "commitInvoice",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/commitInvoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitInvoiceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for commitInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateExternalCharges creates external charge s
*/
func (a *Client) CreateExternalCharges(params *CreateExternalChargesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateExternalChargesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExternalChargesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createExternalCharges",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/charges/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateExternalChargesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExternalChargesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createExternalCharges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFutureInvoice triggers an invoice generation
*/
func (a *Client) CreateFutureInvoice(params *CreateFutureInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFutureInvoiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFutureInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFutureInvoice",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFutureInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFutureInvoiceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFutureInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFutureInvoiceGroup triggers an invoice generation
*/
func (a *Client) CreateFutureInvoiceGroup(params *CreateFutureInvoiceGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFutureInvoiceGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFutureInvoiceGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFutureInvoiceGroup",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFutureInvoiceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFutureInvoiceGroupCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFutureInvoiceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateInstantPayment triggers a payment for invoice
*/
func (a *Client) CreateInstantPayment(params *CreateInstantPaymentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInstantPaymentCreated, *CreateInstantPaymentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstantPaymentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInstantPayment",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInstantPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateInstantPaymentCreated:
		return value, nil, nil
	case *CreateInstantPaymentNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for invoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateInvoiceCustomFields adds custom fields to invoice
*/
func (a *Client) CreateInvoiceCustomFields(params *CreateInvoiceCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInvoiceCustomFieldsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInvoiceCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInvoiceCustomFields",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInvoiceCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInvoiceCustomFieldsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInvoiceCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateInvoiceTags adds tags to invoice
*/
func (a *Client) CreateInvoiceTags(params *CreateInvoiceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInvoiceTagsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInvoiceTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInvoiceTags",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateInvoiceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInvoiceTagsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInvoiceTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateMigrationInvoice creates a migration invoice
*/
func (a *Client) CreateMigrationInvoice(params *CreateMigrationInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMigrationInvoiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMigrationInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMigrationInvoice",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/migration/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMigrationInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMigrationInvoiceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMigrationInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateTaxItems creates tax items
*/
func (a *Client) CreateTaxItems(params *CreateTaxItemsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTaxItemsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTaxItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTaxItems",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/taxes/{accountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTaxItemsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTaxItemsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTaxItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCBA deletes a c b a item
*/
func (a *Client) DeleteCBA(params *DeleteCBAParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCBANoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCBAParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCBA",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/{invoiceItemId}/cba",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCBAReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCBANoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCBA: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteInvoiceCustomFields removes custom fields from invoice
*/
func (a *Client) DeleteInvoiceCustomFields(params *DeleteInvoiceCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInvoiceCustomFieldsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInvoiceCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInvoiceCustomFields",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInvoiceCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInvoiceCustomFieldsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInvoiceCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteInvoiceTags removes tags from invoice
*/
func (a *Client) DeleteInvoiceTags(params *DeleteInvoiceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInvoiceTagsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInvoiceTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInvoiceTags",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteInvoiceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInvoiceTagsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteInvoiceTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateDryRunInvoice generates a dry run invoice
*/
func (a *Client) GenerateDryRunInvoice(params *GenerateDryRunInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateDryRunInvoiceOK, *GenerateDryRunInvoiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateDryRunInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateDryRunInvoice",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/dryRun",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateDryRunInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GenerateDryRunInvoiceOK:
		return value, nil, nil
	case *GenerateDryRunInvoiceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for invoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCatalogTranslation retrieves the catalog translation for the tenant
*/
func (a *Client) GetCatalogTranslation(params *GetCatalogTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogTranslationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogTranslation",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/catalogTranslation/{locale}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCatalogTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogTranslationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogTranslation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoice retrieves an invoice by id
*/
func (a *Client) GetInvoice(params *GetInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoice",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceAsHTML renders an invoice as HTML
*/
func (a *Client) GetInvoiceAsHTML(params *GetInvoiceAsHTMLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceAsHTMLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceAsHTMLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceAsHTML",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/html",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceAsHTMLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceAsHTMLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceAsHTML: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceAuditLogsWithHistory retrieves invoice audit logs with history by id
*/
func (a *Client) GetInvoiceAuditLogsWithHistory(params *GetInvoiceAuditLogsWithHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceAuditLogsWithHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceAuditLogsWithHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceAuditLogsWithHistory",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/auditLogsWithHistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceAuditLogsWithHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceAuditLogsWithHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceAuditLogsWithHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceByItemID retrieves an invoice by invoice item id
*/
func (a *Client) GetInvoiceByItemID(params *GetInvoiceByItemIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceByItemIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceByItemIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceByItemId",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/byItemId/{itemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceByItemIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceByItemIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceByItemId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceByNumber retrieves an invoice by number
*/
func (a *Client) GetInvoiceByNumber(params *GetInvoiceByNumberParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceByNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceByNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceByNumber",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/byNumber/{invoiceNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceByNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceByNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceByNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceCustomFields retrieves invoice custom fields
*/
func (a *Client) GetInvoiceCustomFields(params *GetInvoiceCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceCustomFieldsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceCustomFields",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceCustomFieldsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceMPTemplate retrieves the manual pay invoice template for the tenant
*/
func (a *Client) GetInvoiceMPTemplate(params *GetInvoiceMPTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceMPTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceMPTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceMPTemplate",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/manualPayTemplate/{locale}",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceMPTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceMPTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceMPTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceTags retrieves invoice tags
*/
func (a *Client) GetInvoiceTags(params *GetInvoiceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceTags",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceTemplate retrieves the invoice template for the tenant
*/
func (a *Client) GetInvoiceTemplate(params *GetInvoiceTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceTemplate",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/template",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoiceTranslation retrieves the invoice translation for the tenant
*/
func (a *Client) GetInvoiceTranslation(params *GetInvoiceTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoiceTranslationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceTranslation",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/translation/{locale}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceTranslationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceTranslation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoices lists invoices
*/
func (a *Client) GetInvoices(params *GetInvoicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoices",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/pagination",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInvoicesGroup retrieves a set of invoices by group id
*/
func (a *Client) GetInvoicesGroup(params *GetInvoicesGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInvoicesGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoicesGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoicesGroup",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/{groupId}/group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoicesGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoicesGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoicesGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPaymentsForInvoice retrieves payments associated with an invoice
*/
func (a *Client) GetPaymentsForInvoice(params *GetPaymentsForInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPaymentsForInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaymentsForInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPaymentsForInvoice",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/payments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaymentsForInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaymentsForInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaymentsForInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyInvoiceCustomFields modifies custom fields to invoice
*/
func (a *Client) ModifyInvoiceCustomFields(params *ModifyInvoiceCustomFieldsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ModifyInvoiceCustomFieldsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyInvoiceCustomFieldsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "modifyInvoiceCustomFields",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/customFields",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModifyInvoiceCustomFieldsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyInvoiceCustomFieldsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyInvoiceCustomFields: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchInvoices searches invoices
*/
func (a *Client) SearchInvoices(params *SearchInvoicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchInvoicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchInvoicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchInvoices",
		Method:             "GET",
		PathPattern:        "/1.0/kb/invoices/search/{searchKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchInvoicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchInvoicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchInvoices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadCatalogTranslation uploads the catalog translation for the tenant
*/
func (a *Client) UploadCatalogTranslation(params *UploadCatalogTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadCatalogTranslationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadCatalogTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadCatalogTranslation",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/catalogTranslation/{locale}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadCatalogTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadCatalogTranslationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadCatalogTranslation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadInvoiceMPTemplate uploads the manual pay invoice template for the tenant
*/
func (a *Client) UploadInvoiceMPTemplate(params *UploadInvoiceMPTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadInvoiceMPTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadInvoiceMPTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadInvoiceMPTemplate",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/manualPayTemplate",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"text/html"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadInvoiceMPTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadInvoiceMPTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadInvoiceMPTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadInvoiceTemplate uploads the invoice template for the tenant
*/
func (a *Client) UploadInvoiceTemplate(params *UploadInvoiceTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadInvoiceTemplateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadInvoiceTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadInvoiceTemplate",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/template",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"text/html"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadInvoiceTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadInvoiceTemplateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadInvoiceTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadInvoiceTranslation uploads the invoice translation for the tenant
*/
func (a *Client) UploadInvoiceTranslation(params *UploadInvoiceTranslationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadInvoiceTranslationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadInvoiceTranslationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadInvoiceTranslation",
		Method:             "POST",
		PathPattern:        "/1.0/kb/invoices/translation/{locale}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadInvoiceTranslationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadInvoiceTranslationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadInvoiceTranslation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VoidInvoice performs the action of voiding an invoice
*/
func (a *Client) VoidInvoice(params *VoidInvoiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*VoidInvoiceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoidInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "voidInvoice",
		Method:             "PUT",
		PathPattern:        "/1.0/kb/invoices/{invoiceId}/voidInvoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VoidInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoidInvoiceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for voidInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
