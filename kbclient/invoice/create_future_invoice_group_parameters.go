// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateFutureInvoiceGroupParams creates a new CreateFutureInvoiceGroupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateFutureInvoiceGroupParams() *CreateFutureInvoiceGroupParams {
	return &CreateFutureInvoiceGroupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateFutureInvoiceGroupParamsWithTimeout creates a new CreateFutureInvoiceGroupParams object
// with the ability to set a timeout on a request.
func NewCreateFutureInvoiceGroupParamsWithTimeout(timeout time.Duration) *CreateFutureInvoiceGroupParams {
	return &CreateFutureInvoiceGroupParams{
		timeout: timeout,
	}
}

// NewCreateFutureInvoiceGroupParamsWithContext creates a new CreateFutureInvoiceGroupParams object
// with the ability to set a context for a request.
func NewCreateFutureInvoiceGroupParamsWithContext(ctx context.Context) *CreateFutureInvoiceGroupParams {
	return &CreateFutureInvoiceGroupParams{
		Context: ctx,
	}
}

// NewCreateFutureInvoiceGroupParamsWithHTTPClient creates a new CreateFutureInvoiceGroupParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateFutureInvoiceGroupParamsWithHTTPClient(client *http.Client) *CreateFutureInvoiceGroupParams {
	return &CreateFutureInvoiceGroupParams{
		HTTPClient: client,
	}
}

/*
CreateFutureInvoiceGroupParams contains all the parameters to send to the API endpoint

	for the create future invoice group operation.

	Typically these are written to a http.Request.
*/
type CreateFutureInvoiceGroupParams struct {

	// XKillbillComment.
	XKillbillComment *string

	// XKillbillCreatedBy.
	XKillbillCreatedBy string

	// XKillbillReason.
	XKillbillReason *string

	// AccountID.
	//
	// Format: uuid
	AccountID strfmt.UUID

	// PluginProperty.
	PluginProperty []string

	// TargetDate.
	//
	// Format: date
	TargetDate *strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create future invoice group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateFutureInvoiceGroupParams) WithDefaults() *CreateFutureInvoiceGroupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create future invoice group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateFutureInvoiceGroupParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithTimeout(timeout time.Duration) *CreateFutureInvoiceGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithContext(ctx context.Context) *CreateFutureInvoiceGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithHTTPClient(client *http.Client) *CreateFutureInvoiceGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXKillbillComment adds the xKillbillComment to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithXKillbillComment(xKillbillComment *string) *CreateFutureInvoiceGroupParams {
	o.SetXKillbillComment(xKillbillComment)
	return o
}

// SetXKillbillComment adds the xKillbillComment to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetXKillbillComment(xKillbillComment *string) {
	o.XKillbillComment = xKillbillComment
}

// WithXKillbillCreatedBy adds the xKillbillCreatedBy to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithXKillbillCreatedBy(xKillbillCreatedBy string) *CreateFutureInvoiceGroupParams {
	o.SetXKillbillCreatedBy(xKillbillCreatedBy)
	return o
}

// SetXKillbillCreatedBy adds the xKillbillCreatedBy to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetXKillbillCreatedBy(xKillbillCreatedBy string) {
	o.XKillbillCreatedBy = xKillbillCreatedBy
}

// WithXKillbillReason adds the xKillbillReason to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithXKillbillReason(xKillbillReason *string) *CreateFutureInvoiceGroupParams {
	o.SetXKillbillReason(xKillbillReason)
	return o
}

// SetXKillbillReason adds the xKillbillReason to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetXKillbillReason(xKillbillReason *string) {
	o.XKillbillReason = xKillbillReason
}

// WithAccountID adds the accountID to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithAccountID(accountID strfmt.UUID) *CreateFutureInvoiceGroupParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetAccountID(accountID strfmt.UUID) {
	o.AccountID = accountID
}

// WithPluginProperty adds the pluginProperty to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithPluginProperty(pluginProperty []string) *CreateFutureInvoiceGroupParams {
	o.SetPluginProperty(pluginProperty)
	return o
}

// SetPluginProperty adds the pluginProperty to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetPluginProperty(pluginProperty []string) {
	o.PluginProperty = pluginProperty
}

// WithTargetDate adds the targetDate to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) WithTargetDate(targetDate *strfmt.Date) *CreateFutureInvoiceGroupParams {
	o.SetTargetDate(targetDate)
	return o
}

// SetTargetDate adds the targetDate to the create future invoice group params
func (o *CreateFutureInvoiceGroupParams) SetTargetDate(targetDate *strfmt.Date) {
	o.TargetDate = targetDate
}

// WriteToRequest writes these params to a swagger request
func (o *CreateFutureInvoiceGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XKillbillComment != nil {

		// header param X-Killbill-Comment
		if err := r.SetHeaderParam("X-Killbill-Comment", *o.XKillbillComment); err != nil {
			return err
		}
	}

	// header param X-Killbill-CreatedBy
	if err := r.SetHeaderParam("X-Killbill-CreatedBy", o.XKillbillCreatedBy); err != nil {
		return err
	}

	if o.XKillbillReason != nil {

		// header param X-Killbill-Reason
		if err := r.SetHeaderParam("X-Killbill-Reason", *o.XKillbillReason); err != nil {
			return err
		}
	}

	// query param accountId
	qrAccountID := o.AccountID
	qAccountID := qrAccountID.String()
	if qAccountID != "" {

		if err := r.SetQueryParam("accountId", qAccountID); err != nil {
			return err
		}
	}

	if o.PluginProperty != nil {

		// binding items for pluginProperty
		joinedPluginProperty := o.bindParamPluginProperty(reg)

		// query array param pluginProperty
		if err := r.SetQueryParam("pluginProperty", joinedPluginProperty...); err != nil {
			return err
		}
	}

	if o.TargetDate != nil {

		// query param targetDate
		var qrTargetDate strfmt.Date

		if o.TargetDate != nil {
			qrTargetDate = *o.TargetDate
		}
		qTargetDate := qrTargetDate.String()
		if qTargetDate != "" {

			if err := r.SetQueryParam("targetDate", qTargetDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCreateFutureInvoiceGroup binds the parameter pluginProperty
func (o *CreateFutureInvoiceGroupParams) bindParamPluginProperty(formats strfmt.Registry) []string {
	pluginPropertyIR := o.PluginProperty

	var pluginPropertyIC []string
	for _, pluginPropertyIIR := range pluginPropertyIR { // explode []string

		pluginPropertyIIV := pluginPropertyIIR // string as string
		pluginPropertyIC = append(pluginPropertyIC, pluginPropertyIIV)
	}

	// items.CollectionFormat: "multi"
	pluginPropertyIS := swag.JoinByFormat(pluginPropertyIC, "multi")

	return pluginPropertyIS
}
