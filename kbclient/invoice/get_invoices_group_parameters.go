// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInvoicesGroupParams creates a new GetInvoicesGroupParams object
// with the default values initialized.
func NewGetInvoicesGroupParams() *GetInvoicesGroupParams {
	var (
		auditDefault             = string("NONE")
		withChildrenItemsDefault = bool(false)
	)
	return &GetInvoicesGroupParams{
		Audit:             &auditDefault,
		WithChildrenItems: &withChildrenItemsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInvoicesGroupParamsWithTimeout creates a new GetInvoicesGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInvoicesGroupParamsWithTimeout(timeout time.Duration) *GetInvoicesGroupParams {
	var (
		auditDefault             = string("NONE")
		withChildrenItemsDefault = bool(false)
	)
	return &GetInvoicesGroupParams{
		Audit:             &auditDefault,
		WithChildrenItems: &withChildrenItemsDefault,

		timeout: timeout,
	}
}

// NewGetInvoicesGroupParamsWithContext creates a new GetInvoicesGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInvoicesGroupParamsWithContext(ctx context.Context) *GetInvoicesGroupParams {
	var (
		auditDefault             = string("NONE")
		withChildrenItemsDefault = bool(false)
	)
	return &GetInvoicesGroupParams{
		Audit:             &auditDefault,
		WithChildrenItems: &withChildrenItemsDefault,

		Context: ctx,
	}
}

// NewGetInvoicesGroupParamsWithHTTPClient creates a new GetInvoicesGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInvoicesGroupParamsWithHTTPClient(client *http.Client) *GetInvoicesGroupParams {
	var (
		auditDefault             = string("NONE")
		withChildrenItemsDefault = bool(false)
	)
	return &GetInvoicesGroupParams{
		Audit:             &auditDefault,
		WithChildrenItems: &withChildrenItemsDefault,
		HTTPClient:        client,
	}
}

/*GetInvoicesGroupParams contains all the parameters to send to the API endpoint
for the get invoices group operation typically these are written to a http.Request
*/
type GetInvoicesGroupParams struct {

	/*AccountID*/
	AccountID strfmt.UUID
	/*Audit*/
	Audit *string
	/*GroupID*/
	GroupID strfmt.UUID
	/*WithChildrenItems*/
	WithChildrenItems *bool

	WithProfilingInfo     *string // If set, return KB hprof headers
	WithStackTrace        *bool   // If set, returns full stack trace with error message
	timeout               time.Duration
	Context               context.Context
	HTTPClient            *http.Client
	ProcessLocationHeader bool // For create APIs that return 201, send another request and retrieve the resource.
}

// WithTimeout adds the timeout to the get invoices group params
func (o *GetInvoicesGroupParams) WithTimeout(timeout time.Duration) *GetInvoicesGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get invoices group params
func (o *GetInvoicesGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get invoices group params
func (o *GetInvoicesGroupParams) WithContext(ctx context.Context) *GetInvoicesGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get invoices group params
func (o *GetInvoicesGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get invoices group params
func (o *GetInvoicesGroupParams) WithHTTPClient(client *http.Client) *GetInvoicesGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get invoices group params
func (o *GetInvoicesGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get invoices group params
func (o *GetInvoicesGroupParams) WithAccountID(accountID strfmt.UUID) *GetInvoicesGroupParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get invoices group params
func (o *GetInvoicesGroupParams) SetAccountID(accountID strfmt.UUID) {
	o.AccountID = accountID
}

// WithAudit adds the audit to the get invoices group params
func (o *GetInvoicesGroupParams) WithAudit(audit *string) *GetInvoicesGroupParams {
	o.SetAudit(audit)
	return o
}

// SetAudit adds the audit to the get invoices group params
func (o *GetInvoicesGroupParams) SetAudit(audit *string) {
	o.Audit = audit
}

// WithGroupID adds the groupID to the get invoices group params
func (o *GetInvoicesGroupParams) WithGroupID(groupID strfmt.UUID) *GetInvoicesGroupParams {
	o.SetGroupID(groupID)
	return o
}

// SetGroupID adds the groupId to the get invoices group params
func (o *GetInvoicesGroupParams) SetGroupID(groupID strfmt.UUID) {
	o.GroupID = groupID
}

// WithWithChildrenItems adds the withChildrenItems to the get invoices group params
func (o *GetInvoicesGroupParams) WithWithChildrenItems(withChildrenItems *bool) *GetInvoicesGroupParams {
	o.SetWithChildrenItems(withChildrenItems)
	return o
}

// SetWithChildrenItems adds the withChildrenItems to the get invoices group params
func (o *GetInvoicesGroupParams) SetWithChildrenItems(withChildrenItems *bool) {
	o.WithChildrenItems = withChildrenItems
}

// WriteToRequest writes these params to a swagger request
func (o *GetInvoicesGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param accountId
	qrAccountID := o.AccountID
	qAccountID := qrAccountID.String()
	if qAccountID != "" {
		if err := r.SetQueryParam("accountId", qAccountID); err != nil {
			return err
		}
	}

	if o.Audit != nil {

		// query param audit
		var qrAudit string
		if o.Audit != nil {
			qrAudit = *o.Audit
		}
		qAudit := qrAudit
		if qAudit != "" {
			if err := r.SetQueryParam("audit", qAudit); err != nil {
				return err
			}
		}

	}

	// path param groupId
	if err := r.SetPathParam("groupId", o.GroupID.String()); err != nil {
		return err
	}

	if o.WithChildrenItems != nil {

		// query param withChildrenItems
		var qrWithChildrenItems bool
		if o.WithChildrenItems != nil {
			qrWithChildrenItems = *o.WithChildrenItems
		}
		qWithChildrenItems := swag.FormatBool(qrWithChildrenItems)
		if qWithChildrenItems != "" {
			if err := r.SetQueryParam("withChildrenItems", qWithChildrenItems); err != nil {
				return err
			}
		}

	}

	// header param WithProfilingInfo
	if o.WithProfilingInfo != nil && len(*o.WithProfilingInfo) > 0 {
		if err := r.SetHeaderParam("X-Killbill-Profiling-Req", *o.WithProfilingInfo); err != nil {
			return err
		}
	}

	// header param withStackTrace
	if o.WithStackTrace != nil && *o.WithStackTrace {
		if err := r.SetQueryParam("withStackTrace", "true"); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
