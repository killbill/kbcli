// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadInvoiceTranslationParams creates a new UploadInvoiceTranslationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadInvoiceTranslationParams() *UploadInvoiceTranslationParams {
	return &UploadInvoiceTranslationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadInvoiceTranslationParamsWithTimeout creates a new UploadInvoiceTranslationParams object
// with the ability to set a timeout on a request.
func NewUploadInvoiceTranslationParamsWithTimeout(timeout time.Duration) *UploadInvoiceTranslationParams {
	return &UploadInvoiceTranslationParams{
		timeout: timeout,
	}
}

// NewUploadInvoiceTranslationParamsWithContext creates a new UploadInvoiceTranslationParams object
// with the ability to set a context for a request.
func NewUploadInvoiceTranslationParamsWithContext(ctx context.Context) *UploadInvoiceTranslationParams {
	return &UploadInvoiceTranslationParams{
		Context: ctx,
	}
}

// NewUploadInvoiceTranslationParamsWithHTTPClient creates a new UploadInvoiceTranslationParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadInvoiceTranslationParamsWithHTTPClient(client *http.Client) *UploadInvoiceTranslationParams {
	return &UploadInvoiceTranslationParams{
		HTTPClient: client,
	}
}

/*
UploadInvoiceTranslationParams contains all the parameters to send to the API endpoint

	for the upload invoice translation operation.

	Typically these are written to a http.Request.
*/
type UploadInvoiceTranslationParams struct {

	// XKillbillComment.
	XKillbillComment *string

	// XKillbillCreatedBy.
	XKillbillCreatedBy string

	// XKillbillReason.
	XKillbillReason *string

	// Body.
	Body string

	// DeleteIfExists.
	DeleteIfExists *bool

	// Locale.
	Locale string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload invoice translation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadInvoiceTranslationParams) WithDefaults() *UploadInvoiceTranslationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload invoice translation params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadInvoiceTranslationParams) SetDefaults() {
	var (
		deleteIfExistsDefault = bool(false)
	)

	val := UploadInvoiceTranslationParams{
		DeleteIfExists: &deleteIfExistsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithTimeout(timeout time.Duration) *UploadInvoiceTranslationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithContext(ctx context.Context) *UploadInvoiceTranslationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithHTTPClient(client *http.Client) *UploadInvoiceTranslationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXKillbillComment adds the xKillbillComment to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithXKillbillComment(xKillbillComment *string) *UploadInvoiceTranslationParams {
	o.SetXKillbillComment(xKillbillComment)
	return o
}

// SetXKillbillComment adds the xKillbillComment to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetXKillbillComment(xKillbillComment *string) {
	o.XKillbillComment = xKillbillComment
}

// WithXKillbillCreatedBy adds the xKillbillCreatedBy to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithXKillbillCreatedBy(xKillbillCreatedBy string) *UploadInvoiceTranslationParams {
	o.SetXKillbillCreatedBy(xKillbillCreatedBy)
	return o
}

// SetXKillbillCreatedBy adds the xKillbillCreatedBy to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetXKillbillCreatedBy(xKillbillCreatedBy string) {
	o.XKillbillCreatedBy = xKillbillCreatedBy
}

// WithXKillbillReason adds the xKillbillReason to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithXKillbillReason(xKillbillReason *string) *UploadInvoiceTranslationParams {
	o.SetXKillbillReason(xKillbillReason)
	return o
}

// SetXKillbillReason adds the xKillbillReason to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetXKillbillReason(xKillbillReason *string) {
	o.XKillbillReason = xKillbillReason
}

// WithBody adds the body to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithBody(body string) *UploadInvoiceTranslationParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetBody(body string) {
	o.Body = body
}

// WithDeleteIfExists adds the deleteIfExists to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithDeleteIfExists(deleteIfExists *bool) *UploadInvoiceTranslationParams {
	o.SetDeleteIfExists(deleteIfExists)
	return o
}

// SetDeleteIfExists adds the deleteIfExists to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetDeleteIfExists(deleteIfExists *bool) {
	o.DeleteIfExists = deleteIfExists
}

// WithLocale adds the locale to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) WithLocale(locale string) *UploadInvoiceTranslationParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the upload invoice translation params
func (o *UploadInvoiceTranslationParams) SetLocale(locale string) {
	o.Locale = locale
}

// WriteToRequest writes these params to a swagger request
func (o *UploadInvoiceTranslationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XKillbillComment != nil {

		// header param X-Killbill-Comment
		if err := r.SetHeaderParam("X-Killbill-Comment", *o.XKillbillComment); err != nil {
			return err
		}
	}

	// header param X-Killbill-CreatedBy
	if err := r.SetHeaderParam("X-Killbill-CreatedBy", o.XKillbillCreatedBy); err != nil {
		return err
	}

	if o.XKillbillReason != nil {

		// header param X-Killbill-Reason
		if err := r.SetHeaderParam("X-Killbill-Reason", *o.XKillbillReason); err != nil {
			return err
		}
	}
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.DeleteIfExists != nil {

		// query param deleteIfExists
		var qrDeleteIfExists bool

		if o.DeleteIfExists != nil {
			qrDeleteIfExists = *o.DeleteIfExists
		}
		qDeleteIfExists := swag.FormatBool(qrDeleteIfExists)
		if qDeleteIfExists != "" {

			if err := r.SetQueryParam("deleteIfExists", qDeleteIfExists); err != nil {
				return err
			}
		}
	}

	// path param locale
	if err := r.SetPathParam("locale", o.Locale); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
