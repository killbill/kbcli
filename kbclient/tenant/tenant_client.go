// Code generated by go-swagger; DO NOT EDIT.

package tenant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tenant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tenant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTenantCreated, error)

	DeletePerTenantConfiguration(params *DeletePerTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePerTenantConfigurationNoContent, error)

	DeletePluginConfiguration(params *DeletePluginConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePluginConfigurationNoContent, error)

	DeletePluginPaymentStateMachineConfig(params *DeletePluginPaymentStateMachineConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePluginPaymentStateMachineConfigNoContent, error)

	DeletePushNotificationCallbacks(params *DeletePushNotificationCallbacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePushNotificationCallbacksNoContent, error)

	DeleteUserKeyValue(params *DeleteUserKeyValueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserKeyValueNoContent, error)

	GetAllPluginConfiguration(params *GetAllPluginConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPluginConfigurationOK, error)

	GetPerTenantConfiguration(params *GetPerTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPerTenantConfigurationOK, error)

	GetPluginConfiguration(params *GetPluginConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginConfigurationOK, error)

	GetPluginPaymentStateMachineConfig(params *GetPluginPaymentStateMachineConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginPaymentStateMachineConfigOK, error)

	GetPushNotificationCallbacks(params *GetPushNotificationCallbacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPushNotificationCallbacksOK, error)

	GetTenant(params *GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantOK, error)

	GetTenantByAPIKey(params *GetTenantByAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantByAPIKeyOK, error)

	GetUserKeyValue(params *GetUserKeyValueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserKeyValueOK, error)

	InsertUserKeyValue(params *InsertUserKeyValueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InsertUserKeyValueCreated, error)

	RegisterPushNotificationCallback(params *RegisterPushNotificationCallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterPushNotificationCallbackCreated, error)

	UploadPerTenantConfiguration(params *UploadPerTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadPerTenantConfigurationCreated, error)

	UploadPluginConfiguration(params *UploadPluginConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadPluginConfigurationCreated, error)

	UploadPluginPaymentStateMachineConfig(params *UploadPluginPaymentStateMachineConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadPluginPaymentStateMachineConfigCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateTenant creates a tenant
*/
func (a *Client) CreateTenant(params *CreateTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTenantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createTenant",
		Method:             "POST",
		PathPattern:        "/1.0/kb/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTenantCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePerTenantConfiguration deletes a per tenant configuration system properties
*/
func (a *Client) DeletePerTenantConfiguration(params *DeletePerTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePerTenantConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePerTenantConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePerTenantConfiguration",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/tenants/uploadPerTenantConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePerTenantConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePerTenantConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePerTenantConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePluginConfiguration deletes a per tenant configuration for a plugin
*/
func (a *Client) DeletePluginConfiguration(params *DeletePluginConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePluginConfigurationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePluginConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePluginConfiguration",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/tenants/uploadPluginConfig/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePluginConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePluginConfigurationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePluginConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePluginPaymentStateMachineConfig deletes a per tenant payment state machine for a plugin
*/
func (a *Client) DeletePluginPaymentStateMachineConfig(params *DeletePluginPaymentStateMachineConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePluginPaymentStateMachineConfigNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePluginPaymentStateMachineConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePluginPaymentStateMachineConfig",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePluginPaymentStateMachineConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePluginPaymentStateMachineConfigNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePluginPaymentStateMachineConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePushNotificationCallbacks deletes a push notification
*/
func (a *Client) DeletePushNotificationCallbacks(params *DeletePushNotificationCallbacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePushNotificationCallbacksNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePushNotificationCallbacksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePushNotificationCallbacks",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/tenants/registerNotificationCallback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePushNotificationCallbacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePushNotificationCallbacksNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deletePushNotificationCallbacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserKeyValue deletes a per tenant user key value
*/
func (a *Client) DeleteUserKeyValue(params *DeleteUserKeyValueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserKeyValueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserKeyValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserKeyValue",
		Method:             "DELETE",
		PathPattern:        "/1.0/kb/tenants/userKeyValue/{keyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserKeyValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserKeyValueNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserKeyValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllPluginConfiguration retrieves a per tenant key value based on key prefix
*/
func (a *Client) GetAllPluginConfiguration(params *GetAllPluginConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllPluginConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllPluginConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllPluginConfiguration",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tenants/uploadPerTenantConfig/{keyPrefix}/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllPluginConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllPluginConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllPluginConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPerTenantConfiguration retrieves a per tenant configuration system properties
*/
func (a *Client) GetPerTenantConfiguration(params *GetPerTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPerTenantConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPerTenantConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPerTenantConfiguration",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tenants/uploadPerTenantConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPerTenantConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPerTenantConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPerTenantConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginConfiguration retrieves a per tenant configuration for a plugin
*/
func (a *Client) GetPluginConfiguration(params *GetPluginConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPluginConfiguration",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tenants/uploadPluginConfig/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPluginPaymentStateMachineConfig retrieves a per tenant payment state machine for a plugin
*/
func (a *Client) GetPluginPaymentStateMachineConfig(params *GetPluginPaymentStateMachineConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPluginPaymentStateMachineConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginPaymentStateMachineConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPluginPaymentStateMachineConfig",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPluginPaymentStateMachineConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPluginPaymentStateMachineConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPluginPaymentStateMachineConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPushNotificationCallbacks retrieves a push notification
*/
func (a *Client) GetPushNotificationCallbacks(params *GetPushNotificationCallbacksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPushNotificationCallbacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPushNotificationCallbacksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPushNotificationCallbacks",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tenants/registerNotificationCallback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPushNotificationCallbacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPushNotificationCallbacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPushNotificationCallbacks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTenant retrieves a tenant by id
*/
func (a *Client) GetTenant(params *GetTenantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTenant",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tenants/{tenantId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTenantByAPIKey retrieves a tenant by its API key
*/
func (a *Client) GetTenantByAPIKey(params *GetTenantByAPIKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTenantByAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantByAPIKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTenantByApiKey",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tenants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantByAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantByAPIKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTenantByApiKey: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserKeyValue retrieves a per tenant user key value
*/
func (a *Client) GetUserKeyValue(params *GetUserKeyValueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserKeyValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserKeyValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserKeyValue",
		Method:             "GET",
		PathPattern:        "/1.0/kb/tenants/userKeyValue/{keyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserKeyValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserKeyValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserKeyValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertUserKeyValue adds a per tenant user key value
*/
func (a *Client) InsertUserKeyValue(params *InsertUserKeyValueParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InsertUserKeyValueCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertUserKeyValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertUserKeyValue",
		Method:             "POST",
		PathPattern:        "/1.0/kb/tenants/userKeyValue/{keyName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertUserKeyValueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InsertUserKeyValueCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for insertUserKeyValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RegisterPushNotificationCallback creates a push notification
*/
func (a *Client) RegisterPushNotificationCallback(params *RegisterPushNotificationCallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RegisterPushNotificationCallbackCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterPushNotificationCallbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerPushNotificationCallback",
		Method:             "POST",
		PathPattern:        "/1.0/kb/tenants/registerNotificationCallback",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterPushNotificationCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterPushNotificationCallbackCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registerPushNotificationCallback: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadPerTenantConfiguration adds a per tenant configuration system properties
*/
func (a *Client) UploadPerTenantConfiguration(params *UploadPerTenantConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadPerTenantConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadPerTenantConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadPerTenantConfiguration",
		Method:             "POST",
		PathPattern:        "/1.0/kb/tenants/uploadPerTenantConfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadPerTenantConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadPerTenantConfigurationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadPerTenantConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadPluginConfiguration adds a per tenant configuration for a plugin
*/
func (a *Client) UploadPluginConfiguration(params *UploadPluginConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadPluginConfigurationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadPluginConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadPluginConfiguration",
		Method:             "POST",
		PathPattern:        "/1.0/kb/tenants/uploadPluginConfig/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadPluginConfigurationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadPluginConfigurationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadPluginConfiguration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadPluginPaymentStateMachineConfig adds a per tenant payment state machine for a plugin
*/
func (a *Client) UploadPluginPaymentStateMachineConfig(params *UploadPluginPaymentStateMachineConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UploadPluginPaymentStateMachineConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadPluginPaymentStateMachineConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadPluginPaymentStateMachineConfig",
		Method:             "POST",
		PathPattern:        "/1.0/kb/tenants/uploadPluginPaymentStateMachineConfig/{pluginName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadPluginPaymentStateMachineConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadPluginPaymentStateMachineConfigCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadPluginPaymentStateMachineConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
