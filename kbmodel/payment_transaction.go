// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentTransaction payment transaction
// swagger:model PaymentTransaction
type PaymentTransaction struct {

	// Transaction amount, required except for void operations
	Amount float64 `json:"amount,omitempty"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// Amount currency (account currency unless specified)
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	Currency PaymentTransactionCurrencyEnum `json:"currency,omitempty"`

	// effective date
	// Format: date-time
	EffectiveDate strfmt.DateTime `json:"effectiveDate,omitempty"`

	// first payment reference Id
	FirstPaymentReferenceID string `json:"firstPaymentReferenceId,omitempty"`

	// gateway error code
	GatewayErrorCode string `json:"gatewayErrorCode,omitempty"`

	// gateway error msg
	GatewayErrorMsg string `json:"gatewayErrorMsg,omitempty"`

	// payment external key
	PaymentExternalKey string `json:"paymentExternalKey,omitempty"`

	// Associated payment id, required when notifying state transitions
	// Format: uuid
	PaymentID strfmt.UUID `json:"paymentId,omitempty"`

	// processed amount
	ProcessedAmount float64 `json:"processedAmount,omitempty"`

	// processed currency
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	ProcessedCurrency PaymentTransactionProcessedCurrencyEnum `json:"processedCurrency,omitempty"`

	// properties
	Properties []*PluginProperty `json:"properties"`

	// second payment reference Id
	SecondPaymentReferenceID string `json:"secondPaymentReferenceId,omitempty"`

	// Transaction status, required for state change notifications
	// Enum: [SUCCESS UNKNOWN PENDING PAYMENT_FAILURE PLUGIN_FAILURE PAYMENT_SYSTEM_OFF]
	Status PaymentTransactionStatusEnum `json:"status,omitempty"`

	// transaction external key
	TransactionExternalKey string `json:"transactionExternalKey,omitempty"`

	// transaction Id
	// Format: uuid
	TransactionID strfmt.UUID `json:"transactionId,omitempty"`

	// transaction type
	// Enum: [AUTHORIZE CAPTURE CHARGEBACK CREDIT PURCHASE REFUND VOID]
	TransactionType PaymentTransactionTransactionTypeEnum `json:"transactionType,omitempty"`
}

// Validate validates this payment transaction
func (m *PaymentTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentTransaction) validateAuditLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var paymentTransactionTypeCurrencyPropEnum []interface{}

func init() {
	var res []PaymentTransactionCurrencyEnum
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTransactionTypeCurrencyPropEnum = append(paymentTransactionTypeCurrencyPropEnum, v)
	}
}

type PaymentTransactionCurrencyEnum string

const (

	// PaymentTransactionCurrencyAED captures enum value "AED"
	PaymentTransactionCurrencyAED PaymentTransactionCurrencyEnum = "AED"

	// PaymentTransactionCurrencyAFN captures enum value "AFN"
	PaymentTransactionCurrencyAFN PaymentTransactionCurrencyEnum = "AFN"

	// PaymentTransactionCurrencyALL captures enum value "ALL"
	PaymentTransactionCurrencyALL PaymentTransactionCurrencyEnum = "ALL"

	// PaymentTransactionCurrencyAMD captures enum value "AMD"
	PaymentTransactionCurrencyAMD PaymentTransactionCurrencyEnum = "AMD"

	// PaymentTransactionCurrencyANG captures enum value "ANG"
	PaymentTransactionCurrencyANG PaymentTransactionCurrencyEnum = "ANG"

	// PaymentTransactionCurrencyAOA captures enum value "AOA"
	PaymentTransactionCurrencyAOA PaymentTransactionCurrencyEnum = "AOA"

	// PaymentTransactionCurrencyARS captures enum value "ARS"
	PaymentTransactionCurrencyARS PaymentTransactionCurrencyEnum = "ARS"

	// PaymentTransactionCurrencyAUD captures enum value "AUD"
	PaymentTransactionCurrencyAUD PaymentTransactionCurrencyEnum = "AUD"

	// PaymentTransactionCurrencyAWG captures enum value "AWG"
	PaymentTransactionCurrencyAWG PaymentTransactionCurrencyEnum = "AWG"

	// PaymentTransactionCurrencyAZN captures enum value "AZN"
	PaymentTransactionCurrencyAZN PaymentTransactionCurrencyEnum = "AZN"

	// PaymentTransactionCurrencyBAM captures enum value "BAM"
	PaymentTransactionCurrencyBAM PaymentTransactionCurrencyEnum = "BAM"

	// PaymentTransactionCurrencyBBD captures enum value "BBD"
	PaymentTransactionCurrencyBBD PaymentTransactionCurrencyEnum = "BBD"

	// PaymentTransactionCurrencyBDT captures enum value "BDT"
	PaymentTransactionCurrencyBDT PaymentTransactionCurrencyEnum = "BDT"

	// PaymentTransactionCurrencyBGN captures enum value "BGN"
	PaymentTransactionCurrencyBGN PaymentTransactionCurrencyEnum = "BGN"

	// PaymentTransactionCurrencyBHD captures enum value "BHD"
	PaymentTransactionCurrencyBHD PaymentTransactionCurrencyEnum = "BHD"

	// PaymentTransactionCurrencyBIF captures enum value "BIF"
	PaymentTransactionCurrencyBIF PaymentTransactionCurrencyEnum = "BIF"

	// PaymentTransactionCurrencyBMD captures enum value "BMD"
	PaymentTransactionCurrencyBMD PaymentTransactionCurrencyEnum = "BMD"

	// PaymentTransactionCurrencyBND captures enum value "BND"
	PaymentTransactionCurrencyBND PaymentTransactionCurrencyEnum = "BND"

	// PaymentTransactionCurrencyBOB captures enum value "BOB"
	PaymentTransactionCurrencyBOB PaymentTransactionCurrencyEnum = "BOB"

	// PaymentTransactionCurrencyBRL captures enum value "BRL"
	PaymentTransactionCurrencyBRL PaymentTransactionCurrencyEnum = "BRL"

	// PaymentTransactionCurrencyBSD captures enum value "BSD"
	PaymentTransactionCurrencyBSD PaymentTransactionCurrencyEnum = "BSD"

	// PaymentTransactionCurrencyBTN captures enum value "BTN"
	PaymentTransactionCurrencyBTN PaymentTransactionCurrencyEnum = "BTN"

	// PaymentTransactionCurrencyBWP captures enum value "BWP"
	PaymentTransactionCurrencyBWP PaymentTransactionCurrencyEnum = "BWP"

	// PaymentTransactionCurrencyBYR captures enum value "BYR"
	PaymentTransactionCurrencyBYR PaymentTransactionCurrencyEnum = "BYR"

	// PaymentTransactionCurrencyBZD captures enum value "BZD"
	PaymentTransactionCurrencyBZD PaymentTransactionCurrencyEnum = "BZD"

	// PaymentTransactionCurrencyCAD captures enum value "CAD"
	PaymentTransactionCurrencyCAD PaymentTransactionCurrencyEnum = "CAD"

	// PaymentTransactionCurrencyCDF captures enum value "CDF"
	PaymentTransactionCurrencyCDF PaymentTransactionCurrencyEnum = "CDF"

	// PaymentTransactionCurrencyCHF captures enum value "CHF"
	PaymentTransactionCurrencyCHF PaymentTransactionCurrencyEnum = "CHF"

	// PaymentTransactionCurrencyCLP captures enum value "CLP"
	PaymentTransactionCurrencyCLP PaymentTransactionCurrencyEnum = "CLP"

	// PaymentTransactionCurrencyCNY captures enum value "CNY"
	PaymentTransactionCurrencyCNY PaymentTransactionCurrencyEnum = "CNY"

	// PaymentTransactionCurrencyCOP captures enum value "COP"
	PaymentTransactionCurrencyCOP PaymentTransactionCurrencyEnum = "COP"

	// PaymentTransactionCurrencyCRC captures enum value "CRC"
	PaymentTransactionCurrencyCRC PaymentTransactionCurrencyEnum = "CRC"

	// PaymentTransactionCurrencyCUC captures enum value "CUC"
	PaymentTransactionCurrencyCUC PaymentTransactionCurrencyEnum = "CUC"

	// PaymentTransactionCurrencyCUP captures enum value "CUP"
	PaymentTransactionCurrencyCUP PaymentTransactionCurrencyEnum = "CUP"

	// PaymentTransactionCurrencyCVE captures enum value "CVE"
	PaymentTransactionCurrencyCVE PaymentTransactionCurrencyEnum = "CVE"

	// PaymentTransactionCurrencyCZK captures enum value "CZK"
	PaymentTransactionCurrencyCZK PaymentTransactionCurrencyEnum = "CZK"

	// PaymentTransactionCurrencyDJF captures enum value "DJF"
	PaymentTransactionCurrencyDJF PaymentTransactionCurrencyEnum = "DJF"

	// PaymentTransactionCurrencyDKK captures enum value "DKK"
	PaymentTransactionCurrencyDKK PaymentTransactionCurrencyEnum = "DKK"

	// PaymentTransactionCurrencyDOP captures enum value "DOP"
	PaymentTransactionCurrencyDOP PaymentTransactionCurrencyEnum = "DOP"

	// PaymentTransactionCurrencyDZD captures enum value "DZD"
	PaymentTransactionCurrencyDZD PaymentTransactionCurrencyEnum = "DZD"

	// PaymentTransactionCurrencyEGP captures enum value "EGP"
	PaymentTransactionCurrencyEGP PaymentTransactionCurrencyEnum = "EGP"

	// PaymentTransactionCurrencyERN captures enum value "ERN"
	PaymentTransactionCurrencyERN PaymentTransactionCurrencyEnum = "ERN"

	// PaymentTransactionCurrencyETB captures enum value "ETB"
	PaymentTransactionCurrencyETB PaymentTransactionCurrencyEnum = "ETB"

	// PaymentTransactionCurrencyEUR captures enum value "EUR"
	PaymentTransactionCurrencyEUR PaymentTransactionCurrencyEnum = "EUR"

	// PaymentTransactionCurrencyFJD captures enum value "FJD"
	PaymentTransactionCurrencyFJD PaymentTransactionCurrencyEnum = "FJD"

	// PaymentTransactionCurrencyFKP captures enum value "FKP"
	PaymentTransactionCurrencyFKP PaymentTransactionCurrencyEnum = "FKP"

	// PaymentTransactionCurrencyGBP captures enum value "GBP"
	PaymentTransactionCurrencyGBP PaymentTransactionCurrencyEnum = "GBP"

	// PaymentTransactionCurrencyGEL captures enum value "GEL"
	PaymentTransactionCurrencyGEL PaymentTransactionCurrencyEnum = "GEL"

	// PaymentTransactionCurrencyGGP captures enum value "GGP"
	PaymentTransactionCurrencyGGP PaymentTransactionCurrencyEnum = "GGP"

	// PaymentTransactionCurrencyGHS captures enum value "GHS"
	PaymentTransactionCurrencyGHS PaymentTransactionCurrencyEnum = "GHS"

	// PaymentTransactionCurrencyGIP captures enum value "GIP"
	PaymentTransactionCurrencyGIP PaymentTransactionCurrencyEnum = "GIP"

	// PaymentTransactionCurrencyGMD captures enum value "GMD"
	PaymentTransactionCurrencyGMD PaymentTransactionCurrencyEnum = "GMD"

	// PaymentTransactionCurrencyGNF captures enum value "GNF"
	PaymentTransactionCurrencyGNF PaymentTransactionCurrencyEnum = "GNF"

	// PaymentTransactionCurrencyGTQ captures enum value "GTQ"
	PaymentTransactionCurrencyGTQ PaymentTransactionCurrencyEnum = "GTQ"

	// PaymentTransactionCurrencyGYD captures enum value "GYD"
	PaymentTransactionCurrencyGYD PaymentTransactionCurrencyEnum = "GYD"

	// PaymentTransactionCurrencyHKD captures enum value "HKD"
	PaymentTransactionCurrencyHKD PaymentTransactionCurrencyEnum = "HKD"

	// PaymentTransactionCurrencyHNL captures enum value "HNL"
	PaymentTransactionCurrencyHNL PaymentTransactionCurrencyEnum = "HNL"

	// PaymentTransactionCurrencyHRK captures enum value "HRK"
	PaymentTransactionCurrencyHRK PaymentTransactionCurrencyEnum = "HRK"

	// PaymentTransactionCurrencyHTG captures enum value "HTG"
	PaymentTransactionCurrencyHTG PaymentTransactionCurrencyEnum = "HTG"

	// PaymentTransactionCurrencyHUF captures enum value "HUF"
	PaymentTransactionCurrencyHUF PaymentTransactionCurrencyEnum = "HUF"

	// PaymentTransactionCurrencyIDR captures enum value "IDR"
	PaymentTransactionCurrencyIDR PaymentTransactionCurrencyEnum = "IDR"

	// PaymentTransactionCurrencyILS captures enum value "ILS"
	PaymentTransactionCurrencyILS PaymentTransactionCurrencyEnum = "ILS"

	// PaymentTransactionCurrencyIMP captures enum value "IMP"
	PaymentTransactionCurrencyIMP PaymentTransactionCurrencyEnum = "IMP"

	// PaymentTransactionCurrencyINR captures enum value "INR"
	PaymentTransactionCurrencyINR PaymentTransactionCurrencyEnum = "INR"

	// PaymentTransactionCurrencyIQD captures enum value "IQD"
	PaymentTransactionCurrencyIQD PaymentTransactionCurrencyEnum = "IQD"

	// PaymentTransactionCurrencyIRR captures enum value "IRR"
	PaymentTransactionCurrencyIRR PaymentTransactionCurrencyEnum = "IRR"

	// PaymentTransactionCurrencyISK captures enum value "ISK"
	PaymentTransactionCurrencyISK PaymentTransactionCurrencyEnum = "ISK"

	// PaymentTransactionCurrencyJEP captures enum value "JEP"
	PaymentTransactionCurrencyJEP PaymentTransactionCurrencyEnum = "JEP"

	// PaymentTransactionCurrencyJMD captures enum value "JMD"
	PaymentTransactionCurrencyJMD PaymentTransactionCurrencyEnum = "JMD"

	// PaymentTransactionCurrencyJOD captures enum value "JOD"
	PaymentTransactionCurrencyJOD PaymentTransactionCurrencyEnum = "JOD"

	// PaymentTransactionCurrencyJPY captures enum value "JPY"
	PaymentTransactionCurrencyJPY PaymentTransactionCurrencyEnum = "JPY"

	// PaymentTransactionCurrencyKES captures enum value "KES"
	PaymentTransactionCurrencyKES PaymentTransactionCurrencyEnum = "KES"

	// PaymentTransactionCurrencyKGS captures enum value "KGS"
	PaymentTransactionCurrencyKGS PaymentTransactionCurrencyEnum = "KGS"

	// PaymentTransactionCurrencyKHR captures enum value "KHR"
	PaymentTransactionCurrencyKHR PaymentTransactionCurrencyEnum = "KHR"

	// PaymentTransactionCurrencyKMF captures enum value "KMF"
	PaymentTransactionCurrencyKMF PaymentTransactionCurrencyEnum = "KMF"

	// PaymentTransactionCurrencyKPW captures enum value "KPW"
	PaymentTransactionCurrencyKPW PaymentTransactionCurrencyEnum = "KPW"

	// PaymentTransactionCurrencyKRW captures enum value "KRW"
	PaymentTransactionCurrencyKRW PaymentTransactionCurrencyEnum = "KRW"

	// PaymentTransactionCurrencyKWD captures enum value "KWD"
	PaymentTransactionCurrencyKWD PaymentTransactionCurrencyEnum = "KWD"

	// PaymentTransactionCurrencyKYD captures enum value "KYD"
	PaymentTransactionCurrencyKYD PaymentTransactionCurrencyEnum = "KYD"

	// PaymentTransactionCurrencyKZT captures enum value "KZT"
	PaymentTransactionCurrencyKZT PaymentTransactionCurrencyEnum = "KZT"

	// PaymentTransactionCurrencyLAK captures enum value "LAK"
	PaymentTransactionCurrencyLAK PaymentTransactionCurrencyEnum = "LAK"

	// PaymentTransactionCurrencyLBP captures enum value "LBP"
	PaymentTransactionCurrencyLBP PaymentTransactionCurrencyEnum = "LBP"

	// PaymentTransactionCurrencyLKR captures enum value "LKR"
	PaymentTransactionCurrencyLKR PaymentTransactionCurrencyEnum = "LKR"

	// PaymentTransactionCurrencyLRD captures enum value "LRD"
	PaymentTransactionCurrencyLRD PaymentTransactionCurrencyEnum = "LRD"

	// PaymentTransactionCurrencyLSL captures enum value "LSL"
	PaymentTransactionCurrencyLSL PaymentTransactionCurrencyEnum = "LSL"

	// PaymentTransactionCurrencyLTL captures enum value "LTL"
	PaymentTransactionCurrencyLTL PaymentTransactionCurrencyEnum = "LTL"

	// PaymentTransactionCurrencyLVL captures enum value "LVL"
	PaymentTransactionCurrencyLVL PaymentTransactionCurrencyEnum = "LVL"

	// PaymentTransactionCurrencyLYD captures enum value "LYD"
	PaymentTransactionCurrencyLYD PaymentTransactionCurrencyEnum = "LYD"

	// PaymentTransactionCurrencyMAD captures enum value "MAD"
	PaymentTransactionCurrencyMAD PaymentTransactionCurrencyEnum = "MAD"

	// PaymentTransactionCurrencyMDL captures enum value "MDL"
	PaymentTransactionCurrencyMDL PaymentTransactionCurrencyEnum = "MDL"

	// PaymentTransactionCurrencyMGA captures enum value "MGA"
	PaymentTransactionCurrencyMGA PaymentTransactionCurrencyEnum = "MGA"

	// PaymentTransactionCurrencyMKD captures enum value "MKD"
	PaymentTransactionCurrencyMKD PaymentTransactionCurrencyEnum = "MKD"

	// PaymentTransactionCurrencyMMK captures enum value "MMK"
	PaymentTransactionCurrencyMMK PaymentTransactionCurrencyEnum = "MMK"

	// PaymentTransactionCurrencyMNT captures enum value "MNT"
	PaymentTransactionCurrencyMNT PaymentTransactionCurrencyEnum = "MNT"

	// PaymentTransactionCurrencyMOP captures enum value "MOP"
	PaymentTransactionCurrencyMOP PaymentTransactionCurrencyEnum = "MOP"

	// PaymentTransactionCurrencyMRO captures enum value "MRO"
	PaymentTransactionCurrencyMRO PaymentTransactionCurrencyEnum = "MRO"

	// PaymentTransactionCurrencyMUR captures enum value "MUR"
	PaymentTransactionCurrencyMUR PaymentTransactionCurrencyEnum = "MUR"

	// PaymentTransactionCurrencyMVR captures enum value "MVR"
	PaymentTransactionCurrencyMVR PaymentTransactionCurrencyEnum = "MVR"

	// PaymentTransactionCurrencyMWK captures enum value "MWK"
	PaymentTransactionCurrencyMWK PaymentTransactionCurrencyEnum = "MWK"

	// PaymentTransactionCurrencyMXN captures enum value "MXN"
	PaymentTransactionCurrencyMXN PaymentTransactionCurrencyEnum = "MXN"

	// PaymentTransactionCurrencyMYR captures enum value "MYR"
	PaymentTransactionCurrencyMYR PaymentTransactionCurrencyEnum = "MYR"

	// PaymentTransactionCurrencyMZN captures enum value "MZN"
	PaymentTransactionCurrencyMZN PaymentTransactionCurrencyEnum = "MZN"

	// PaymentTransactionCurrencyNAD captures enum value "NAD"
	PaymentTransactionCurrencyNAD PaymentTransactionCurrencyEnum = "NAD"

	// PaymentTransactionCurrencyNGN captures enum value "NGN"
	PaymentTransactionCurrencyNGN PaymentTransactionCurrencyEnum = "NGN"

	// PaymentTransactionCurrencyNIO captures enum value "NIO"
	PaymentTransactionCurrencyNIO PaymentTransactionCurrencyEnum = "NIO"

	// PaymentTransactionCurrencyNOK captures enum value "NOK"
	PaymentTransactionCurrencyNOK PaymentTransactionCurrencyEnum = "NOK"

	// PaymentTransactionCurrencyNPR captures enum value "NPR"
	PaymentTransactionCurrencyNPR PaymentTransactionCurrencyEnum = "NPR"

	// PaymentTransactionCurrencyNZD captures enum value "NZD"
	PaymentTransactionCurrencyNZD PaymentTransactionCurrencyEnum = "NZD"

	// PaymentTransactionCurrencyOMR captures enum value "OMR"
	PaymentTransactionCurrencyOMR PaymentTransactionCurrencyEnum = "OMR"

	// PaymentTransactionCurrencyPAB captures enum value "PAB"
	PaymentTransactionCurrencyPAB PaymentTransactionCurrencyEnum = "PAB"

	// PaymentTransactionCurrencyPEN captures enum value "PEN"
	PaymentTransactionCurrencyPEN PaymentTransactionCurrencyEnum = "PEN"

	// PaymentTransactionCurrencyPGK captures enum value "PGK"
	PaymentTransactionCurrencyPGK PaymentTransactionCurrencyEnum = "PGK"

	// PaymentTransactionCurrencyPHP captures enum value "PHP"
	PaymentTransactionCurrencyPHP PaymentTransactionCurrencyEnum = "PHP"

	// PaymentTransactionCurrencyPKR captures enum value "PKR"
	PaymentTransactionCurrencyPKR PaymentTransactionCurrencyEnum = "PKR"

	// PaymentTransactionCurrencyPLN captures enum value "PLN"
	PaymentTransactionCurrencyPLN PaymentTransactionCurrencyEnum = "PLN"

	// PaymentTransactionCurrencyPYG captures enum value "PYG"
	PaymentTransactionCurrencyPYG PaymentTransactionCurrencyEnum = "PYG"

	// PaymentTransactionCurrencyQAR captures enum value "QAR"
	PaymentTransactionCurrencyQAR PaymentTransactionCurrencyEnum = "QAR"

	// PaymentTransactionCurrencyRON captures enum value "RON"
	PaymentTransactionCurrencyRON PaymentTransactionCurrencyEnum = "RON"

	// PaymentTransactionCurrencyRSD captures enum value "RSD"
	PaymentTransactionCurrencyRSD PaymentTransactionCurrencyEnum = "RSD"

	// PaymentTransactionCurrencyRUB captures enum value "RUB"
	PaymentTransactionCurrencyRUB PaymentTransactionCurrencyEnum = "RUB"

	// PaymentTransactionCurrencyRWF captures enum value "RWF"
	PaymentTransactionCurrencyRWF PaymentTransactionCurrencyEnum = "RWF"

	// PaymentTransactionCurrencySAR captures enum value "SAR"
	PaymentTransactionCurrencySAR PaymentTransactionCurrencyEnum = "SAR"

	// PaymentTransactionCurrencySBD captures enum value "SBD"
	PaymentTransactionCurrencySBD PaymentTransactionCurrencyEnum = "SBD"

	// PaymentTransactionCurrencySCR captures enum value "SCR"
	PaymentTransactionCurrencySCR PaymentTransactionCurrencyEnum = "SCR"

	// PaymentTransactionCurrencySDG captures enum value "SDG"
	PaymentTransactionCurrencySDG PaymentTransactionCurrencyEnum = "SDG"

	// PaymentTransactionCurrencySEK captures enum value "SEK"
	PaymentTransactionCurrencySEK PaymentTransactionCurrencyEnum = "SEK"

	// PaymentTransactionCurrencySGD captures enum value "SGD"
	PaymentTransactionCurrencySGD PaymentTransactionCurrencyEnum = "SGD"

	// PaymentTransactionCurrencySHP captures enum value "SHP"
	PaymentTransactionCurrencySHP PaymentTransactionCurrencyEnum = "SHP"

	// PaymentTransactionCurrencySLL captures enum value "SLL"
	PaymentTransactionCurrencySLL PaymentTransactionCurrencyEnum = "SLL"

	// PaymentTransactionCurrencySOS captures enum value "SOS"
	PaymentTransactionCurrencySOS PaymentTransactionCurrencyEnum = "SOS"

	// PaymentTransactionCurrencySPL captures enum value "SPL"
	PaymentTransactionCurrencySPL PaymentTransactionCurrencyEnum = "SPL"

	// PaymentTransactionCurrencySRD captures enum value "SRD"
	PaymentTransactionCurrencySRD PaymentTransactionCurrencyEnum = "SRD"

	// PaymentTransactionCurrencySTD captures enum value "STD"
	PaymentTransactionCurrencySTD PaymentTransactionCurrencyEnum = "STD"

	// PaymentTransactionCurrencySVC captures enum value "SVC"
	PaymentTransactionCurrencySVC PaymentTransactionCurrencyEnum = "SVC"

	// PaymentTransactionCurrencySYP captures enum value "SYP"
	PaymentTransactionCurrencySYP PaymentTransactionCurrencyEnum = "SYP"

	// PaymentTransactionCurrencySZL captures enum value "SZL"
	PaymentTransactionCurrencySZL PaymentTransactionCurrencyEnum = "SZL"

	// PaymentTransactionCurrencyTHB captures enum value "THB"
	PaymentTransactionCurrencyTHB PaymentTransactionCurrencyEnum = "THB"

	// PaymentTransactionCurrencyTJS captures enum value "TJS"
	PaymentTransactionCurrencyTJS PaymentTransactionCurrencyEnum = "TJS"

	// PaymentTransactionCurrencyTMT captures enum value "TMT"
	PaymentTransactionCurrencyTMT PaymentTransactionCurrencyEnum = "TMT"

	// PaymentTransactionCurrencyTND captures enum value "TND"
	PaymentTransactionCurrencyTND PaymentTransactionCurrencyEnum = "TND"

	// PaymentTransactionCurrencyTOP captures enum value "TOP"
	PaymentTransactionCurrencyTOP PaymentTransactionCurrencyEnum = "TOP"

	// PaymentTransactionCurrencyTRY captures enum value "TRY"
	PaymentTransactionCurrencyTRY PaymentTransactionCurrencyEnum = "TRY"

	// PaymentTransactionCurrencyTTD captures enum value "TTD"
	PaymentTransactionCurrencyTTD PaymentTransactionCurrencyEnum = "TTD"

	// PaymentTransactionCurrencyTVD captures enum value "TVD"
	PaymentTransactionCurrencyTVD PaymentTransactionCurrencyEnum = "TVD"

	// PaymentTransactionCurrencyTWD captures enum value "TWD"
	PaymentTransactionCurrencyTWD PaymentTransactionCurrencyEnum = "TWD"

	// PaymentTransactionCurrencyTZS captures enum value "TZS"
	PaymentTransactionCurrencyTZS PaymentTransactionCurrencyEnum = "TZS"

	// PaymentTransactionCurrencyUAH captures enum value "UAH"
	PaymentTransactionCurrencyUAH PaymentTransactionCurrencyEnum = "UAH"

	// PaymentTransactionCurrencyUGX captures enum value "UGX"
	PaymentTransactionCurrencyUGX PaymentTransactionCurrencyEnum = "UGX"

	// PaymentTransactionCurrencyUSD captures enum value "USD"
	PaymentTransactionCurrencyUSD PaymentTransactionCurrencyEnum = "USD"

	// PaymentTransactionCurrencyUYU captures enum value "UYU"
	PaymentTransactionCurrencyUYU PaymentTransactionCurrencyEnum = "UYU"

	// PaymentTransactionCurrencyUZS captures enum value "UZS"
	PaymentTransactionCurrencyUZS PaymentTransactionCurrencyEnum = "UZS"

	// PaymentTransactionCurrencyVEF captures enum value "VEF"
	PaymentTransactionCurrencyVEF PaymentTransactionCurrencyEnum = "VEF"

	// PaymentTransactionCurrencyVND captures enum value "VND"
	PaymentTransactionCurrencyVND PaymentTransactionCurrencyEnum = "VND"

	// PaymentTransactionCurrencyVUV captures enum value "VUV"
	PaymentTransactionCurrencyVUV PaymentTransactionCurrencyEnum = "VUV"

	// PaymentTransactionCurrencyWST captures enum value "WST"
	PaymentTransactionCurrencyWST PaymentTransactionCurrencyEnum = "WST"

	// PaymentTransactionCurrencyXAF captures enum value "XAF"
	PaymentTransactionCurrencyXAF PaymentTransactionCurrencyEnum = "XAF"

	// PaymentTransactionCurrencyXCD captures enum value "XCD"
	PaymentTransactionCurrencyXCD PaymentTransactionCurrencyEnum = "XCD"

	// PaymentTransactionCurrencyXDR captures enum value "XDR"
	PaymentTransactionCurrencyXDR PaymentTransactionCurrencyEnum = "XDR"

	// PaymentTransactionCurrencyXOF captures enum value "XOF"
	PaymentTransactionCurrencyXOF PaymentTransactionCurrencyEnum = "XOF"

	// PaymentTransactionCurrencyXPF captures enum value "XPF"
	PaymentTransactionCurrencyXPF PaymentTransactionCurrencyEnum = "XPF"

	// PaymentTransactionCurrencyYER captures enum value "YER"
	PaymentTransactionCurrencyYER PaymentTransactionCurrencyEnum = "YER"

	// PaymentTransactionCurrencyZAR captures enum value "ZAR"
	PaymentTransactionCurrencyZAR PaymentTransactionCurrencyEnum = "ZAR"

	// PaymentTransactionCurrencyZMW captures enum value "ZMW"
	PaymentTransactionCurrencyZMW PaymentTransactionCurrencyEnum = "ZMW"

	// PaymentTransactionCurrencyZWD captures enum value "ZWD"
	PaymentTransactionCurrencyZWD PaymentTransactionCurrencyEnum = "ZWD"

	// PaymentTransactionCurrencyBTC captures enum value "BTC"
	PaymentTransactionCurrencyBTC PaymentTransactionCurrencyEnum = "BTC"
)

var PaymentTransactionCurrencyEnumValues = []string{
	"AED",
	"AFN",
	"ALL",
	"AMD",
	"ANG",
	"AOA",
	"ARS",
	"AUD",
	"AWG",
	"AZN",
	"BAM",
	"BBD",
	"BDT",
	"BGN",
	"BHD",
	"BIF",
	"BMD",
	"BND",
	"BOB",
	"BRL",
	"BSD",
	"BTN",
	"BWP",
	"BYR",
	"BZD",
	"CAD",
	"CDF",
	"CHF",
	"CLP",
	"CNY",
	"COP",
	"CRC",
	"CUC",
	"CUP",
	"CVE",
	"CZK",
	"DJF",
	"DKK",
	"DOP",
	"DZD",
	"EGP",
	"ERN",
	"ETB",
	"EUR",
	"FJD",
	"FKP",
	"GBP",
	"GEL",
	"GGP",
	"GHS",
	"GIP",
	"GMD",
	"GNF",
	"GTQ",
	"GYD",
	"HKD",
	"HNL",
	"HRK",
	"HTG",
	"HUF",
	"IDR",
	"ILS",
	"IMP",
	"INR",
	"IQD",
	"IRR",
	"ISK",
	"JEP",
	"JMD",
	"JOD",
	"JPY",
	"KES",
	"KGS",
	"KHR",
	"KMF",
	"KPW",
	"KRW",
	"KWD",
	"KYD",
	"KZT",
	"LAK",
	"LBP",
	"LKR",
	"LRD",
	"LSL",
	"LTL",
	"LVL",
	"LYD",
	"MAD",
	"MDL",
	"MGA",
	"MKD",
	"MMK",
	"MNT",
	"MOP",
	"MRO",
	"MUR",
	"MVR",
	"MWK",
	"MXN",
	"MYR",
	"MZN",
	"NAD",
	"NGN",
	"NIO",
	"NOK",
	"NPR",
	"NZD",
	"OMR",
	"PAB",
	"PEN",
	"PGK",
	"PHP",
	"PKR",
	"PLN",
	"PYG",
	"QAR",
	"RON",
	"RSD",
	"RUB",
	"RWF",
	"SAR",
	"SBD",
	"SCR",
	"SDG",
	"SEK",
	"SGD",
	"SHP",
	"SLL",
	"SOS",
	"SPL",
	"SRD",
	"STD",
	"SVC",
	"SYP",
	"SZL",
	"THB",
	"TJS",
	"TMT",
	"TND",
	"TOP",
	"TRY",
	"TTD",
	"TVD",
	"TWD",
	"TZS",
	"UAH",
	"UGX",
	"USD",
	"UYU",
	"UZS",
	"VEF",
	"VND",
	"VUV",
	"WST",
	"XAF",
	"XCD",
	"XDR",
	"XOF",
	"XPF",
	"YER",
	"ZAR",
	"ZMW",
	"ZWD",
	"BTC",
}

func (e PaymentTransactionCurrencyEnum) IsValid() bool {
	for _, v := range PaymentTransactionCurrencyEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *PaymentTransaction) validateCurrencyEnum(path, location string, value PaymentTransactionCurrencyEnum) error {
	if err := validate.Enum(path, location, value, paymentTransactionTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTransaction) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *PaymentTransaction) validateEffectiveDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveDate", "body", "date-time", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentTransaction) validatePaymentID(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentID) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentId", "body", "uuid", m.PaymentID.String(), formats); err != nil {
		return err
	}

	return nil
}

var paymentTransactionTypeProcessedCurrencyPropEnum []interface{}

func init() {
	var res []PaymentTransactionProcessedCurrencyEnum
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTransactionTypeProcessedCurrencyPropEnum = append(paymentTransactionTypeProcessedCurrencyPropEnum, v)
	}
}

type PaymentTransactionProcessedCurrencyEnum string

const (

	// PaymentTransactionProcessedCurrencyAED captures enum value "AED"
	PaymentTransactionProcessedCurrencyAED PaymentTransactionProcessedCurrencyEnum = "AED"

	// PaymentTransactionProcessedCurrencyAFN captures enum value "AFN"
	PaymentTransactionProcessedCurrencyAFN PaymentTransactionProcessedCurrencyEnum = "AFN"

	// PaymentTransactionProcessedCurrencyALL captures enum value "ALL"
	PaymentTransactionProcessedCurrencyALL PaymentTransactionProcessedCurrencyEnum = "ALL"

	// PaymentTransactionProcessedCurrencyAMD captures enum value "AMD"
	PaymentTransactionProcessedCurrencyAMD PaymentTransactionProcessedCurrencyEnum = "AMD"

	// PaymentTransactionProcessedCurrencyANG captures enum value "ANG"
	PaymentTransactionProcessedCurrencyANG PaymentTransactionProcessedCurrencyEnum = "ANG"

	// PaymentTransactionProcessedCurrencyAOA captures enum value "AOA"
	PaymentTransactionProcessedCurrencyAOA PaymentTransactionProcessedCurrencyEnum = "AOA"

	// PaymentTransactionProcessedCurrencyARS captures enum value "ARS"
	PaymentTransactionProcessedCurrencyARS PaymentTransactionProcessedCurrencyEnum = "ARS"

	// PaymentTransactionProcessedCurrencyAUD captures enum value "AUD"
	PaymentTransactionProcessedCurrencyAUD PaymentTransactionProcessedCurrencyEnum = "AUD"

	// PaymentTransactionProcessedCurrencyAWG captures enum value "AWG"
	PaymentTransactionProcessedCurrencyAWG PaymentTransactionProcessedCurrencyEnum = "AWG"

	// PaymentTransactionProcessedCurrencyAZN captures enum value "AZN"
	PaymentTransactionProcessedCurrencyAZN PaymentTransactionProcessedCurrencyEnum = "AZN"

	// PaymentTransactionProcessedCurrencyBAM captures enum value "BAM"
	PaymentTransactionProcessedCurrencyBAM PaymentTransactionProcessedCurrencyEnum = "BAM"

	// PaymentTransactionProcessedCurrencyBBD captures enum value "BBD"
	PaymentTransactionProcessedCurrencyBBD PaymentTransactionProcessedCurrencyEnum = "BBD"

	// PaymentTransactionProcessedCurrencyBDT captures enum value "BDT"
	PaymentTransactionProcessedCurrencyBDT PaymentTransactionProcessedCurrencyEnum = "BDT"

	// PaymentTransactionProcessedCurrencyBGN captures enum value "BGN"
	PaymentTransactionProcessedCurrencyBGN PaymentTransactionProcessedCurrencyEnum = "BGN"

	// PaymentTransactionProcessedCurrencyBHD captures enum value "BHD"
	PaymentTransactionProcessedCurrencyBHD PaymentTransactionProcessedCurrencyEnum = "BHD"

	// PaymentTransactionProcessedCurrencyBIF captures enum value "BIF"
	PaymentTransactionProcessedCurrencyBIF PaymentTransactionProcessedCurrencyEnum = "BIF"

	// PaymentTransactionProcessedCurrencyBMD captures enum value "BMD"
	PaymentTransactionProcessedCurrencyBMD PaymentTransactionProcessedCurrencyEnum = "BMD"

	// PaymentTransactionProcessedCurrencyBND captures enum value "BND"
	PaymentTransactionProcessedCurrencyBND PaymentTransactionProcessedCurrencyEnum = "BND"

	// PaymentTransactionProcessedCurrencyBOB captures enum value "BOB"
	PaymentTransactionProcessedCurrencyBOB PaymentTransactionProcessedCurrencyEnum = "BOB"

	// PaymentTransactionProcessedCurrencyBRL captures enum value "BRL"
	PaymentTransactionProcessedCurrencyBRL PaymentTransactionProcessedCurrencyEnum = "BRL"

	// PaymentTransactionProcessedCurrencyBSD captures enum value "BSD"
	PaymentTransactionProcessedCurrencyBSD PaymentTransactionProcessedCurrencyEnum = "BSD"

	// PaymentTransactionProcessedCurrencyBTN captures enum value "BTN"
	PaymentTransactionProcessedCurrencyBTN PaymentTransactionProcessedCurrencyEnum = "BTN"

	// PaymentTransactionProcessedCurrencyBWP captures enum value "BWP"
	PaymentTransactionProcessedCurrencyBWP PaymentTransactionProcessedCurrencyEnum = "BWP"

	// PaymentTransactionProcessedCurrencyBYR captures enum value "BYR"
	PaymentTransactionProcessedCurrencyBYR PaymentTransactionProcessedCurrencyEnum = "BYR"

	// PaymentTransactionProcessedCurrencyBZD captures enum value "BZD"
	PaymentTransactionProcessedCurrencyBZD PaymentTransactionProcessedCurrencyEnum = "BZD"

	// PaymentTransactionProcessedCurrencyCAD captures enum value "CAD"
	PaymentTransactionProcessedCurrencyCAD PaymentTransactionProcessedCurrencyEnum = "CAD"

	// PaymentTransactionProcessedCurrencyCDF captures enum value "CDF"
	PaymentTransactionProcessedCurrencyCDF PaymentTransactionProcessedCurrencyEnum = "CDF"

	// PaymentTransactionProcessedCurrencyCHF captures enum value "CHF"
	PaymentTransactionProcessedCurrencyCHF PaymentTransactionProcessedCurrencyEnum = "CHF"

	// PaymentTransactionProcessedCurrencyCLP captures enum value "CLP"
	PaymentTransactionProcessedCurrencyCLP PaymentTransactionProcessedCurrencyEnum = "CLP"

	// PaymentTransactionProcessedCurrencyCNY captures enum value "CNY"
	PaymentTransactionProcessedCurrencyCNY PaymentTransactionProcessedCurrencyEnum = "CNY"

	// PaymentTransactionProcessedCurrencyCOP captures enum value "COP"
	PaymentTransactionProcessedCurrencyCOP PaymentTransactionProcessedCurrencyEnum = "COP"

	// PaymentTransactionProcessedCurrencyCRC captures enum value "CRC"
	PaymentTransactionProcessedCurrencyCRC PaymentTransactionProcessedCurrencyEnum = "CRC"

	// PaymentTransactionProcessedCurrencyCUC captures enum value "CUC"
	PaymentTransactionProcessedCurrencyCUC PaymentTransactionProcessedCurrencyEnum = "CUC"

	// PaymentTransactionProcessedCurrencyCUP captures enum value "CUP"
	PaymentTransactionProcessedCurrencyCUP PaymentTransactionProcessedCurrencyEnum = "CUP"

	// PaymentTransactionProcessedCurrencyCVE captures enum value "CVE"
	PaymentTransactionProcessedCurrencyCVE PaymentTransactionProcessedCurrencyEnum = "CVE"

	// PaymentTransactionProcessedCurrencyCZK captures enum value "CZK"
	PaymentTransactionProcessedCurrencyCZK PaymentTransactionProcessedCurrencyEnum = "CZK"

	// PaymentTransactionProcessedCurrencyDJF captures enum value "DJF"
	PaymentTransactionProcessedCurrencyDJF PaymentTransactionProcessedCurrencyEnum = "DJF"

	// PaymentTransactionProcessedCurrencyDKK captures enum value "DKK"
	PaymentTransactionProcessedCurrencyDKK PaymentTransactionProcessedCurrencyEnum = "DKK"

	// PaymentTransactionProcessedCurrencyDOP captures enum value "DOP"
	PaymentTransactionProcessedCurrencyDOP PaymentTransactionProcessedCurrencyEnum = "DOP"

	// PaymentTransactionProcessedCurrencyDZD captures enum value "DZD"
	PaymentTransactionProcessedCurrencyDZD PaymentTransactionProcessedCurrencyEnum = "DZD"

	// PaymentTransactionProcessedCurrencyEGP captures enum value "EGP"
	PaymentTransactionProcessedCurrencyEGP PaymentTransactionProcessedCurrencyEnum = "EGP"

	// PaymentTransactionProcessedCurrencyERN captures enum value "ERN"
	PaymentTransactionProcessedCurrencyERN PaymentTransactionProcessedCurrencyEnum = "ERN"

	// PaymentTransactionProcessedCurrencyETB captures enum value "ETB"
	PaymentTransactionProcessedCurrencyETB PaymentTransactionProcessedCurrencyEnum = "ETB"

	// PaymentTransactionProcessedCurrencyEUR captures enum value "EUR"
	PaymentTransactionProcessedCurrencyEUR PaymentTransactionProcessedCurrencyEnum = "EUR"

	// PaymentTransactionProcessedCurrencyFJD captures enum value "FJD"
	PaymentTransactionProcessedCurrencyFJD PaymentTransactionProcessedCurrencyEnum = "FJD"

	// PaymentTransactionProcessedCurrencyFKP captures enum value "FKP"
	PaymentTransactionProcessedCurrencyFKP PaymentTransactionProcessedCurrencyEnum = "FKP"

	// PaymentTransactionProcessedCurrencyGBP captures enum value "GBP"
	PaymentTransactionProcessedCurrencyGBP PaymentTransactionProcessedCurrencyEnum = "GBP"

	// PaymentTransactionProcessedCurrencyGEL captures enum value "GEL"
	PaymentTransactionProcessedCurrencyGEL PaymentTransactionProcessedCurrencyEnum = "GEL"

	// PaymentTransactionProcessedCurrencyGGP captures enum value "GGP"
	PaymentTransactionProcessedCurrencyGGP PaymentTransactionProcessedCurrencyEnum = "GGP"

	// PaymentTransactionProcessedCurrencyGHS captures enum value "GHS"
	PaymentTransactionProcessedCurrencyGHS PaymentTransactionProcessedCurrencyEnum = "GHS"

	// PaymentTransactionProcessedCurrencyGIP captures enum value "GIP"
	PaymentTransactionProcessedCurrencyGIP PaymentTransactionProcessedCurrencyEnum = "GIP"

	// PaymentTransactionProcessedCurrencyGMD captures enum value "GMD"
	PaymentTransactionProcessedCurrencyGMD PaymentTransactionProcessedCurrencyEnum = "GMD"

	// PaymentTransactionProcessedCurrencyGNF captures enum value "GNF"
	PaymentTransactionProcessedCurrencyGNF PaymentTransactionProcessedCurrencyEnum = "GNF"

	// PaymentTransactionProcessedCurrencyGTQ captures enum value "GTQ"
	PaymentTransactionProcessedCurrencyGTQ PaymentTransactionProcessedCurrencyEnum = "GTQ"

	// PaymentTransactionProcessedCurrencyGYD captures enum value "GYD"
	PaymentTransactionProcessedCurrencyGYD PaymentTransactionProcessedCurrencyEnum = "GYD"

	// PaymentTransactionProcessedCurrencyHKD captures enum value "HKD"
	PaymentTransactionProcessedCurrencyHKD PaymentTransactionProcessedCurrencyEnum = "HKD"

	// PaymentTransactionProcessedCurrencyHNL captures enum value "HNL"
	PaymentTransactionProcessedCurrencyHNL PaymentTransactionProcessedCurrencyEnum = "HNL"

	// PaymentTransactionProcessedCurrencyHRK captures enum value "HRK"
	PaymentTransactionProcessedCurrencyHRK PaymentTransactionProcessedCurrencyEnum = "HRK"

	// PaymentTransactionProcessedCurrencyHTG captures enum value "HTG"
	PaymentTransactionProcessedCurrencyHTG PaymentTransactionProcessedCurrencyEnum = "HTG"

	// PaymentTransactionProcessedCurrencyHUF captures enum value "HUF"
	PaymentTransactionProcessedCurrencyHUF PaymentTransactionProcessedCurrencyEnum = "HUF"

	// PaymentTransactionProcessedCurrencyIDR captures enum value "IDR"
	PaymentTransactionProcessedCurrencyIDR PaymentTransactionProcessedCurrencyEnum = "IDR"

	// PaymentTransactionProcessedCurrencyILS captures enum value "ILS"
	PaymentTransactionProcessedCurrencyILS PaymentTransactionProcessedCurrencyEnum = "ILS"

	// PaymentTransactionProcessedCurrencyIMP captures enum value "IMP"
	PaymentTransactionProcessedCurrencyIMP PaymentTransactionProcessedCurrencyEnum = "IMP"

	// PaymentTransactionProcessedCurrencyINR captures enum value "INR"
	PaymentTransactionProcessedCurrencyINR PaymentTransactionProcessedCurrencyEnum = "INR"

	// PaymentTransactionProcessedCurrencyIQD captures enum value "IQD"
	PaymentTransactionProcessedCurrencyIQD PaymentTransactionProcessedCurrencyEnum = "IQD"

	// PaymentTransactionProcessedCurrencyIRR captures enum value "IRR"
	PaymentTransactionProcessedCurrencyIRR PaymentTransactionProcessedCurrencyEnum = "IRR"

	// PaymentTransactionProcessedCurrencyISK captures enum value "ISK"
	PaymentTransactionProcessedCurrencyISK PaymentTransactionProcessedCurrencyEnum = "ISK"

	// PaymentTransactionProcessedCurrencyJEP captures enum value "JEP"
	PaymentTransactionProcessedCurrencyJEP PaymentTransactionProcessedCurrencyEnum = "JEP"

	// PaymentTransactionProcessedCurrencyJMD captures enum value "JMD"
	PaymentTransactionProcessedCurrencyJMD PaymentTransactionProcessedCurrencyEnum = "JMD"

	// PaymentTransactionProcessedCurrencyJOD captures enum value "JOD"
	PaymentTransactionProcessedCurrencyJOD PaymentTransactionProcessedCurrencyEnum = "JOD"

	// PaymentTransactionProcessedCurrencyJPY captures enum value "JPY"
	PaymentTransactionProcessedCurrencyJPY PaymentTransactionProcessedCurrencyEnum = "JPY"

	// PaymentTransactionProcessedCurrencyKES captures enum value "KES"
	PaymentTransactionProcessedCurrencyKES PaymentTransactionProcessedCurrencyEnum = "KES"

	// PaymentTransactionProcessedCurrencyKGS captures enum value "KGS"
	PaymentTransactionProcessedCurrencyKGS PaymentTransactionProcessedCurrencyEnum = "KGS"

	// PaymentTransactionProcessedCurrencyKHR captures enum value "KHR"
	PaymentTransactionProcessedCurrencyKHR PaymentTransactionProcessedCurrencyEnum = "KHR"

	// PaymentTransactionProcessedCurrencyKMF captures enum value "KMF"
	PaymentTransactionProcessedCurrencyKMF PaymentTransactionProcessedCurrencyEnum = "KMF"

	// PaymentTransactionProcessedCurrencyKPW captures enum value "KPW"
	PaymentTransactionProcessedCurrencyKPW PaymentTransactionProcessedCurrencyEnum = "KPW"

	// PaymentTransactionProcessedCurrencyKRW captures enum value "KRW"
	PaymentTransactionProcessedCurrencyKRW PaymentTransactionProcessedCurrencyEnum = "KRW"

	// PaymentTransactionProcessedCurrencyKWD captures enum value "KWD"
	PaymentTransactionProcessedCurrencyKWD PaymentTransactionProcessedCurrencyEnum = "KWD"

	// PaymentTransactionProcessedCurrencyKYD captures enum value "KYD"
	PaymentTransactionProcessedCurrencyKYD PaymentTransactionProcessedCurrencyEnum = "KYD"

	// PaymentTransactionProcessedCurrencyKZT captures enum value "KZT"
	PaymentTransactionProcessedCurrencyKZT PaymentTransactionProcessedCurrencyEnum = "KZT"

	// PaymentTransactionProcessedCurrencyLAK captures enum value "LAK"
	PaymentTransactionProcessedCurrencyLAK PaymentTransactionProcessedCurrencyEnum = "LAK"

	// PaymentTransactionProcessedCurrencyLBP captures enum value "LBP"
	PaymentTransactionProcessedCurrencyLBP PaymentTransactionProcessedCurrencyEnum = "LBP"

	// PaymentTransactionProcessedCurrencyLKR captures enum value "LKR"
	PaymentTransactionProcessedCurrencyLKR PaymentTransactionProcessedCurrencyEnum = "LKR"

	// PaymentTransactionProcessedCurrencyLRD captures enum value "LRD"
	PaymentTransactionProcessedCurrencyLRD PaymentTransactionProcessedCurrencyEnum = "LRD"

	// PaymentTransactionProcessedCurrencyLSL captures enum value "LSL"
	PaymentTransactionProcessedCurrencyLSL PaymentTransactionProcessedCurrencyEnum = "LSL"

	// PaymentTransactionProcessedCurrencyLTL captures enum value "LTL"
	PaymentTransactionProcessedCurrencyLTL PaymentTransactionProcessedCurrencyEnum = "LTL"

	// PaymentTransactionProcessedCurrencyLVL captures enum value "LVL"
	PaymentTransactionProcessedCurrencyLVL PaymentTransactionProcessedCurrencyEnum = "LVL"

	// PaymentTransactionProcessedCurrencyLYD captures enum value "LYD"
	PaymentTransactionProcessedCurrencyLYD PaymentTransactionProcessedCurrencyEnum = "LYD"

	// PaymentTransactionProcessedCurrencyMAD captures enum value "MAD"
	PaymentTransactionProcessedCurrencyMAD PaymentTransactionProcessedCurrencyEnum = "MAD"

	// PaymentTransactionProcessedCurrencyMDL captures enum value "MDL"
	PaymentTransactionProcessedCurrencyMDL PaymentTransactionProcessedCurrencyEnum = "MDL"

	// PaymentTransactionProcessedCurrencyMGA captures enum value "MGA"
	PaymentTransactionProcessedCurrencyMGA PaymentTransactionProcessedCurrencyEnum = "MGA"

	// PaymentTransactionProcessedCurrencyMKD captures enum value "MKD"
	PaymentTransactionProcessedCurrencyMKD PaymentTransactionProcessedCurrencyEnum = "MKD"

	// PaymentTransactionProcessedCurrencyMMK captures enum value "MMK"
	PaymentTransactionProcessedCurrencyMMK PaymentTransactionProcessedCurrencyEnum = "MMK"

	// PaymentTransactionProcessedCurrencyMNT captures enum value "MNT"
	PaymentTransactionProcessedCurrencyMNT PaymentTransactionProcessedCurrencyEnum = "MNT"

	// PaymentTransactionProcessedCurrencyMOP captures enum value "MOP"
	PaymentTransactionProcessedCurrencyMOP PaymentTransactionProcessedCurrencyEnum = "MOP"

	// PaymentTransactionProcessedCurrencyMRO captures enum value "MRO"
	PaymentTransactionProcessedCurrencyMRO PaymentTransactionProcessedCurrencyEnum = "MRO"

	// PaymentTransactionProcessedCurrencyMUR captures enum value "MUR"
	PaymentTransactionProcessedCurrencyMUR PaymentTransactionProcessedCurrencyEnum = "MUR"

	// PaymentTransactionProcessedCurrencyMVR captures enum value "MVR"
	PaymentTransactionProcessedCurrencyMVR PaymentTransactionProcessedCurrencyEnum = "MVR"

	// PaymentTransactionProcessedCurrencyMWK captures enum value "MWK"
	PaymentTransactionProcessedCurrencyMWK PaymentTransactionProcessedCurrencyEnum = "MWK"

	// PaymentTransactionProcessedCurrencyMXN captures enum value "MXN"
	PaymentTransactionProcessedCurrencyMXN PaymentTransactionProcessedCurrencyEnum = "MXN"

	// PaymentTransactionProcessedCurrencyMYR captures enum value "MYR"
	PaymentTransactionProcessedCurrencyMYR PaymentTransactionProcessedCurrencyEnum = "MYR"

	// PaymentTransactionProcessedCurrencyMZN captures enum value "MZN"
	PaymentTransactionProcessedCurrencyMZN PaymentTransactionProcessedCurrencyEnum = "MZN"

	// PaymentTransactionProcessedCurrencyNAD captures enum value "NAD"
	PaymentTransactionProcessedCurrencyNAD PaymentTransactionProcessedCurrencyEnum = "NAD"

	// PaymentTransactionProcessedCurrencyNGN captures enum value "NGN"
	PaymentTransactionProcessedCurrencyNGN PaymentTransactionProcessedCurrencyEnum = "NGN"

	// PaymentTransactionProcessedCurrencyNIO captures enum value "NIO"
	PaymentTransactionProcessedCurrencyNIO PaymentTransactionProcessedCurrencyEnum = "NIO"

	// PaymentTransactionProcessedCurrencyNOK captures enum value "NOK"
	PaymentTransactionProcessedCurrencyNOK PaymentTransactionProcessedCurrencyEnum = "NOK"

	// PaymentTransactionProcessedCurrencyNPR captures enum value "NPR"
	PaymentTransactionProcessedCurrencyNPR PaymentTransactionProcessedCurrencyEnum = "NPR"

	// PaymentTransactionProcessedCurrencyNZD captures enum value "NZD"
	PaymentTransactionProcessedCurrencyNZD PaymentTransactionProcessedCurrencyEnum = "NZD"

	// PaymentTransactionProcessedCurrencyOMR captures enum value "OMR"
	PaymentTransactionProcessedCurrencyOMR PaymentTransactionProcessedCurrencyEnum = "OMR"

	// PaymentTransactionProcessedCurrencyPAB captures enum value "PAB"
	PaymentTransactionProcessedCurrencyPAB PaymentTransactionProcessedCurrencyEnum = "PAB"

	// PaymentTransactionProcessedCurrencyPEN captures enum value "PEN"
	PaymentTransactionProcessedCurrencyPEN PaymentTransactionProcessedCurrencyEnum = "PEN"

	// PaymentTransactionProcessedCurrencyPGK captures enum value "PGK"
	PaymentTransactionProcessedCurrencyPGK PaymentTransactionProcessedCurrencyEnum = "PGK"

	// PaymentTransactionProcessedCurrencyPHP captures enum value "PHP"
	PaymentTransactionProcessedCurrencyPHP PaymentTransactionProcessedCurrencyEnum = "PHP"

	// PaymentTransactionProcessedCurrencyPKR captures enum value "PKR"
	PaymentTransactionProcessedCurrencyPKR PaymentTransactionProcessedCurrencyEnum = "PKR"

	// PaymentTransactionProcessedCurrencyPLN captures enum value "PLN"
	PaymentTransactionProcessedCurrencyPLN PaymentTransactionProcessedCurrencyEnum = "PLN"

	// PaymentTransactionProcessedCurrencyPYG captures enum value "PYG"
	PaymentTransactionProcessedCurrencyPYG PaymentTransactionProcessedCurrencyEnum = "PYG"

	// PaymentTransactionProcessedCurrencyQAR captures enum value "QAR"
	PaymentTransactionProcessedCurrencyQAR PaymentTransactionProcessedCurrencyEnum = "QAR"

	// PaymentTransactionProcessedCurrencyRON captures enum value "RON"
	PaymentTransactionProcessedCurrencyRON PaymentTransactionProcessedCurrencyEnum = "RON"

	// PaymentTransactionProcessedCurrencyRSD captures enum value "RSD"
	PaymentTransactionProcessedCurrencyRSD PaymentTransactionProcessedCurrencyEnum = "RSD"

	// PaymentTransactionProcessedCurrencyRUB captures enum value "RUB"
	PaymentTransactionProcessedCurrencyRUB PaymentTransactionProcessedCurrencyEnum = "RUB"

	// PaymentTransactionProcessedCurrencyRWF captures enum value "RWF"
	PaymentTransactionProcessedCurrencyRWF PaymentTransactionProcessedCurrencyEnum = "RWF"

	// PaymentTransactionProcessedCurrencySAR captures enum value "SAR"
	PaymentTransactionProcessedCurrencySAR PaymentTransactionProcessedCurrencyEnum = "SAR"

	// PaymentTransactionProcessedCurrencySBD captures enum value "SBD"
	PaymentTransactionProcessedCurrencySBD PaymentTransactionProcessedCurrencyEnum = "SBD"

	// PaymentTransactionProcessedCurrencySCR captures enum value "SCR"
	PaymentTransactionProcessedCurrencySCR PaymentTransactionProcessedCurrencyEnum = "SCR"

	// PaymentTransactionProcessedCurrencySDG captures enum value "SDG"
	PaymentTransactionProcessedCurrencySDG PaymentTransactionProcessedCurrencyEnum = "SDG"

	// PaymentTransactionProcessedCurrencySEK captures enum value "SEK"
	PaymentTransactionProcessedCurrencySEK PaymentTransactionProcessedCurrencyEnum = "SEK"

	// PaymentTransactionProcessedCurrencySGD captures enum value "SGD"
	PaymentTransactionProcessedCurrencySGD PaymentTransactionProcessedCurrencyEnum = "SGD"

	// PaymentTransactionProcessedCurrencySHP captures enum value "SHP"
	PaymentTransactionProcessedCurrencySHP PaymentTransactionProcessedCurrencyEnum = "SHP"

	// PaymentTransactionProcessedCurrencySLL captures enum value "SLL"
	PaymentTransactionProcessedCurrencySLL PaymentTransactionProcessedCurrencyEnum = "SLL"

	// PaymentTransactionProcessedCurrencySOS captures enum value "SOS"
	PaymentTransactionProcessedCurrencySOS PaymentTransactionProcessedCurrencyEnum = "SOS"

	// PaymentTransactionProcessedCurrencySPL captures enum value "SPL"
	PaymentTransactionProcessedCurrencySPL PaymentTransactionProcessedCurrencyEnum = "SPL"

	// PaymentTransactionProcessedCurrencySRD captures enum value "SRD"
	PaymentTransactionProcessedCurrencySRD PaymentTransactionProcessedCurrencyEnum = "SRD"

	// PaymentTransactionProcessedCurrencySTD captures enum value "STD"
	PaymentTransactionProcessedCurrencySTD PaymentTransactionProcessedCurrencyEnum = "STD"

	// PaymentTransactionProcessedCurrencySVC captures enum value "SVC"
	PaymentTransactionProcessedCurrencySVC PaymentTransactionProcessedCurrencyEnum = "SVC"

	// PaymentTransactionProcessedCurrencySYP captures enum value "SYP"
	PaymentTransactionProcessedCurrencySYP PaymentTransactionProcessedCurrencyEnum = "SYP"

	// PaymentTransactionProcessedCurrencySZL captures enum value "SZL"
	PaymentTransactionProcessedCurrencySZL PaymentTransactionProcessedCurrencyEnum = "SZL"

	// PaymentTransactionProcessedCurrencyTHB captures enum value "THB"
	PaymentTransactionProcessedCurrencyTHB PaymentTransactionProcessedCurrencyEnum = "THB"

	// PaymentTransactionProcessedCurrencyTJS captures enum value "TJS"
	PaymentTransactionProcessedCurrencyTJS PaymentTransactionProcessedCurrencyEnum = "TJS"

	// PaymentTransactionProcessedCurrencyTMT captures enum value "TMT"
	PaymentTransactionProcessedCurrencyTMT PaymentTransactionProcessedCurrencyEnum = "TMT"

	// PaymentTransactionProcessedCurrencyTND captures enum value "TND"
	PaymentTransactionProcessedCurrencyTND PaymentTransactionProcessedCurrencyEnum = "TND"

	// PaymentTransactionProcessedCurrencyTOP captures enum value "TOP"
	PaymentTransactionProcessedCurrencyTOP PaymentTransactionProcessedCurrencyEnum = "TOP"

	// PaymentTransactionProcessedCurrencyTRY captures enum value "TRY"
	PaymentTransactionProcessedCurrencyTRY PaymentTransactionProcessedCurrencyEnum = "TRY"

	// PaymentTransactionProcessedCurrencyTTD captures enum value "TTD"
	PaymentTransactionProcessedCurrencyTTD PaymentTransactionProcessedCurrencyEnum = "TTD"

	// PaymentTransactionProcessedCurrencyTVD captures enum value "TVD"
	PaymentTransactionProcessedCurrencyTVD PaymentTransactionProcessedCurrencyEnum = "TVD"

	// PaymentTransactionProcessedCurrencyTWD captures enum value "TWD"
	PaymentTransactionProcessedCurrencyTWD PaymentTransactionProcessedCurrencyEnum = "TWD"

	// PaymentTransactionProcessedCurrencyTZS captures enum value "TZS"
	PaymentTransactionProcessedCurrencyTZS PaymentTransactionProcessedCurrencyEnum = "TZS"

	// PaymentTransactionProcessedCurrencyUAH captures enum value "UAH"
	PaymentTransactionProcessedCurrencyUAH PaymentTransactionProcessedCurrencyEnum = "UAH"

	// PaymentTransactionProcessedCurrencyUGX captures enum value "UGX"
	PaymentTransactionProcessedCurrencyUGX PaymentTransactionProcessedCurrencyEnum = "UGX"

	// PaymentTransactionProcessedCurrencyUSD captures enum value "USD"
	PaymentTransactionProcessedCurrencyUSD PaymentTransactionProcessedCurrencyEnum = "USD"

	// PaymentTransactionProcessedCurrencyUYU captures enum value "UYU"
	PaymentTransactionProcessedCurrencyUYU PaymentTransactionProcessedCurrencyEnum = "UYU"

	// PaymentTransactionProcessedCurrencyUZS captures enum value "UZS"
	PaymentTransactionProcessedCurrencyUZS PaymentTransactionProcessedCurrencyEnum = "UZS"

	// PaymentTransactionProcessedCurrencyVEF captures enum value "VEF"
	PaymentTransactionProcessedCurrencyVEF PaymentTransactionProcessedCurrencyEnum = "VEF"

	// PaymentTransactionProcessedCurrencyVND captures enum value "VND"
	PaymentTransactionProcessedCurrencyVND PaymentTransactionProcessedCurrencyEnum = "VND"

	// PaymentTransactionProcessedCurrencyVUV captures enum value "VUV"
	PaymentTransactionProcessedCurrencyVUV PaymentTransactionProcessedCurrencyEnum = "VUV"

	// PaymentTransactionProcessedCurrencyWST captures enum value "WST"
	PaymentTransactionProcessedCurrencyWST PaymentTransactionProcessedCurrencyEnum = "WST"

	// PaymentTransactionProcessedCurrencyXAF captures enum value "XAF"
	PaymentTransactionProcessedCurrencyXAF PaymentTransactionProcessedCurrencyEnum = "XAF"

	// PaymentTransactionProcessedCurrencyXCD captures enum value "XCD"
	PaymentTransactionProcessedCurrencyXCD PaymentTransactionProcessedCurrencyEnum = "XCD"

	// PaymentTransactionProcessedCurrencyXDR captures enum value "XDR"
	PaymentTransactionProcessedCurrencyXDR PaymentTransactionProcessedCurrencyEnum = "XDR"

	// PaymentTransactionProcessedCurrencyXOF captures enum value "XOF"
	PaymentTransactionProcessedCurrencyXOF PaymentTransactionProcessedCurrencyEnum = "XOF"

	// PaymentTransactionProcessedCurrencyXPF captures enum value "XPF"
	PaymentTransactionProcessedCurrencyXPF PaymentTransactionProcessedCurrencyEnum = "XPF"

	// PaymentTransactionProcessedCurrencyYER captures enum value "YER"
	PaymentTransactionProcessedCurrencyYER PaymentTransactionProcessedCurrencyEnum = "YER"

	// PaymentTransactionProcessedCurrencyZAR captures enum value "ZAR"
	PaymentTransactionProcessedCurrencyZAR PaymentTransactionProcessedCurrencyEnum = "ZAR"

	// PaymentTransactionProcessedCurrencyZMW captures enum value "ZMW"
	PaymentTransactionProcessedCurrencyZMW PaymentTransactionProcessedCurrencyEnum = "ZMW"

	// PaymentTransactionProcessedCurrencyZWD captures enum value "ZWD"
	PaymentTransactionProcessedCurrencyZWD PaymentTransactionProcessedCurrencyEnum = "ZWD"

	// PaymentTransactionProcessedCurrencyBTC captures enum value "BTC"
	PaymentTransactionProcessedCurrencyBTC PaymentTransactionProcessedCurrencyEnum = "BTC"
)

var PaymentTransactionProcessedCurrencyEnumValues = []string{
	"AED",
	"AFN",
	"ALL",
	"AMD",
	"ANG",
	"AOA",
	"ARS",
	"AUD",
	"AWG",
	"AZN",
	"BAM",
	"BBD",
	"BDT",
	"BGN",
	"BHD",
	"BIF",
	"BMD",
	"BND",
	"BOB",
	"BRL",
	"BSD",
	"BTN",
	"BWP",
	"BYR",
	"BZD",
	"CAD",
	"CDF",
	"CHF",
	"CLP",
	"CNY",
	"COP",
	"CRC",
	"CUC",
	"CUP",
	"CVE",
	"CZK",
	"DJF",
	"DKK",
	"DOP",
	"DZD",
	"EGP",
	"ERN",
	"ETB",
	"EUR",
	"FJD",
	"FKP",
	"GBP",
	"GEL",
	"GGP",
	"GHS",
	"GIP",
	"GMD",
	"GNF",
	"GTQ",
	"GYD",
	"HKD",
	"HNL",
	"HRK",
	"HTG",
	"HUF",
	"IDR",
	"ILS",
	"IMP",
	"INR",
	"IQD",
	"IRR",
	"ISK",
	"JEP",
	"JMD",
	"JOD",
	"JPY",
	"KES",
	"KGS",
	"KHR",
	"KMF",
	"KPW",
	"KRW",
	"KWD",
	"KYD",
	"KZT",
	"LAK",
	"LBP",
	"LKR",
	"LRD",
	"LSL",
	"LTL",
	"LVL",
	"LYD",
	"MAD",
	"MDL",
	"MGA",
	"MKD",
	"MMK",
	"MNT",
	"MOP",
	"MRO",
	"MUR",
	"MVR",
	"MWK",
	"MXN",
	"MYR",
	"MZN",
	"NAD",
	"NGN",
	"NIO",
	"NOK",
	"NPR",
	"NZD",
	"OMR",
	"PAB",
	"PEN",
	"PGK",
	"PHP",
	"PKR",
	"PLN",
	"PYG",
	"QAR",
	"RON",
	"RSD",
	"RUB",
	"RWF",
	"SAR",
	"SBD",
	"SCR",
	"SDG",
	"SEK",
	"SGD",
	"SHP",
	"SLL",
	"SOS",
	"SPL",
	"SRD",
	"STD",
	"SVC",
	"SYP",
	"SZL",
	"THB",
	"TJS",
	"TMT",
	"TND",
	"TOP",
	"TRY",
	"TTD",
	"TVD",
	"TWD",
	"TZS",
	"UAH",
	"UGX",
	"USD",
	"UYU",
	"UZS",
	"VEF",
	"VND",
	"VUV",
	"WST",
	"XAF",
	"XCD",
	"XDR",
	"XOF",
	"XPF",
	"YER",
	"ZAR",
	"ZMW",
	"ZWD",
	"BTC",
}

func (e PaymentTransactionProcessedCurrencyEnum) IsValid() bool {
	for _, v := range PaymentTransactionProcessedCurrencyEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *PaymentTransaction) validateProcessedCurrencyEnum(path, location string, value PaymentTransactionProcessedCurrencyEnum) error {
	if err := validate.Enum(path, location, value, paymentTransactionTypeProcessedCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTransaction) validateProcessedCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessedCurrency) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessedCurrencyEnum("processedCurrency", "body", m.ProcessedCurrency); err != nil {
		return err
	}

	return nil
}

func (m *PaymentTransaction) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var paymentTransactionTypeStatusPropEnum []interface{}

func init() {
	var res []PaymentTransactionStatusEnum
	if err := json.Unmarshal([]byte(`["SUCCESS","UNKNOWN","PENDING","PAYMENT_FAILURE","PLUGIN_FAILURE","PAYMENT_SYSTEM_OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTransactionTypeStatusPropEnum = append(paymentTransactionTypeStatusPropEnum, v)
	}
}

type PaymentTransactionStatusEnum string

const (

	// PaymentTransactionStatusSUCCESS captures enum value "SUCCESS"
	PaymentTransactionStatusSUCCESS PaymentTransactionStatusEnum = "SUCCESS"

	// PaymentTransactionStatusUNKNOWN captures enum value "UNKNOWN"
	PaymentTransactionStatusUNKNOWN PaymentTransactionStatusEnum = "UNKNOWN"

	// PaymentTransactionStatusPENDING captures enum value "PENDING"
	PaymentTransactionStatusPENDING PaymentTransactionStatusEnum = "PENDING"

	// PaymentTransactionStatusPAYMENTFAILURE captures enum value "PAYMENT_FAILURE"
	PaymentTransactionStatusPAYMENTFAILURE PaymentTransactionStatusEnum = "PAYMENT_FAILURE"

	// PaymentTransactionStatusPLUGINFAILURE captures enum value "PLUGIN_FAILURE"
	PaymentTransactionStatusPLUGINFAILURE PaymentTransactionStatusEnum = "PLUGIN_FAILURE"

	// PaymentTransactionStatusPAYMENTSYSTEMOFF captures enum value "PAYMENT_SYSTEM_OFF"
	PaymentTransactionStatusPAYMENTSYSTEMOFF PaymentTransactionStatusEnum = "PAYMENT_SYSTEM_OFF"
)

var PaymentTransactionStatusEnumValues = []string{
	"SUCCESS",
	"UNKNOWN",
	"PENDING",
	"PAYMENT_FAILURE",
	"PLUGIN_FAILURE",
	"PAYMENT_SYSTEM_OFF",
}

func (e PaymentTransactionStatusEnum) IsValid() bool {
	for _, v := range PaymentTransactionStatusEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *PaymentTransaction) validateStatusEnum(path, location string, value PaymentTransactionStatusEnum) error {
	if err := validate.Enum(path, location, value, paymentTransactionTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTransaction) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PaymentTransaction) validateTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionID) { // not required
		return nil
	}

	if err := validate.FormatOf("transactionId", "body", "uuid", m.TransactionID.String(), formats); err != nil {
		return err
	}

	return nil
}

var paymentTransactionTypeTransactionTypePropEnum []interface{}

func init() {
	var res []PaymentTransactionTransactionTypeEnum
	if err := json.Unmarshal([]byte(`["AUTHORIZE","CAPTURE","CHARGEBACK","CREDIT","PURCHASE","REFUND","VOID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTransactionTypeTransactionTypePropEnum = append(paymentTransactionTypeTransactionTypePropEnum, v)
	}
}

type PaymentTransactionTransactionTypeEnum string

const (

	// PaymentTransactionTransactionTypeAUTHORIZE captures enum value "AUTHORIZE"
	PaymentTransactionTransactionTypeAUTHORIZE PaymentTransactionTransactionTypeEnum = "AUTHORIZE"

	// PaymentTransactionTransactionTypeCAPTURE captures enum value "CAPTURE"
	PaymentTransactionTransactionTypeCAPTURE PaymentTransactionTransactionTypeEnum = "CAPTURE"

	// PaymentTransactionTransactionTypeCHARGEBACK captures enum value "CHARGEBACK"
	PaymentTransactionTransactionTypeCHARGEBACK PaymentTransactionTransactionTypeEnum = "CHARGEBACK"

	// PaymentTransactionTransactionTypeCREDIT captures enum value "CREDIT"
	PaymentTransactionTransactionTypeCREDIT PaymentTransactionTransactionTypeEnum = "CREDIT"

	// PaymentTransactionTransactionTypePURCHASE captures enum value "PURCHASE"
	PaymentTransactionTransactionTypePURCHASE PaymentTransactionTransactionTypeEnum = "PURCHASE"

	// PaymentTransactionTransactionTypeREFUND captures enum value "REFUND"
	PaymentTransactionTransactionTypeREFUND PaymentTransactionTransactionTypeEnum = "REFUND"

	// PaymentTransactionTransactionTypeVOID captures enum value "VOID"
	PaymentTransactionTransactionTypeVOID PaymentTransactionTransactionTypeEnum = "VOID"
)

var PaymentTransactionTransactionTypeEnumValues = []string{
	"AUTHORIZE",
	"CAPTURE",
	"CHARGEBACK",
	"CREDIT",
	"PURCHASE",
	"REFUND",
	"VOID",
}

func (e PaymentTransactionTransactionTypeEnum) IsValid() bool {
	for _, v := range PaymentTransactionTransactionTypeEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *PaymentTransaction) validateTransactionTypeEnum(path, location string, value PaymentTransactionTransactionTypeEnum) error {
	if err := validate.Enum(path, location, value, paymentTransactionTypeTransactionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTransaction) validateTransactionType(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransactionTypeEnum("transactionType", "body", m.TransactionType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentTransaction) UnmarshalBinary(b []byte) error {
	var res PaymentTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
