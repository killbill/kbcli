// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentTransaction payment transaction
//
// swagger:model PaymentTransaction
type PaymentTransaction struct {

	// Transaction amount, required except for void operations
	Amount float64 `json:"amount,omitempty"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// Amount currency (account currency unless specified)
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	Currency string `json:"currency,omitempty"`

	// effective date
	// Format: date-time
	EffectiveDate strfmt.DateTime `json:"effectiveDate,omitempty"`

	// first payment reference Id
	FirstPaymentReferenceID string `json:"firstPaymentReferenceId,omitempty"`

	// gateway error code
	GatewayErrorCode string `json:"gatewayErrorCode,omitempty"`

	// gateway error msg
	GatewayErrorMsg string `json:"gatewayErrorMsg,omitempty"`

	// payment external key
	PaymentExternalKey string `json:"paymentExternalKey,omitempty"`

	// Associated payment id, required when notifying state transitions
	// Format: uuid
	PaymentID strfmt.UUID `json:"paymentId,omitempty"`

	// processed amount
	ProcessedAmount float64 `json:"processedAmount,omitempty"`

	// processed currency
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	ProcessedCurrency string `json:"processedCurrency,omitempty"`

	// properties
	Properties []*PluginProperty `json:"properties"`

	// second payment reference Id
	SecondPaymentReferenceID string `json:"secondPaymentReferenceId,omitempty"`

	// Transaction status, required for state change notifications
	// Enum: [SUCCESS UNKNOWN PENDING PAYMENT_FAILURE PLUGIN_FAILURE PAYMENT_SYSTEM_OFF]
	Status string `json:"status,omitempty"`

	// transaction external key
	TransactionExternalKey string `json:"transactionExternalKey,omitempty"`

	// transaction Id
	// Format: uuid
	TransactionID strfmt.UUID `json:"transactionId,omitempty"`

	// transaction type
	// Enum: [AUTHORIZE CAPTURE CHARGEBACK CREDIT PURCHASE REFUND VOID]
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this payment transaction
func (m *PaymentTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentTransaction) validateAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var paymentTransactionTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTransactionTypeCurrencyPropEnum = append(paymentTransactionTypeCurrencyPropEnum, v)
	}
}

const (

	// PaymentTransactionCurrencyAED captures enum value "AED"
	PaymentTransactionCurrencyAED string = "AED"

	// PaymentTransactionCurrencyAFN captures enum value "AFN"
	PaymentTransactionCurrencyAFN string = "AFN"

	// PaymentTransactionCurrencyALL captures enum value "ALL"
	PaymentTransactionCurrencyALL string = "ALL"

	// PaymentTransactionCurrencyAMD captures enum value "AMD"
	PaymentTransactionCurrencyAMD string = "AMD"

	// PaymentTransactionCurrencyANG captures enum value "ANG"
	PaymentTransactionCurrencyANG string = "ANG"

	// PaymentTransactionCurrencyAOA captures enum value "AOA"
	PaymentTransactionCurrencyAOA string = "AOA"

	// PaymentTransactionCurrencyARS captures enum value "ARS"
	PaymentTransactionCurrencyARS string = "ARS"

	// PaymentTransactionCurrencyAUD captures enum value "AUD"
	PaymentTransactionCurrencyAUD string = "AUD"

	// PaymentTransactionCurrencyAWG captures enum value "AWG"
	PaymentTransactionCurrencyAWG string = "AWG"

	// PaymentTransactionCurrencyAZN captures enum value "AZN"
	PaymentTransactionCurrencyAZN string = "AZN"

	// PaymentTransactionCurrencyBAM captures enum value "BAM"
	PaymentTransactionCurrencyBAM string = "BAM"

	// PaymentTransactionCurrencyBBD captures enum value "BBD"
	PaymentTransactionCurrencyBBD string = "BBD"

	// PaymentTransactionCurrencyBDT captures enum value "BDT"
	PaymentTransactionCurrencyBDT string = "BDT"

	// PaymentTransactionCurrencyBGN captures enum value "BGN"
	PaymentTransactionCurrencyBGN string = "BGN"

	// PaymentTransactionCurrencyBHD captures enum value "BHD"
	PaymentTransactionCurrencyBHD string = "BHD"

	// PaymentTransactionCurrencyBIF captures enum value "BIF"
	PaymentTransactionCurrencyBIF string = "BIF"

	// PaymentTransactionCurrencyBMD captures enum value "BMD"
	PaymentTransactionCurrencyBMD string = "BMD"

	// PaymentTransactionCurrencyBND captures enum value "BND"
	PaymentTransactionCurrencyBND string = "BND"

	// PaymentTransactionCurrencyBOB captures enum value "BOB"
	PaymentTransactionCurrencyBOB string = "BOB"

	// PaymentTransactionCurrencyBRL captures enum value "BRL"
	PaymentTransactionCurrencyBRL string = "BRL"

	// PaymentTransactionCurrencyBSD captures enum value "BSD"
	PaymentTransactionCurrencyBSD string = "BSD"

	// PaymentTransactionCurrencyBTN captures enum value "BTN"
	PaymentTransactionCurrencyBTN string = "BTN"

	// PaymentTransactionCurrencyBWP captures enum value "BWP"
	PaymentTransactionCurrencyBWP string = "BWP"

	// PaymentTransactionCurrencyBYR captures enum value "BYR"
	PaymentTransactionCurrencyBYR string = "BYR"

	// PaymentTransactionCurrencyBZD captures enum value "BZD"
	PaymentTransactionCurrencyBZD string = "BZD"

	// PaymentTransactionCurrencyCAD captures enum value "CAD"
	PaymentTransactionCurrencyCAD string = "CAD"

	// PaymentTransactionCurrencyCDF captures enum value "CDF"
	PaymentTransactionCurrencyCDF string = "CDF"

	// PaymentTransactionCurrencyCHF captures enum value "CHF"
	PaymentTransactionCurrencyCHF string = "CHF"

	// PaymentTransactionCurrencyCLP captures enum value "CLP"
	PaymentTransactionCurrencyCLP string = "CLP"

	// PaymentTransactionCurrencyCNY captures enum value "CNY"
	PaymentTransactionCurrencyCNY string = "CNY"

	// PaymentTransactionCurrencyCOP captures enum value "COP"
	PaymentTransactionCurrencyCOP string = "COP"

	// PaymentTransactionCurrencyCRC captures enum value "CRC"
	PaymentTransactionCurrencyCRC string = "CRC"

	// PaymentTransactionCurrencyCUC captures enum value "CUC"
	PaymentTransactionCurrencyCUC string = "CUC"

	// PaymentTransactionCurrencyCUP captures enum value "CUP"
	PaymentTransactionCurrencyCUP string = "CUP"

	// PaymentTransactionCurrencyCVE captures enum value "CVE"
	PaymentTransactionCurrencyCVE string = "CVE"

	// PaymentTransactionCurrencyCZK captures enum value "CZK"
	PaymentTransactionCurrencyCZK string = "CZK"

	// PaymentTransactionCurrencyDJF captures enum value "DJF"
	PaymentTransactionCurrencyDJF string = "DJF"

	// PaymentTransactionCurrencyDKK captures enum value "DKK"
	PaymentTransactionCurrencyDKK string = "DKK"

	// PaymentTransactionCurrencyDOP captures enum value "DOP"
	PaymentTransactionCurrencyDOP string = "DOP"

	// PaymentTransactionCurrencyDZD captures enum value "DZD"
	PaymentTransactionCurrencyDZD string = "DZD"

	// PaymentTransactionCurrencyEGP captures enum value "EGP"
	PaymentTransactionCurrencyEGP string = "EGP"

	// PaymentTransactionCurrencyERN captures enum value "ERN"
	PaymentTransactionCurrencyERN string = "ERN"

	// PaymentTransactionCurrencyETB captures enum value "ETB"
	PaymentTransactionCurrencyETB string = "ETB"

	// PaymentTransactionCurrencyEUR captures enum value "EUR"
	PaymentTransactionCurrencyEUR string = "EUR"

	// PaymentTransactionCurrencyFJD captures enum value "FJD"
	PaymentTransactionCurrencyFJD string = "FJD"

	// PaymentTransactionCurrencyFKP captures enum value "FKP"
	PaymentTransactionCurrencyFKP string = "FKP"

	// PaymentTransactionCurrencyGBP captures enum value "GBP"
	PaymentTransactionCurrencyGBP string = "GBP"

	// PaymentTransactionCurrencyGEL captures enum value "GEL"
	PaymentTransactionCurrencyGEL string = "GEL"

	// PaymentTransactionCurrencyGGP captures enum value "GGP"
	PaymentTransactionCurrencyGGP string = "GGP"

	// PaymentTransactionCurrencyGHS captures enum value "GHS"
	PaymentTransactionCurrencyGHS string = "GHS"

	// PaymentTransactionCurrencyGIP captures enum value "GIP"
	PaymentTransactionCurrencyGIP string = "GIP"

	// PaymentTransactionCurrencyGMD captures enum value "GMD"
	PaymentTransactionCurrencyGMD string = "GMD"

	// PaymentTransactionCurrencyGNF captures enum value "GNF"
	PaymentTransactionCurrencyGNF string = "GNF"

	// PaymentTransactionCurrencyGTQ captures enum value "GTQ"
	PaymentTransactionCurrencyGTQ string = "GTQ"

	// PaymentTransactionCurrencyGYD captures enum value "GYD"
	PaymentTransactionCurrencyGYD string = "GYD"

	// PaymentTransactionCurrencyHKD captures enum value "HKD"
	PaymentTransactionCurrencyHKD string = "HKD"

	// PaymentTransactionCurrencyHNL captures enum value "HNL"
	PaymentTransactionCurrencyHNL string = "HNL"

	// PaymentTransactionCurrencyHRK captures enum value "HRK"
	PaymentTransactionCurrencyHRK string = "HRK"

	// PaymentTransactionCurrencyHTG captures enum value "HTG"
	PaymentTransactionCurrencyHTG string = "HTG"

	// PaymentTransactionCurrencyHUF captures enum value "HUF"
	PaymentTransactionCurrencyHUF string = "HUF"

	// PaymentTransactionCurrencyIDR captures enum value "IDR"
	PaymentTransactionCurrencyIDR string = "IDR"

	// PaymentTransactionCurrencyILS captures enum value "ILS"
	PaymentTransactionCurrencyILS string = "ILS"

	// PaymentTransactionCurrencyIMP captures enum value "IMP"
	PaymentTransactionCurrencyIMP string = "IMP"

	// PaymentTransactionCurrencyINR captures enum value "INR"
	PaymentTransactionCurrencyINR string = "INR"

	// PaymentTransactionCurrencyIQD captures enum value "IQD"
	PaymentTransactionCurrencyIQD string = "IQD"

	// PaymentTransactionCurrencyIRR captures enum value "IRR"
	PaymentTransactionCurrencyIRR string = "IRR"

	// PaymentTransactionCurrencyISK captures enum value "ISK"
	PaymentTransactionCurrencyISK string = "ISK"

	// PaymentTransactionCurrencyJEP captures enum value "JEP"
	PaymentTransactionCurrencyJEP string = "JEP"

	// PaymentTransactionCurrencyJMD captures enum value "JMD"
	PaymentTransactionCurrencyJMD string = "JMD"

	// PaymentTransactionCurrencyJOD captures enum value "JOD"
	PaymentTransactionCurrencyJOD string = "JOD"

	// PaymentTransactionCurrencyJPY captures enum value "JPY"
	PaymentTransactionCurrencyJPY string = "JPY"

	// PaymentTransactionCurrencyKES captures enum value "KES"
	PaymentTransactionCurrencyKES string = "KES"

	// PaymentTransactionCurrencyKGS captures enum value "KGS"
	PaymentTransactionCurrencyKGS string = "KGS"

	// PaymentTransactionCurrencyKHR captures enum value "KHR"
	PaymentTransactionCurrencyKHR string = "KHR"

	// PaymentTransactionCurrencyKMF captures enum value "KMF"
	PaymentTransactionCurrencyKMF string = "KMF"

	// PaymentTransactionCurrencyKPW captures enum value "KPW"
	PaymentTransactionCurrencyKPW string = "KPW"

	// PaymentTransactionCurrencyKRW captures enum value "KRW"
	PaymentTransactionCurrencyKRW string = "KRW"

	// PaymentTransactionCurrencyKWD captures enum value "KWD"
	PaymentTransactionCurrencyKWD string = "KWD"

	// PaymentTransactionCurrencyKYD captures enum value "KYD"
	PaymentTransactionCurrencyKYD string = "KYD"

	// PaymentTransactionCurrencyKZT captures enum value "KZT"
	PaymentTransactionCurrencyKZT string = "KZT"

	// PaymentTransactionCurrencyLAK captures enum value "LAK"
	PaymentTransactionCurrencyLAK string = "LAK"

	// PaymentTransactionCurrencyLBP captures enum value "LBP"
	PaymentTransactionCurrencyLBP string = "LBP"

	// PaymentTransactionCurrencyLKR captures enum value "LKR"
	PaymentTransactionCurrencyLKR string = "LKR"

	// PaymentTransactionCurrencyLRD captures enum value "LRD"
	PaymentTransactionCurrencyLRD string = "LRD"

	// PaymentTransactionCurrencyLSL captures enum value "LSL"
	PaymentTransactionCurrencyLSL string = "LSL"

	// PaymentTransactionCurrencyLTL captures enum value "LTL"
	PaymentTransactionCurrencyLTL string = "LTL"

	// PaymentTransactionCurrencyLVL captures enum value "LVL"
	PaymentTransactionCurrencyLVL string = "LVL"

	// PaymentTransactionCurrencyLYD captures enum value "LYD"
	PaymentTransactionCurrencyLYD string = "LYD"

	// PaymentTransactionCurrencyMAD captures enum value "MAD"
	PaymentTransactionCurrencyMAD string = "MAD"

	// PaymentTransactionCurrencyMDL captures enum value "MDL"
	PaymentTransactionCurrencyMDL string = "MDL"

	// PaymentTransactionCurrencyMGA captures enum value "MGA"
	PaymentTransactionCurrencyMGA string = "MGA"

	// PaymentTransactionCurrencyMKD captures enum value "MKD"
	PaymentTransactionCurrencyMKD string = "MKD"

	// PaymentTransactionCurrencyMMK captures enum value "MMK"
	PaymentTransactionCurrencyMMK string = "MMK"

	// PaymentTransactionCurrencyMNT captures enum value "MNT"
	PaymentTransactionCurrencyMNT string = "MNT"

	// PaymentTransactionCurrencyMOP captures enum value "MOP"
	PaymentTransactionCurrencyMOP string = "MOP"

	// PaymentTransactionCurrencyMRO captures enum value "MRO"
	PaymentTransactionCurrencyMRO string = "MRO"

	// PaymentTransactionCurrencyMUR captures enum value "MUR"
	PaymentTransactionCurrencyMUR string = "MUR"

	// PaymentTransactionCurrencyMVR captures enum value "MVR"
	PaymentTransactionCurrencyMVR string = "MVR"

	// PaymentTransactionCurrencyMWK captures enum value "MWK"
	PaymentTransactionCurrencyMWK string = "MWK"

	// PaymentTransactionCurrencyMXN captures enum value "MXN"
	PaymentTransactionCurrencyMXN string = "MXN"

	// PaymentTransactionCurrencyMYR captures enum value "MYR"
	PaymentTransactionCurrencyMYR string = "MYR"

	// PaymentTransactionCurrencyMZN captures enum value "MZN"
	PaymentTransactionCurrencyMZN string = "MZN"

	// PaymentTransactionCurrencyNAD captures enum value "NAD"
	PaymentTransactionCurrencyNAD string = "NAD"

	// PaymentTransactionCurrencyNGN captures enum value "NGN"
	PaymentTransactionCurrencyNGN string = "NGN"

	// PaymentTransactionCurrencyNIO captures enum value "NIO"
	PaymentTransactionCurrencyNIO string = "NIO"

	// PaymentTransactionCurrencyNOK captures enum value "NOK"
	PaymentTransactionCurrencyNOK string = "NOK"

	// PaymentTransactionCurrencyNPR captures enum value "NPR"
	PaymentTransactionCurrencyNPR string = "NPR"

	// PaymentTransactionCurrencyNZD captures enum value "NZD"
	PaymentTransactionCurrencyNZD string = "NZD"

	// PaymentTransactionCurrencyOMR captures enum value "OMR"
	PaymentTransactionCurrencyOMR string = "OMR"

	// PaymentTransactionCurrencyPAB captures enum value "PAB"
	PaymentTransactionCurrencyPAB string = "PAB"

	// PaymentTransactionCurrencyPEN captures enum value "PEN"
	PaymentTransactionCurrencyPEN string = "PEN"

	// PaymentTransactionCurrencyPGK captures enum value "PGK"
	PaymentTransactionCurrencyPGK string = "PGK"

	// PaymentTransactionCurrencyPHP captures enum value "PHP"
	PaymentTransactionCurrencyPHP string = "PHP"

	// PaymentTransactionCurrencyPKR captures enum value "PKR"
	PaymentTransactionCurrencyPKR string = "PKR"

	// PaymentTransactionCurrencyPLN captures enum value "PLN"
	PaymentTransactionCurrencyPLN string = "PLN"

	// PaymentTransactionCurrencyPYG captures enum value "PYG"
	PaymentTransactionCurrencyPYG string = "PYG"

	// PaymentTransactionCurrencyQAR captures enum value "QAR"
	PaymentTransactionCurrencyQAR string = "QAR"

	// PaymentTransactionCurrencyRON captures enum value "RON"
	PaymentTransactionCurrencyRON string = "RON"

	// PaymentTransactionCurrencyRSD captures enum value "RSD"
	PaymentTransactionCurrencyRSD string = "RSD"

	// PaymentTransactionCurrencyRUB captures enum value "RUB"
	PaymentTransactionCurrencyRUB string = "RUB"

	// PaymentTransactionCurrencyRWF captures enum value "RWF"
	PaymentTransactionCurrencyRWF string = "RWF"

	// PaymentTransactionCurrencySAR captures enum value "SAR"
	PaymentTransactionCurrencySAR string = "SAR"

	// PaymentTransactionCurrencySBD captures enum value "SBD"
	PaymentTransactionCurrencySBD string = "SBD"

	// PaymentTransactionCurrencySCR captures enum value "SCR"
	PaymentTransactionCurrencySCR string = "SCR"

	// PaymentTransactionCurrencySDG captures enum value "SDG"
	PaymentTransactionCurrencySDG string = "SDG"

	// PaymentTransactionCurrencySEK captures enum value "SEK"
	PaymentTransactionCurrencySEK string = "SEK"

	// PaymentTransactionCurrencySGD captures enum value "SGD"
	PaymentTransactionCurrencySGD string = "SGD"

	// PaymentTransactionCurrencySHP captures enum value "SHP"
	PaymentTransactionCurrencySHP string = "SHP"

	// PaymentTransactionCurrencySLL captures enum value "SLL"
	PaymentTransactionCurrencySLL string = "SLL"

	// PaymentTransactionCurrencySOS captures enum value "SOS"
	PaymentTransactionCurrencySOS string = "SOS"

	// PaymentTransactionCurrencySPL captures enum value "SPL"
	PaymentTransactionCurrencySPL string = "SPL"

	// PaymentTransactionCurrencySRD captures enum value "SRD"
	PaymentTransactionCurrencySRD string = "SRD"

	// PaymentTransactionCurrencySTD captures enum value "STD"
	PaymentTransactionCurrencySTD string = "STD"

	// PaymentTransactionCurrencySVC captures enum value "SVC"
	PaymentTransactionCurrencySVC string = "SVC"

	// PaymentTransactionCurrencySYP captures enum value "SYP"
	PaymentTransactionCurrencySYP string = "SYP"

	// PaymentTransactionCurrencySZL captures enum value "SZL"
	PaymentTransactionCurrencySZL string = "SZL"

	// PaymentTransactionCurrencyTHB captures enum value "THB"
	PaymentTransactionCurrencyTHB string = "THB"

	// PaymentTransactionCurrencyTJS captures enum value "TJS"
	PaymentTransactionCurrencyTJS string = "TJS"

	// PaymentTransactionCurrencyTMT captures enum value "TMT"
	PaymentTransactionCurrencyTMT string = "TMT"

	// PaymentTransactionCurrencyTND captures enum value "TND"
	PaymentTransactionCurrencyTND string = "TND"

	// PaymentTransactionCurrencyTOP captures enum value "TOP"
	PaymentTransactionCurrencyTOP string = "TOP"

	// PaymentTransactionCurrencyTRY captures enum value "TRY"
	PaymentTransactionCurrencyTRY string = "TRY"

	// PaymentTransactionCurrencyTTD captures enum value "TTD"
	PaymentTransactionCurrencyTTD string = "TTD"

	// PaymentTransactionCurrencyTVD captures enum value "TVD"
	PaymentTransactionCurrencyTVD string = "TVD"

	// PaymentTransactionCurrencyTWD captures enum value "TWD"
	PaymentTransactionCurrencyTWD string = "TWD"

	// PaymentTransactionCurrencyTZS captures enum value "TZS"
	PaymentTransactionCurrencyTZS string = "TZS"

	// PaymentTransactionCurrencyUAH captures enum value "UAH"
	PaymentTransactionCurrencyUAH string = "UAH"

	// PaymentTransactionCurrencyUGX captures enum value "UGX"
	PaymentTransactionCurrencyUGX string = "UGX"

	// PaymentTransactionCurrencyUSD captures enum value "USD"
	PaymentTransactionCurrencyUSD string = "USD"

	// PaymentTransactionCurrencyUYU captures enum value "UYU"
	PaymentTransactionCurrencyUYU string = "UYU"

	// PaymentTransactionCurrencyUZS captures enum value "UZS"
	PaymentTransactionCurrencyUZS string = "UZS"

	// PaymentTransactionCurrencyVEF captures enum value "VEF"
	PaymentTransactionCurrencyVEF string = "VEF"

	// PaymentTransactionCurrencyVND captures enum value "VND"
	PaymentTransactionCurrencyVND string = "VND"

	// PaymentTransactionCurrencyVUV captures enum value "VUV"
	PaymentTransactionCurrencyVUV string = "VUV"

	// PaymentTransactionCurrencyWST captures enum value "WST"
	PaymentTransactionCurrencyWST string = "WST"

	// PaymentTransactionCurrencyXAF captures enum value "XAF"
	PaymentTransactionCurrencyXAF string = "XAF"

	// PaymentTransactionCurrencyXCD captures enum value "XCD"
	PaymentTransactionCurrencyXCD string = "XCD"

	// PaymentTransactionCurrencyXDR captures enum value "XDR"
	PaymentTransactionCurrencyXDR string = "XDR"

	// PaymentTransactionCurrencyXOF captures enum value "XOF"
	PaymentTransactionCurrencyXOF string = "XOF"

	// PaymentTransactionCurrencyXPF captures enum value "XPF"
	PaymentTransactionCurrencyXPF string = "XPF"

	// PaymentTransactionCurrencyYER captures enum value "YER"
	PaymentTransactionCurrencyYER string = "YER"

	// PaymentTransactionCurrencyZAR captures enum value "ZAR"
	PaymentTransactionCurrencyZAR string = "ZAR"

	// PaymentTransactionCurrencyZMW captures enum value "ZMW"
	PaymentTransactionCurrencyZMW string = "ZMW"

	// PaymentTransactionCurrencyZWD captures enum value "ZWD"
	PaymentTransactionCurrencyZWD string = "ZWD"

	// PaymentTransactionCurrencyBTC captures enum value "BTC"
	PaymentTransactionCurrencyBTC string = "BTC"
)

// prop value enum
func (m *PaymentTransaction) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentTransactionTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTransaction) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *PaymentTransaction) validateEffectiveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveDate", "body", "date-time", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PaymentTransaction) validatePaymentID(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentID) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentId", "body", "uuid", m.PaymentID.String(), formats); err != nil {
		return err
	}

	return nil
}

var paymentTransactionTypeProcessedCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTransactionTypeProcessedCurrencyPropEnum = append(paymentTransactionTypeProcessedCurrencyPropEnum, v)
	}
}

const (

	// PaymentTransactionProcessedCurrencyAED captures enum value "AED"
	PaymentTransactionProcessedCurrencyAED string = "AED"

	// PaymentTransactionProcessedCurrencyAFN captures enum value "AFN"
	PaymentTransactionProcessedCurrencyAFN string = "AFN"

	// PaymentTransactionProcessedCurrencyALL captures enum value "ALL"
	PaymentTransactionProcessedCurrencyALL string = "ALL"

	// PaymentTransactionProcessedCurrencyAMD captures enum value "AMD"
	PaymentTransactionProcessedCurrencyAMD string = "AMD"

	// PaymentTransactionProcessedCurrencyANG captures enum value "ANG"
	PaymentTransactionProcessedCurrencyANG string = "ANG"

	// PaymentTransactionProcessedCurrencyAOA captures enum value "AOA"
	PaymentTransactionProcessedCurrencyAOA string = "AOA"

	// PaymentTransactionProcessedCurrencyARS captures enum value "ARS"
	PaymentTransactionProcessedCurrencyARS string = "ARS"

	// PaymentTransactionProcessedCurrencyAUD captures enum value "AUD"
	PaymentTransactionProcessedCurrencyAUD string = "AUD"

	// PaymentTransactionProcessedCurrencyAWG captures enum value "AWG"
	PaymentTransactionProcessedCurrencyAWG string = "AWG"

	// PaymentTransactionProcessedCurrencyAZN captures enum value "AZN"
	PaymentTransactionProcessedCurrencyAZN string = "AZN"

	// PaymentTransactionProcessedCurrencyBAM captures enum value "BAM"
	PaymentTransactionProcessedCurrencyBAM string = "BAM"

	// PaymentTransactionProcessedCurrencyBBD captures enum value "BBD"
	PaymentTransactionProcessedCurrencyBBD string = "BBD"

	// PaymentTransactionProcessedCurrencyBDT captures enum value "BDT"
	PaymentTransactionProcessedCurrencyBDT string = "BDT"

	// PaymentTransactionProcessedCurrencyBGN captures enum value "BGN"
	PaymentTransactionProcessedCurrencyBGN string = "BGN"

	// PaymentTransactionProcessedCurrencyBHD captures enum value "BHD"
	PaymentTransactionProcessedCurrencyBHD string = "BHD"

	// PaymentTransactionProcessedCurrencyBIF captures enum value "BIF"
	PaymentTransactionProcessedCurrencyBIF string = "BIF"

	// PaymentTransactionProcessedCurrencyBMD captures enum value "BMD"
	PaymentTransactionProcessedCurrencyBMD string = "BMD"

	// PaymentTransactionProcessedCurrencyBND captures enum value "BND"
	PaymentTransactionProcessedCurrencyBND string = "BND"

	// PaymentTransactionProcessedCurrencyBOB captures enum value "BOB"
	PaymentTransactionProcessedCurrencyBOB string = "BOB"

	// PaymentTransactionProcessedCurrencyBRL captures enum value "BRL"
	PaymentTransactionProcessedCurrencyBRL string = "BRL"

	// PaymentTransactionProcessedCurrencyBSD captures enum value "BSD"
	PaymentTransactionProcessedCurrencyBSD string = "BSD"

	// PaymentTransactionProcessedCurrencyBTN captures enum value "BTN"
	PaymentTransactionProcessedCurrencyBTN string = "BTN"

	// PaymentTransactionProcessedCurrencyBWP captures enum value "BWP"
	PaymentTransactionProcessedCurrencyBWP string = "BWP"

	// PaymentTransactionProcessedCurrencyBYR captures enum value "BYR"
	PaymentTransactionProcessedCurrencyBYR string = "BYR"

	// PaymentTransactionProcessedCurrencyBZD captures enum value "BZD"
	PaymentTransactionProcessedCurrencyBZD string = "BZD"

	// PaymentTransactionProcessedCurrencyCAD captures enum value "CAD"
	PaymentTransactionProcessedCurrencyCAD string = "CAD"

	// PaymentTransactionProcessedCurrencyCDF captures enum value "CDF"
	PaymentTransactionProcessedCurrencyCDF string = "CDF"

	// PaymentTransactionProcessedCurrencyCHF captures enum value "CHF"
	PaymentTransactionProcessedCurrencyCHF string = "CHF"

	// PaymentTransactionProcessedCurrencyCLP captures enum value "CLP"
	PaymentTransactionProcessedCurrencyCLP string = "CLP"

	// PaymentTransactionProcessedCurrencyCNY captures enum value "CNY"
	PaymentTransactionProcessedCurrencyCNY string = "CNY"

	// PaymentTransactionProcessedCurrencyCOP captures enum value "COP"
	PaymentTransactionProcessedCurrencyCOP string = "COP"

	// PaymentTransactionProcessedCurrencyCRC captures enum value "CRC"
	PaymentTransactionProcessedCurrencyCRC string = "CRC"

	// PaymentTransactionProcessedCurrencyCUC captures enum value "CUC"
	PaymentTransactionProcessedCurrencyCUC string = "CUC"

	// PaymentTransactionProcessedCurrencyCUP captures enum value "CUP"
	PaymentTransactionProcessedCurrencyCUP string = "CUP"

	// PaymentTransactionProcessedCurrencyCVE captures enum value "CVE"
	PaymentTransactionProcessedCurrencyCVE string = "CVE"

	// PaymentTransactionProcessedCurrencyCZK captures enum value "CZK"
	PaymentTransactionProcessedCurrencyCZK string = "CZK"

	// PaymentTransactionProcessedCurrencyDJF captures enum value "DJF"
	PaymentTransactionProcessedCurrencyDJF string = "DJF"

	// PaymentTransactionProcessedCurrencyDKK captures enum value "DKK"
	PaymentTransactionProcessedCurrencyDKK string = "DKK"

	// PaymentTransactionProcessedCurrencyDOP captures enum value "DOP"
	PaymentTransactionProcessedCurrencyDOP string = "DOP"

	// PaymentTransactionProcessedCurrencyDZD captures enum value "DZD"
	PaymentTransactionProcessedCurrencyDZD string = "DZD"

	// PaymentTransactionProcessedCurrencyEGP captures enum value "EGP"
	PaymentTransactionProcessedCurrencyEGP string = "EGP"

	// PaymentTransactionProcessedCurrencyERN captures enum value "ERN"
	PaymentTransactionProcessedCurrencyERN string = "ERN"

	// PaymentTransactionProcessedCurrencyETB captures enum value "ETB"
	PaymentTransactionProcessedCurrencyETB string = "ETB"

	// PaymentTransactionProcessedCurrencyEUR captures enum value "EUR"
	PaymentTransactionProcessedCurrencyEUR string = "EUR"

	// PaymentTransactionProcessedCurrencyFJD captures enum value "FJD"
	PaymentTransactionProcessedCurrencyFJD string = "FJD"

	// PaymentTransactionProcessedCurrencyFKP captures enum value "FKP"
	PaymentTransactionProcessedCurrencyFKP string = "FKP"

	// PaymentTransactionProcessedCurrencyGBP captures enum value "GBP"
	PaymentTransactionProcessedCurrencyGBP string = "GBP"

	// PaymentTransactionProcessedCurrencyGEL captures enum value "GEL"
	PaymentTransactionProcessedCurrencyGEL string = "GEL"

	// PaymentTransactionProcessedCurrencyGGP captures enum value "GGP"
	PaymentTransactionProcessedCurrencyGGP string = "GGP"

	// PaymentTransactionProcessedCurrencyGHS captures enum value "GHS"
	PaymentTransactionProcessedCurrencyGHS string = "GHS"

	// PaymentTransactionProcessedCurrencyGIP captures enum value "GIP"
	PaymentTransactionProcessedCurrencyGIP string = "GIP"

	// PaymentTransactionProcessedCurrencyGMD captures enum value "GMD"
	PaymentTransactionProcessedCurrencyGMD string = "GMD"

	// PaymentTransactionProcessedCurrencyGNF captures enum value "GNF"
	PaymentTransactionProcessedCurrencyGNF string = "GNF"

	// PaymentTransactionProcessedCurrencyGTQ captures enum value "GTQ"
	PaymentTransactionProcessedCurrencyGTQ string = "GTQ"

	// PaymentTransactionProcessedCurrencyGYD captures enum value "GYD"
	PaymentTransactionProcessedCurrencyGYD string = "GYD"

	// PaymentTransactionProcessedCurrencyHKD captures enum value "HKD"
	PaymentTransactionProcessedCurrencyHKD string = "HKD"

	// PaymentTransactionProcessedCurrencyHNL captures enum value "HNL"
	PaymentTransactionProcessedCurrencyHNL string = "HNL"

	// PaymentTransactionProcessedCurrencyHRK captures enum value "HRK"
	PaymentTransactionProcessedCurrencyHRK string = "HRK"

	// PaymentTransactionProcessedCurrencyHTG captures enum value "HTG"
	PaymentTransactionProcessedCurrencyHTG string = "HTG"

	// PaymentTransactionProcessedCurrencyHUF captures enum value "HUF"
	PaymentTransactionProcessedCurrencyHUF string = "HUF"

	// PaymentTransactionProcessedCurrencyIDR captures enum value "IDR"
	PaymentTransactionProcessedCurrencyIDR string = "IDR"

	// PaymentTransactionProcessedCurrencyILS captures enum value "ILS"
	PaymentTransactionProcessedCurrencyILS string = "ILS"

	// PaymentTransactionProcessedCurrencyIMP captures enum value "IMP"
	PaymentTransactionProcessedCurrencyIMP string = "IMP"

	// PaymentTransactionProcessedCurrencyINR captures enum value "INR"
	PaymentTransactionProcessedCurrencyINR string = "INR"

	// PaymentTransactionProcessedCurrencyIQD captures enum value "IQD"
	PaymentTransactionProcessedCurrencyIQD string = "IQD"

	// PaymentTransactionProcessedCurrencyIRR captures enum value "IRR"
	PaymentTransactionProcessedCurrencyIRR string = "IRR"

	// PaymentTransactionProcessedCurrencyISK captures enum value "ISK"
	PaymentTransactionProcessedCurrencyISK string = "ISK"

	// PaymentTransactionProcessedCurrencyJEP captures enum value "JEP"
	PaymentTransactionProcessedCurrencyJEP string = "JEP"

	// PaymentTransactionProcessedCurrencyJMD captures enum value "JMD"
	PaymentTransactionProcessedCurrencyJMD string = "JMD"

	// PaymentTransactionProcessedCurrencyJOD captures enum value "JOD"
	PaymentTransactionProcessedCurrencyJOD string = "JOD"

	// PaymentTransactionProcessedCurrencyJPY captures enum value "JPY"
	PaymentTransactionProcessedCurrencyJPY string = "JPY"

	// PaymentTransactionProcessedCurrencyKES captures enum value "KES"
	PaymentTransactionProcessedCurrencyKES string = "KES"

	// PaymentTransactionProcessedCurrencyKGS captures enum value "KGS"
	PaymentTransactionProcessedCurrencyKGS string = "KGS"

	// PaymentTransactionProcessedCurrencyKHR captures enum value "KHR"
	PaymentTransactionProcessedCurrencyKHR string = "KHR"

	// PaymentTransactionProcessedCurrencyKMF captures enum value "KMF"
	PaymentTransactionProcessedCurrencyKMF string = "KMF"

	// PaymentTransactionProcessedCurrencyKPW captures enum value "KPW"
	PaymentTransactionProcessedCurrencyKPW string = "KPW"

	// PaymentTransactionProcessedCurrencyKRW captures enum value "KRW"
	PaymentTransactionProcessedCurrencyKRW string = "KRW"

	// PaymentTransactionProcessedCurrencyKWD captures enum value "KWD"
	PaymentTransactionProcessedCurrencyKWD string = "KWD"

	// PaymentTransactionProcessedCurrencyKYD captures enum value "KYD"
	PaymentTransactionProcessedCurrencyKYD string = "KYD"

	// PaymentTransactionProcessedCurrencyKZT captures enum value "KZT"
	PaymentTransactionProcessedCurrencyKZT string = "KZT"

	// PaymentTransactionProcessedCurrencyLAK captures enum value "LAK"
	PaymentTransactionProcessedCurrencyLAK string = "LAK"

	// PaymentTransactionProcessedCurrencyLBP captures enum value "LBP"
	PaymentTransactionProcessedCurrencyLBP string = "LBP"

	// PaymentTransactionProcessedCurrencyLKR captures enum value "LKR"
	PaymentTransactionProcessedCurrencyLKR string = "LKR"

	// PaymentTransactionProcessedCurrencyLRD captures enum value "LRD"
	PaymentTransactionProcessedCurrencyLRD string = "LRD"

	// PaymentTransactionProcessedCurrencyLSL captures enum value "LSL"
	PaymentTransactionProcessedCurrencyLSL string = "LSL"

	// PaymentTransactionProcessedCurrencyLTL captures enum value "LTL"
	PaymentTransactionProcessedCurrencyLTL string = "LTL"

	// PaymentTransactionProcessedCurrencyLVL captures enum value "LVL"
	PaymentTransactionProcessedCurrencyLVL string = "LVL"

	// PaymentTransactionProcessedCurrencyLYD captures enum value "LYD"
	PaymentTransactionProcessedCurrencyLYD string = "LYD"

	// PaymentTransactionProcessedCurrencyMAD captures enum value "MAD"
	PaymentTransactionProcessedCurrencyMAD string = "MAD"

	// PaymentTransactionProcessedCurrencyMDL captures enum value "MDL"
	PaymentTransactionProcessedCurrencyMDL string = "MDL"

	// PaymentTransactionProcessedCurrencyMGA captures enum value "MGA"
	PaymentTransactionProcessedCurrencyMGA string = "MGA"

	// PaymentTransactionProcessedCurrencyMKD captures enum value "MKD"
	PaymentTransactionProcessedCurrencyMKD string = "MKD"

	// PaymentTransactionProcessedCurrencyMMK captures enum value "MMK"
	PaymentTransactionProcessedCurrencyMMK string = "MMK"

	// PaymentTransactionProcessedCurrencyMNT captures enum value "MNT"
	PaymentTransactionProcessedCurrencyMNT string = "MNT"

	// PaymentTransactionProcessedCurrencyMOP captures enum value "MOP"
	PaymentTransactionProcessedCurrencyMOP string = "MOP"

	// PaymentTransactionProcessedCurrencyMRO captures enum value "MRO"
	PaymentTransactionProcessedCurrencyMRO string = "MRO"

	// PaymentTransactionProcessedCurrencyMUR captures enum value "MUR"
	PaymentTransactionProcessedCurrencyMUR string = "MUR"

	// PaymentTransactionProcessedCurrencyMVR captures enum value "MVR"
	PaymentTransactionProcessedCurrencyMVR string = "MVR"

	// PaymentTransactionProcessedCurrencyMWK captures enum value "MWK"
	PaymentTransactionProcessedCurrencyMWK string = "MWK"

	// PaymentTransactionProcessedCurrencyMXN captures enum value "MXN"
	PaymentTransactionProcessedCurrencyMXN string = "MXN"

	// PaymentTransactionProcessedCurrencyMYR captures enum value "MYR"
	PaymentTransactionProcessedCurrencyMYR string = "MYR"

	// PaymentTransactionProcessedCurrencyMZN captures enum value "MZN"
	PaymentTransactionProcessedCurrencyMZN string = "MZN"

	// PaymentTransactionProcessedCurrencyNAD captures enum value "NAD"
	PaymentTransactionProcessedCurrencyNAD string = "NAD"

	// PaymentTransactionProcessedCurrencyNGN captures enum value "NGN"
	PaymentTransactionProcessedCurrencyNGN string = "NGN"

	// PaymentTransactionProcessedCurrencyNIO captures enum value "NIO"
	PaymentTransactionProcessedCurrencyNIO string = "NIO"

	// PaymentTransactionProcessedCurrencyNOK captures enum value "NOK"
	PaymentTransactionProcessedCurrencyNOK string = "NOK"

	// PaymentTransactionProcessedCurrencyNPR captures enum value "NPR"
	PaymentTransactionProcessedCurrencyNPR string = "NPR"

	// PaymentTransactionProcessedCurrencyNZD captures enum value "NZD"
	PaymentTransactionProcessedCurrencyNZD string = "NZD"

	// PaymentTransactionProcessedCurrencyOMR captures enum value "OMR"
	PaymentTransactionProcessedCurrencyOMR string = "OMR"

	// PaymentTransactionProcessedCurrencyPAB captures enum value "PAB"
	PaymentTransactionProcessedCurrencyPAB string = "PAB"

	// PaymentTransactionProcessedCurrencyPEN captures enum value "PEN"
	PaymentTransactionProcessedCurrencyPEN string = "PEN"

	// PaymentTransactionProcessedCurrencyPGK captures enum value "PGK"
	PaymentTransactionProcessedCurrencyPGK string = "PGK"

	// PaymentTransactionProcessedCurrencyPHP captures enum value "PHP"
	PaymentTransactionProcessedCurrencyPHP string = "PHP"

	// PaymentTransactionProcessedCurrencyPKR captures enum value "PKR"
	PaymentTransactionProcessedCurrencyPKR string = "PKR"

	// PaymentTransactionProcessedCurrencyPLN captures enum value "PLN"
	PaymentTransactionProcessedCurrencyPLN string = "PLN"

	// PaymentTransactionProcessedCurrencyPYG captures enum value "PYG"
	PaymentTransactionProcessedCurrencyPYG string = "PYG"

	// PaymentTransactionProcessedCurrencyQAR captures enum value "QAR"
	PaymentTransactionProcessedCurrencyQAR string = "QAR"

	// PaymentTransactionProcessedCurrencyRON captures enum value "RON"
	PaymentTransactionProcessedCurrencyRON string = "RON"

	// PaymentTransactionProcessedCurrencyRSD captures enum value "RSD"
	PaymentTransactionProcessedCurrencyRSD string = "RSD"

	// PaymentTransactionProcessedCurrencyRUB captures enum value "RUB"
	PaymentTransactionProcessedCurrencyRUB string = "RUB"

	// PaymentTransactionProcessedCurrencyRWF captures enum value "RWF"
	PaymentTransactionProcessedCurrencyRWF string = "RWF"

	// PaymentTransactionProcessedCurrencySAR captures enum value "SAR"
	PaymentTransactionProcessedCurrencySAR string = "SAR"

	// PaymentTransactionProcessedCurrencySBD captures enum value "SBD"
	PaymentTransactionProcessedCurrencySBD string = "SBD"

	// PaymentTransactionProcessedCurrencySCR captures enum value "SCR"
	PaymentTransactionProcessedCurrencySCR string = "SCR"

	// PaymentTransactionProcessedCurrencySDG captures enum value "SDG"
	PaymentTransactionProcessedCurrencySDG string = "SDG"

	// PaymentTransactionProcessedCurrencySEK captures enum value "SEK"
	PaymentTransactionProcessedCurrencySEK string = "SEK"

	// PaymentTransactionProcessedCurrencySGD captures enum value "SGD"
	PaymentTransactionProcessedCurrencySGD string = "SGD"

	// PaymentTransactionProcessedCurrencySHP captures enum value "SHP"
	PaymentTransactionProcessedCurrencySHP string = "SHP"

	// PaymentTransactionProcessedCurrencySLL captures enum value "SLL"
	PaymentTransactionProcessedCurrencySLL string = "SLL"

	// PaymentTransactionProcessedCurrencySOS captures enum value "SOS"
	PaymentTransactionProcessedCurrencySOS string = "SOS"

	// PaymentTransactionProcessedCurrencySPL captures enum value "SPL"
	PaymentTransactionProcessedCurrencySPL string = "SPL"

	// PaymentTransactionProcessedCurrencySRD captures enum value "SRD"
	PaymentTransactionProcessedCurrencySRD string = "SRD"

	// PaymentTransactionProcessedCurrencySTD captures enum value "STD"
	PaymentTransactionProcessedCurrencySTD string = "STD"

	// PaymentTransactionProcessedCurrencySVC captures enum value "SVC"
	PaymentTransactionProcessedCurrencySVC string = "SVC"

	// PaymentTransactionProcessedCurrencySYP captures enum value "SYP"
	PaymentTransactionProcessedCurrencySYP string = "SYP"

	// PaymentTransactionProcessedCurrencySZL captures enum value "SZL"
	PaymentTransactionProcessedCurrencySZL string = "SZL"

	// PaymentTransactionProcessedCurrencyTHB captures enum value "THB"
	PaymentTransactionProcessedCurrencyTHB string = "THB"

	// PaymentTransactionProcessedCurrencyTJS captures enum value "TJS"
	PaymentTransactionProcessedCurrencyTJS string = "TJS"

	// PaymentTransactionProcessedCurrencyTMT captures enum value "TMT"
	PaymentTransactionProcessedCurrencyTMT string = "TMT"

	// PaymentTransactionProcessedCurrencyTND captures enum value "TND"
	PaymentTransactionProcessedCurrencyTND string = "TND"

	// PaymentTransactionProcessedCurrencyTOP captures enum value "TOP"
	PaymentTransactionProcessedCurrencyTOP string = "TOP"

	// PaymentTransactionProcessedCurrencyTRY captures enum value "TRY"
	PaymentTransactionProcessedCurrencyTRY string = "TRY"

	// PaymentTransactionProcessedCurrencyTTD captures enum value "TTD"
	PaymentTransactionProcessedCurrencyTTD string = "TTD"

	// PaymentTransactionProcessedCurrencyTVD captures enum value "TVD"
	PaymentTransactionProcessedCurrencyTVD string = "TVD"

	// PaymentTransactionProcessedCurrencyTWD captures enum value "TWD"
	PaymentTransactionProcessedCurrencyTWD string = "TWD"

	// PaymentTransactionProcessedCurrencyTZS captures enum value "TZS"
	PaymentTransactionProcessedCurrencyTZS string = "TZS"

	// PaymentTransactionProcessedCurrencyUAH captures enum value "UAH"
	PaymentTransactionProcessedCurrencyUAH string = "UAH"

	// PaymentTransactionProcessedCurrencyUGX captures enum value "UGX"
	PaymentTransactionProcessedCurrencyUGX string = "UGX"

	// PaymentTransactionProcessedCurrencyUSD captures enum value "USD"
	PaymentTransactionProcessedCurrencyUSD string = "USD"

	// PaymentTransactionProcessedCurrencyUYU captures enum value "UYU"
	PaymentTransactionProcessedCurrencyUYU string = "UYU"

	// PaymentTransactionProcessedCurrencyUZS captures enum value "UZS"
	PaymentTransactionProcessedCurrencyUZS string = "UZS"

	// PaymentTransactionProcessedCurrencyVEF captures enum value "VEF"
	PaymentTransactionProcessedCurrencyVEF string = "VEF"

	// PaymentTransactionProcessedCurrencyVND captures enum value "VND"
	PaymentTransactionProcessedCurrencyVND string = "VND"

	// PaymentTransactionProcessedCurrencyVUV captures enum value "VUV"
	PaymentTransactionProcessedCurrencyVUV string = "VUV"

	// PaymentTransactionProcessedCurrencyWST captures enum value "WST"
	PaymentTransactionProcessedCurrencyWST string = "WST"

	// PaymentTransactionProcessedCurrencyXAF captures enum value "XAF"
	PaymentTransactionProcessedCurrencyXAF string = "XAF"

	// PaymentTransactionProcessedCurrencyXCD captures enum value "XCD"
	PaymentTransactionProcessedCurrencyXCD string = "XCD"

	// PaymentTransactionProcessedCurrencyXDR captures enum value "XDR"
	PaymentTransactionProcessedCurrencyXDR string = "XDR"

	// PaymentTransactionProcessedCurrencyXOF captures enum value "XOF"
	PaymentTransactionProcessedCurrencyXOF string = "XOF"

	// PaymentTransactionProcessedCurrencyXPF captures enum value "XPF"
	PaymentTransactionProcessedCurrencyXPF string = "XPF"

	// PaymentTransactionProcessedCurrencyYER captures enum value "YER"
	PaymentTransactionProcessedCurrencyYER string = "YER"

	// PaymentTransactionProcessedCurrencyZAR captures enum value "ZAR"
	PaymentTransactionProcessedCurrencyZAR string = "ZAR"

	// PaymentTransactionProcessedCurrencyZMW captures enum value "ZMW"
	PaymentTransactionProcessedCurrencyZMW string = "ZMW"

	// PaymentTransactionProcessedCurrencyZWD captures enum value "ZWD"
	PaymentTransactionProcessedCurrencyZWD string = "ZWD"

	// PaymentTransactionProcessedCurrencyBTC captures enum value "BTC"
	PaymentTransactionProcessedCurrencyBTC string = "BTC"
)

// prop value enum
func (m *PaymentTransaction) validateProcessedCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentTransactionTypeProcessedCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTransaction) validateProcessedCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessedCurrency) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessedCurrencyEnum("processedCurrency", "body", m.ProcessedCurrency); err != nil {
		return err
	}

	return nil
}

func (m *PaymentTransaction) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var paymentTransactionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","UNKNOWN","PENDING","PAYMENT_FAILURE","PLUGIN_FAILURE","PAYMENT_SYSTEM_OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTransactionTypeStatusPropEnum = append(paymentTransactionTypeStatusPropEnum, v)
	}
}

const (

	// PaymentTransactionStatusSUCCESS captures enum value "SUCCESS"
	PaymentTransactionStatusSUCCESS string = "SUCCESS"

	// PaymentTransactionStatusUNKNOWN captures enum value "UNKNOWN"
	PaymentTransactionStatusUNKNOWN string = "UNKNOWN"

	// PaymentTransactionStatusPENDING captures enum value "PENDING"
	PaymentTransactionStatusPENDING string = "PENDING"

	// PaymentTransactionStatusPAYMENTFAILURE captures enum value "PAYMENT_FAILURE"
	PaymentTransactionStatusPAYMENTFAILURE string = "PAYMENT_FAILURE"

	// PaymentTransactionStatusPLUGINFAILURE captures enum value "PLUGIN_FAILURE"
	PaymentTransactionStatusPLUGINFAILURE string = "PLUGIN_FAILURE"

	// PaymentTransactionStatusPAYMENTSYSTEMOFF captures enum value "PAYMENT_SYSTEM_OFF"
	PaymentTransactionStatusPAYMENTSYSTEMOFF string = "PAYMENT_SYSTEM_OFF"
)

// prop value enum
func (m *PaymentTransaction) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentTransactionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTransaction) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PaymentTransaction) validateTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionID) { // not required
		return nil
	}

	if err := validate.FormatOf("transactionId", "body", "uuid", m.TransactionID.String(), formats); err != nil {
		return err
	}

	return nil
}

var paymentTransactionTypeTransactionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTHORIZE","CAPTURE","CHARGEBACK","CREDIT","PURCHASE","REFUND","VOID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTransactionTypeTransactionTypePropEnum = append(paymentTransactionTypeTransactionTypePropEnum, v)
	}
}

const (

	// PaymentTransactionTransactionTypeAUTHORIZE captures enum value "AUTHORIZE"
	PaymentTransactionTransactionTypeAUTHORIZE string = "AUTHORIZE"

	// PaymentTransactionTransactionTypeCAPTURE captures enum value "CAPTURE"
	PaymentTransactionTransactionTypeCAPTURE string = "CAPTURE"

	// PaymentTransactionTransactionTypeCHARGEBACK captures enum value "CHARGEBACK"
	PaymentTransactionTransactionTypeCHARGEBACK string = "CHARGEBACK"

	// PaymentTransactionTransactionTypeCREDIT captures enum value "CREDIT"
	PaymentTransactionTransactionTypeCREDIT string = "CREDIT"

	// PaymentTransactionTransactionTypePURCHASE captures enum value "PURCHASE"
	PaymentTransactionTransactionTypePURCHASE string = "PURCHASE"

	// PaymentTransactionTransactionTypeREFUND captures enum value "REFUND"
	PaymentTransactionTransactionTypeREFUND string = "REFUND"

	// PaymentTransactionTransactionTypeVOID captures enum value "VOID"
	PaymentTransactionTransactionTypeVOID string = "VOID"
)

// prop value enum
func (m *PaymentTransaction) validateTransactionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentTransactionTypeTransactionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTransaction) validateTransactionType(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransactionTypeEnum("transactionType", "body", m.TransactionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payment transaction based on the context it is used
func (m *PaymentTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentTransaction) contextValidateAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditLogs); i++ {

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentTransaction) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Properties); i++ {

		if m.Properties[i] != nil {
			if err := m.Properties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentTransaction) UnmarshalBinary(b []byte) error {
	var res PaymentTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
