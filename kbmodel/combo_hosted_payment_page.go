// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComboHostedPaymentPage combo hosted payment page
//
// swagger:model ComboHostedPaymentPage
type ComboHostedPaymentPage struct {

	// account
	Account *Account `json:"account,omitempty"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// hosted payment page fields
	HostedPaymentPageFields *HostedPaymentPageFields `json:"hostedPaymentPageFields,omitempty"`

	// payment method
	PaymentMethod *PaymentMethod `json:"paymentMethod,omitempty"`

	// payment method plugin properties
	PaymentMethodPluginProperties []*PluginProperty `json:"paymentMethodPluginProperties"`
}

// Validate validates this combo hosted payment page
func (m *ComboHostedPaymentPage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostedPaymentPageFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethodPluginProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComboHostedPaymentPage) validateAccount(formats strfmt.Registry) error {
	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *ComboHostedPaymentPage) validateAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComboHostedPaymentPage) validateHostedPaymentPageFields(formats strfmt.Registry) error {
	if swag.IsZero(m.HostedPaymentPageFields) { // not required
		return nil
	}

	if m.HostedPaymentPageFields != nil {
		if err := m.HostedPaymentPageFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostedPaymentPageFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostedPaymentPageFields")
			}
			return err
		}
	}

	return nil
}

func (m *ComboHostedPaymentPage) validatePaymentMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethod) { // not required
		return nil
	}

	if m.PaymentMethod != nil {
		if err := m.PaymentMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentMethod")
			}
			return err
		}
	}

	return nil
}

func (m *ComboHostedPaymentPage) validatePaymentMethodPluginProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethodPluginProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentMethodPluginProperties); i++ {
		if swag.IsZero(m.PaymentMethodPluginProperties[i]) { // not required
			continue
		}

		if m.PaymentMethodPluginProperties[i] != nil {
			if err := m.PaymentMethodPluginProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paymentMethodPluginProperties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("paymentMethodPluginProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this combo hosted payment page based on the context it is used
func (m *ComboHostedPaymentPage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostedPaymentPageFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentMethodPluginProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComboHostedPaymentPage) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.Account != nil {
		if err := m.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *ComboHostedPaymentPage) contextValidateAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditLogs); i++ {

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ComboHostedPaymentPage) contextValidateHostedPaymentPageFields(ctx context.Context, formats strfmt.Registry) error {

	if m.HostedPaymentPageFields != nil {
		if err := m.HostedPaymentPageFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostedPaymentPageFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hostedPaymentPageFields")
			}
			return err
		}
	}

	return nil
}

func (m *ComboHostedPaymentPage) contextValidatePaymentMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentMethod != nil {
		if err := m.PaymentMethod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentMethod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentMethod")
			}
			return err
		}
	}

	return nil
}

func (m *ComboHostedPaymentPage) contextValidatePaymentMethodPluginProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PaymentMethodPluginProperties); i++ {

		if m.PaymentMethodPluginProperties[i] != nil {
			if err := m.PaymentMethodPluginProperties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paymentMethodPluginProperties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("paymentMethodPluginProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComboHostedPaymentPage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComboHostedPaymentPage) UnmarshalBinary(b []byte) error {
	var res ComboHostedPaymentPage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
