// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoicePaymentTransaction invoice payment transaction
//
// swagger:model InvoicePaymentTransaction
type InvoicePaymentTransaction struct {

	// adjustments
	Adjustments []*InvoiceItem `json:"adjustments"`

	// Transaction amount, required except for void operations
	Amount float64 `json:"amount,omitempty"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// Amount currency (account currency unless specified)
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	Currency string `json:"currency,omitempty"`

	// effective date
	// Format: date-time
	EffectiveDate strfmt.DateTime `json:"effectiveDate,omitempty"`

	// first payment reference Id
	FirstPaymentReferenceID string `json:"firstPaymentReferenceId,omitempty"`

	// gateway error code
	GatewayErrorCode string `json:"gatewayErrorCode,omitempty"`

	// gateway error msg
	GatewayErrorMsg string `json:"gatewayErrorMsg,omitempty"`

	// is adjusted
	IsAdjusted bool `json:"isAdjusted,omitempty"`

	// payment external key
	PaymentExternalKey string `json:"paymentExternalKey,omitempty"`

	// Associated payment id, required when notifying state transitions
	// Format: uuid
	PaymentID strfmt.UUID `json:"paymentId,omitempty"`

	// processed amount
	ProcessedAmount float64 `json:"processedAmount,omitempty"`

	// processed currency
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	ProcessedCurrency string `json:"processedCurrency,omitempty"`

	// properties
	Properties []*PluginProperty `json:"properties"`

	// second payment reference Id
	SecondPaymentReferenceID string `json:"secondPaymentReferenceId,omitempty"`

	// Transaction status, required for state change notifications
	// Enum: [SUCCESS UNKNOWN PENDING PAYMENT_FAILURE PLUGIN_FAILURE PAYMENT_SYSTEM_OFF]
	Status string `json:"status,omitempty"`

	// transaction external key
	TransactionExternalKey string `json:"transactionExternalKey,omitempty"`

	// transaction Id
	// Format: uuid
	TransactionID strfmt.UUID `json:"transactionId,omitempty"`

	// transaction type
	// Enum: [AUTHORIZE CAPTURE CHARGEBACK CREDIT PURCHASE REFUND VOID]
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this invoice payment transaction
func (m *InvoicePaymentTransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessedCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoicePaymentTransaction) validateAdjustments(formats strfmt.Registry) error {
	if swag.IsZero(m.Adjustments) { // not required
		return nil
	}

	for i := 0; i < len(m.Adjustments); i++ {
		if swag.IsZero(m.Adjustments[i]) { // not required
			continue
		}

		if m.Adjustments[i] != nil {
			if err := m.Adjustments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adjustments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adjustments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicePaymentTransaction) validateAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var invoicePaymentTransactionTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoicePaymentTransactionTypeCurrencyPropEnum = append(invoicePaymentTransactionTypeCurrencyPropEnum, v)
	}
}

const (

	// InvoicePaymentTransactionCurrencyAED captures enum value "AED"
	InvoicePaymentTransactionCurrencyAED string = "AED"

	// InvoicePaymentTransactionCurrencyAFN captures enum value "AFN"
	InvoicePaymentTransactionCurrencyAFN string = "AFN"

	// InvoicePaymentTransactionCurrencyALL captures enum value "ALL"
	InvoicePaymentTransactionCurrencyALL string = "ALL"

	// InvoicePaymentTransactionCurrencyAMD captures enum value "AMD"
	InvoicePaymentTransactionCurrencyAMD string = "AMD"

	// InvoicePaymentTransactionCurrencyANG captures enum value "ANG"
	InvoicePaymentTransactionCurrencyANG string = "ANG"

	// InvoicePaymentTransactionCurrencyAOA captures enum value "AOA"
	InvoicePaymentTransactionCurrencyAOA string = "AOA"

	// InvoicePaymentTransactionCurrencyARS captures enum value "ARS"
	InvoicePaymentTransactionCurrencyARS string = "ARS"

	// InvoicePaymentTransactionCurrencyAUD captures enum value "AUD"
	InvoicePaymentTransactionCurrencyAUD string = "AUD"

	// InvoicePaymentTransactionCurrencyAWG captures enum value "AWG"
	InvoicePaymentTransactionCurrencyAWG string = "AWG"

	// InvoicePaymentTransactionCurrencyAZN captures enum value "AZN"
	InvoicePaymentTransactionCurrencyAZN string = "AZN"

	// InvoicePaymentTransactionCurrencyBAM captures enum value "BAM"
	InvoicePaymentTransactionCurrencyBAM string = "BAM"

	// InvoicePaymentTransactionCurrencyBBD captures enum value "BBD"
	InvoicePaymentTransactionCurrencyBBD string = "BBD"

	// InvoicePaymentTransactionCurrencyBDT captures enum value "BDT"
	InvoicePaymentTransactionCurrencyBDT string = "BDT"

	// InvoicePaymentTransactionCurrencyBGN captures enum value "BGN"
	InvoicePaymentTransactionCurrencyBGN string = "BGN"

	// InvoicePaymentTransactionCurrencyBHD captures enum value "BHD"
	InvoicePaymentTransactionCurrencyBHD string = "BHD"

	// InvoicePaymentTransactionCurrencyBIF captures enum value "BIF"
	InvoicePaymentTransactionCurrencyBIF string = "BIF"

	// InvoicePaymentTransactionCurrencyBMD captures enum value "BMD"
	InvoicePaymentTransactionCurrencyBMD string = "BMD"

	// InvoicePaymentTransactionCurrencyBND captures enum value "BND"
	InvoicePaymentTransactionCurrencyBND string = "BND"

	// InvoicePaymentTransactionCurrencyBOB captures enum value "BOB"
	InvoicePaymentTransactionCurrencyBOB string = "BOB"

	// InvoicePaymentTransactionCurrencyBRL captures enum value "BRL"
	InvoicePaymentTransactionCurrencyBRL string = "BRL"

	// InvoicePaymentTransactionCurrencyBSD captures enum value "BSD"
	InvoicePaymentTransactionCurrencyBSD string = "BSD"

	// InvoicePaymentTransactionCurrencyBTN captures enum value "BTN"
	InvoicePaymentTransactionCurrencyBTN string = "BTN"

	// InvoicePaymentTransactionCurrencyBWP captures enum value "BWP"
	InvoicePaymentTransactionCurrencyBWP string = "BWP"

	// InvoicePaymentTransactionCurrencyBYR captures enum value "BYR"
	InvoicePaymentTransactionCurrencyBYR string = "BYR"

	// InvoicePaymentTransactionCurrencyBZD captures enum value "BZD"
	InvoicePaymentTransactionCurrencyBZD string = "BZD"

	// InvoicePaymentTransactionCurrencyCAD captures enum value "CAD"
	InvoicePaymentTransactionCurrencyCAD string = "CAD"

	// InvoicePaymentTransactionCurrencyCDF captures enum value "CDF"
	InvoicePaymentTransactionCurrencyCDF string = "CDF"

	// InvoicePaymentTransactionCurrencyCHF captures enum value "CHF"
	InvoicePaymentTransactionCurrencyCHF string = "CHF"

	// InvoicePaymentTransactionCurrencyCLP captures enum value "CLP"
	InvoicePaymentTransactionCurrencyCLP string = "CLP"

	// InvoicePaymentTransactionCurrencyCNY captures enum value "CNY"
	InvoicePaymentTransactionCurrencyCNY string = "CNY"

	// InvoicePaymentTransactionCurrencyCOP captures enum value "COP"
	InvoicePaymentTransactionCurrencyCOP string = "COP"

	// InvoicePaymentTransactionCurrencyCRC captures enum value "CRC"
	InvoicePaymentTransactionCurrencyCRC string = "CRC"

	// InvoicePaymentTransactionCurrencyCUC captures enum value "CUC"
	InvoicePaymentTransactionCurrencyCUC string = "CUC"

	// InvoicePaymentTransactionCurrencyCUP captures enum value "CUP"
	InvoicePaymentTransactionCurrencyCUP string = "CUP"

	// InvoicePaymentTransactionCurrencyCVE captures enum value "CVE"
	InvoicePaymentTransactionCurrencyCVE string = "CVE"

	// InvoicePaymentTransactionCurrencyCZK captures enum value "CZK"
	InvoicePaymentTransactionCurrencyCZK string = "CZK"

	// InvoicePaymentTransactionCurrencyDJF captures enum value "DJF"
	InvoicePaymentTransactionCurrencyDJF string = "DJF"

	// InvoicePaymentTransactionCurrencyDKK captures enum value "DKK"
	InvoicePaymentTransactionCurrencyDKK string = "DKK"

	// InvoicePaymentTransactionCurrencyDOP captures enum value "DOP"
	InvoicePaymentTransactionCurrencyDOP string = "DOP"

	// InvoicePaymentTransactionCurrencyDZD captures enum value "DZD"
	InvoicePaymentTransactionCurrencyDZD string = "DZD"

	// InvoicePaymentTransactionCurrencyEGP captures enum value "EGP"
	InvoicePaymentTransactionCurrencyEGP string = "EGP"

	// InvoicePaymentTransactionCurrencyERN captures enum value "ERN"
	InvoicePaymentTransactionCurrencyERN string = "ERN"

	// InvoicePaymentTransactionCurrencyETB captures enum value "ETB"
	InvoicePaymentTransactionCurrencyETB string = "ETB"

	// InvoicePaymentTransactionCurrencyEUR captures enum value "EUR"
	InvoicePaymentTransactionCurrencyEUR string = "EUR"

	// InvoicePaymentTransactionCurrencyFJD captures enum value "FJD"
	InvoicePaymentTransactionCurrencyFJD string = "FJD"

	// InvoicePaymentTransactionCurrencyFKP captures enum value "FKP"
	InvoicePaymentTransactionCurrencyFKP string = "FKP"

	// InvoicePaymentTransactionCurrencyGBP captures enum value "GBP"
	InvoicePaymentTransactionCurrencyGBP string = "GBP"

	// InvoicePaymentTransactionCurrencyGEL captures enum value "GEL"
	InvoicePaymentTransactionCurrencyGEL string = "GEL"

	// InvoicePaymentTransactionCurrencyGGP captures enum value "GGP"
	InvoicePaymentTransactionCurrencyGGP string = "GGP"

	// InvoicePaymentTransactionCurrencyGHS captures enum value "GHS"
	InvoicePaymentTransactionCurrencyGHS string = "GHS"

	// InvoicePaymentTransactionCurrencyGIP captures enum value "GIP"
	InvoicePaymentTransactionCurrencyGIP string = "GIP"

	// InvoicePaymentTransactionCurrencyGMD captures enum value "GMD"
	InvoicePaymentTransactionCurrencyGMD string = "GMD"

	// InvoicePaymentTransactionCurrencyGNF captures enum value "GNF"
	InvoicePaymentTransactionCurrencyGNF string = "GNF"

	// InvoicePaymentTransactionCurrencyGTQ captures enum value "GTQ"
	InvoicePaymentTransactionCurrencyGTQ string = "GTQ"

	// InvoicePaymentTransactionCurrencyGYD captures enum value "GYD"
	InvoicePaymentTransactionCurrencyGYD string = "GYD"

	// InvoicePaymentTransactionCurrencyHKD captures enum value "HKD"
	InvoicePaymentTransactionCurrencyHKD string = "HKD"

	// InvoicePaymentTransactionCurrencyHNL captures enum value "HNL"
	InvoicePaymentTransactionCurrencyHNL string = "HNL"

	// InvoicePaymentTransactionCurrencyHRK captures enum value "HRK"
	InvoicePaymentTransactionCurrencyHRK string = "HRK"

	// InvoicePaymentTransactionCurrencyHTG captures enum value "HTG"
	InvoicePaymentTransactionCurrencyHTG string = "HTG"

	// InvoicePaymentTransactionCurrencyHUF captures enum value "HUF"
	InvoicePaymentTransactionCurrencyHUF string = "HUF"

	// InvoicePaymentTransactionCurrencyIDR captures enum value "IDR"
	InvoicePaymentTransactionCurrencyIDR string = "IDR"

	// InvoicePaymentTransactionCurrencyILS captures enum value "ILS"
	InvoicePaymentTransactionCurrencyILS string = "ILS"

	// InvoicePaymentTransactionCurrencyIMP captures enum value "IMP"
	InvoicePaymentTransactionCurrencyIMP string = "IMP"

	// InvoicePaymentTransactionCurrencyINR captures enum value "INR"
	InvoicePaymentTransactionCurrencyINR string = "INR"

	// InvoicePaymentTransactionCurrencyIQD captures enum value "IQD"
	InvoicePaymentTransactionCurrencyIQD string = "IQD"

	// InvoicePaymentTransactionCurrencyIRR captures enum value "IRR"
	InvoicePaymentTransactionCurrencyIRR string = "IRR"

	// InvoicePaymentTransactionCurrencyISK captures enum value "ISK"
	InvoicePaymentTransactionCurrencyISK string = "ISK"

	// InvoicePaymentTransactionCurrencyJEP captures enum value "JEP"
	InvoicePaymentTransactionCurrencyJEP string = "JEP"

	// InvoicePaymentTransactionCurrencyJMD captures enum value "JMD"
	InvoicePaymentTransactionCurrencyJMD string = "JMD"

	// InvoicePaymentTransactionCurrencyJOD captures enum value "JOD"
	InvoicePaymentTransactionCurrencyJOD string = "JOD"

	// InvoicePaymentTransactionCurrencyJPY captures enum value "JPY"
	InvoicePaymentTransactionCurrencyJPY string = "JPY"

	// InvoicePaymentTransactionCurrencyKES captures enum value "KES"
	InvoicePaymentTransactionCurrencyKES string = "KES"

	// InvoicePaymentTransactionCurrencyKGS captures enum value "KGS"
	InvoicePaymentTransactionCurrencyKGS string = "KGS"

	// InvoicePaymentTransactionCurrencyKHR captures enum value "KHR"
	InvoicePaymentTransactionCurrencyKHR string = "KHR"

	// InvoicePaymentTransactionCurrencyKMF captures enum value "KMF"
	InvoicePaymentTransactionCurrencyKMF string = "KMF"

	// InvoicePaymentTransactionCurrencyKPW captures enum value "KPW"
	InvoicePaymentTransactionCurrencyKPW string = "KPW"

	// InvoicePaymentTransactionCurrencyKRW captures enum value "KRW"
	InvoicePaymentTransactionCurrencyKRW string = "KRW"

	// InvoicePaymentTransactionCurrencyKWD captures enum value "KWD"
	InvoicePaymentTransactionCurrencyKWD string = "KWD"

	// InvoicePaymentTransactionCurrencyKYD captures enum value "KYD"
	InvoicePaymentTransactionCurrencyKYD string = "KYD"

	// InvoicePaymentTransactionCurrencyKZT captures enum value "KZT"
	InvoicePaymentTransactionCurrencyKZT string = "KZT"

	// InvoicePaymentTransactionCurrencyLAK captures enum value "LAK"
	InvoicePaymentTransactionCurrencyLAK string = "LAK"

	// InvoicePaymentTransactionCurrencyLBP captures enum value "LBP"
	InvoicePaymentTransactionCurrencyLBP string = "LBP"

	// InvoicePaymentTransactionCurrencyLKR captures enum value "LKR"
	InvoicePaymentTransactionCurrencyLKR string = "LKR"

	// InvoicePaymentTransactionCurrencyLRD captures enum value "LRD"
	InvoicePaymentTransactionCurrencyLRD string = "LRD"

	// InvoicePaymentTransactionCurrencyLSL captures enum value "LSL"
	InvoicePaymentTransactionCurrencyLSL string = "LSL"

	// InvoicePaymentTransactionCurrencyLTL captures enum value "LTL"
	InvoicePaymentTransactionCurrencyLTL string = "LTL"

	// InvoicePaymentTransactionCurrencyLVL captures enum value "LVL"
	InvoicePaymentTransactionCurrencyLVL string = "LVL"

	// InvoicePaymentTransactionCurrencyLYD captures enum value "LYD"
	InvoicePaymentTransactionCurrencyLYD string = "LYD"

	// InvoicePaymentTransactionCurrencyMAD captures enum value "MAD"
	InvoicePaymentTransactionCurrencyMAD string = "MAD"

	// InvoicePaymentTransactionCurrencyMDL captures enum value "MDL"
	InvoicePaymentTransactionCurrencyMDL string = "MDL"

	// InvoicePaymentTransactionCurrencyMGA captures enum value "MGA"
	InvoicePaymentTransactionCurrencyMGA string = "MGA"

	// InvoicePaymentTransactionCurrencyMKD captures enum value "MKD"
	InvoicePaymentTransactionCurrencyMKD string = "MKD"

	// InvoicePaymentTransactionCurrencyMMK captures enum value "MMK"
	InvoicePaymentTransactionCurrencyMMK string = "MMK"

	// InvoicePaymentTransactionCurrencyMNT captures enum value "MNT"
	InvoicePaymentTransactionCurrencyMNT string = "MNT"

	// InvoicePaymentTransactionCurrencyMOP captures enum value "MOP"
	InvoicePaymentTransactionCurrencyMOP string = "MOP"

	// InvoicePaymentTransactionCurrencyMRO captures enum value "MRO"
	InvoicePaymentTransactionCurrencyMRO string = "MRO"

	// InvoicePaymentTransactionCurrencyMUR captures enum value "MUR"
	InvoicePaymentTransactionCurrencyMUR string = "MUR"

	// InvoicePaymentTransactionCurrencyMVR captures enum value "MVR"
	InvoicePaymentTransactionCurrencyMVR string = "MVR"

	// InvoicePaymentTransactionCurrencyMWK captures enum value "MWK"
	InvoicePaymentTransactionCurrencyMWK string = "MWK"

	// InvoicePaymentTransactionCurrencyMXN captures enum value "MXN"
	InvoicePaymentTransactionCurrencyMXN string = "MXN"

	// InvoicePaymentTransactionCurrencyMYR captures enum value "MYR"
	InvoicePaymentTransactionCurrencyMYR string = "MYR"

	// InvoicePaymentTransactionCurrencyMZN captures enum value "MZN"
	InvoicePaymentTransactionCurrencyMZN string = "MZN"

	// InvoicePaymentTransactionCurrencyNAD captures enum value "NAD"
	InvoicePaymentTransactionCurrencyNAD string = "NAD"

	// InvoicePaymentTransactionCurrencyNGN captures enum value "NGN"
	InvoicePaymentTransactionCurrencyNGN string = "NGN"

	// InvoicePaymentTransactionCurrencyNIO captures enum value "NIO"
	InvoicePaymentTransactionCurrencyNIO string = "NIO"

	// InvoicePaymentTransactionCurrencyNOK captures enum value "NOK"
	InvoicePaymentTransactionCurrencyNOK string = "NOK"

	// InvoicePaymentTransactionCurrencyNPR captures enum value "NPR"
	InvoicePaymentTransactionCurrencyNPR string = "NPR"

	// InvoicePaymentTransactionCurrencyNZD captures enum value "NZD"
	InvoicePaymentTransactionCurrencyNZD string = "NZD"

	// InvoicePaymentTransactionCurrencyOMR captures enum value "OMR"
	InvoicePaymentTransactionCurrencyOMR string = "OMR"

	// InvoicePaymentTransactionCurrencyPAB captures enum value "PAB"
	InvoicePaymentTransactionCurrencyPAB string = "PAB"

	// InvoicePaymentTransactionCurrencyPEN captures enum value "PEN"
	InvoicePaymentTransactionCurrencyPEN string = "PEN"

	// InvoicePaymentTransactionCurrencyPGK captures enum value "PGK"
	InvoicePaymentTransactionCurrencyPGK string = "PGK"

	// InvoicePaymentTransactionCurrencyPHP captures enum value "PHP"
	InvoicePaymentTransactionCurrencyPHP string = "PHP"

	// InvoicePaymentTransactionCurrencyPKR captures enum value "PKR"
	InvoicePaymentTransactionCurrencyPKR string = "PKR"

	// InvoicePaymentTransactionCurrencyPLN captures enum value "PLN"
	InvoicePaymentTransactionCurrencyPLN string = "PLN"

	// InvoicePaymentTransactionCurrencyPYG captures enum value "PYG"
	InvoicePaymentTransactionCurrencyPYG string = "PYG"

	// InvoicePaymentTransactionCurrencyQAR captures enum value "QAR"
	InvoicePaymentTransactionCurrencyQAR string = "QAR"

	// InvoicePaymentTransactionCurrencyRON captures enum value "RON"
	InvoicePaymentTransactionCurrencyRON string = "RON"

	// InvoicePaymentTransactionCurrencyRSD captures enum value "RSD"
	InvoicePaymentTransactionCurrencyRSD string = "RSD"

	// InvoicePaymentTransactionCurrencyRUB captures enum value "RUB"
	InvoicePaymentTransactionCurrencyRUB string = "RUB"

	// InvoicePaymentTransactionCurrencyRWF captures enum value "RWF"
	InvoicePaymentTransactionCurrencyRWF string = "RWF"

	// InvoicePaymentTransactionCurrencySAR captures enum value "SAR"
	InvoicePaymentTransactionCurrencySAR string = "SAR"

	// InvoicePaymentTransactionCurrencySBD captures enum value "SBD"
	InvoicePaymentTransactionCurrencySBD string = "SBD"

	// InvoicePaymentTransactionCurrencySCR captures enum value "SCR"
	InvoicePaymentTransactionCurrencySCR string = "SCR"

	// InvoicePaymentTransactionCurrencySDG captures enum value "SDG"
	InvoicePaymentTransactionCurrencySDG string = "SDG"

	// InvoicePaymentTransactionCurrencySEK captures enum value "SEK"
	InvoicePaymentTransactionCurrencySEK string = "SEK"

	// InvoicePaymentTransactionCurrencySGD captures enum value "SGD"
	InvoicePaymentTransactionCurrencySGD string = "SGD"

	// InvoicePaymentTransactionCurrencySHP captures enum value "SHP"
	InvoicePaymentTransactionCurrencySHP string = "SHP"

	// InvoicePaymentTransactionCurrencySLL captures enum value "SLL"
	InvoicePaymentTransactionCurrencySLL string = "SLL"

	// InvoicePaymentTransactionCurrencySOS captures enum value "SOS"
	InvoicePaymentTransactionCurrencySOS string = "SOS"

	// InvoicePaymentTransactionCurrencySPL captures enum value "SPL"
	InvoicePaymentTransactionCurrencySPL string = "SPL"

	// InvoicePaymentTransactionCurrencySRD captures enum value "SRD"
	InvoicePaymentTransactionCurrencySRD string = "SRD"

	// InvoicePaymentTransactionCurrencySTD captures enum value "STD"
	InvoicePaymentTransactionCurrencySTD string = "STD"

	// InvoicePaymentTransactionCurrencySVC captures enum value "SVC"
	InvoicePaymentTransactionCurrencySVC string = "SVC"

	// InvoicePaymentTransactionCurrencySYP captures enum value "SYP"
	InvoicePaymentTransactionCurrencySYP string = "SYP"

	// InvoicePaymentTransactionCurrencySZL captures enum value "SZL"
	InvoicePaymentTransactionCurrencySZL string = "SZL"

	// InvoicePaymentTransactionCurrencyTHB captures enum value "THB"
	InvoicePaymentTransactionCurrencyTHB string = "THB"

	// InvoicePaymentTransactionCurrencyTJS captures enum value "TJS"
	InvoicePaymentTransactionCurrencyTJS string = "TJS"

	// InvoicePaymentTransactionCurrencyTMT captures enum value "TMT"
	InvoicePaymentTransactionCurrencyTMT string = "TMT"

	// InvoicePaymentTransactionCurrencyTND captures enum value "TND"
	InvoicePaymentTransactionCurrencyTND string = "TND"

	// InvoicePaymentTransactionCurrencyTOP captures enum value "TOP"
	InvoicePaymentTransactionCurrencyTOP string = "TOP"

	// InvoicePaymentTransactionCurrencyTRY captures enum value "TRY"
	InvoicePaymentTransactionCurrencyTRY string = "TRY"

	// InvoicePaymentTransactionCurrencyTTD captures enum value "TTD"
	InvoicePaymentTransactionCurrencyTTD string = "TTD"

	// InvoicePaymentTransactionCurrencyTVD captures enum value "TVD"
	InvoicePaymentTransactionCurrencyTVD string = "TVD"

	// InvoicePaymentTransactionCurrencyTWD captures enum value "TWD"
	InvoicePaymentTransactionCurrencyTWD string = "TWD"

	// InvoicePaymentTransactionCurrencyTZS captures enum value "TZS"
	InvoicePaymentTransactionCurrencyTZS string = "TZS"

	// InvoicePaymentTransactionCurrencyUAH captures enum value "UAH"
	InvoicePaymentTransactionCurrencyUAH string = "UAH"

	// InvoicePaymentTransactionCurrencyUGX captures enum value "UGX"
	InvoicePaymentTransactionCurrencyUGX string = "UGX"

	// InvoicePaymentTransactionCurrencyUSD captures enum value "USD"
	InvoicePaymentTransactionCurrencyUSD string = "USD"

	// InvoicePaymentTransactionCurrencyUYU captures enum value "UYU"
	InvoicePaymentTransactionCurrencyUYU string = "UYU"

	// InvoicePaymentTransactionCurrencyUZS captures enum value "UZS"
	InvoicePaymentTransactionCurrencyUZS string = "UZS"

	// InvoicePaymentTransactionCurrencyVEF captures enum value "VEF"
	InvoicePaymentTransactionCurrencyVEF string = "VEF"

	// InvoicePaymentTransactionCurrencyVND captures enum value "VND"
	InvoicePaymentTransactionCurrencyVND string = "VND"

	// InvoicePaymentTransactionCurrencyVUV captures enum value "VUV"
	InvoicePaymentTransactionCurrencyVUV string = "VUV"

	// InvoicePaymentTransactionCurrencyWST captures enum value "WST"
	InvoicePaymentTransactionCurrencyWST string = "WST"

	// InvoicePaymentTransactionCurrencyXAF captures enum value "XAF"
	InvoicePaymentTransactionCurrencyXAF string = "XAF"

	// InvoicePaymentTransactionCurrencyXCD captures enum value "XCD"
	InvoicePaymentTransactionCurrencyXCD string = "XCD"

	// InvoicePaymentTransactionCurrencyXDR captures enum value "XDR"
	InvoicePaymentTransactionCurrencyXDR string = "XDR"

	// InvoicePaymentTransactionCurrencyXOF captures enum value "XOF"
	InvoicePaymentTransactionCurrencyXOF string = "XOF"

	// InvoicePaymentTransactionCurrencyXPF captures enum value "XPF"
	InvoicePaymentTransactionCurrencyXPF string = "XPF"

	// InvoicePaymentTransactionCurrencyYER captures enum value "YER"
	InvoicePaymentTransactionCurrencyYER string = "YER"

	// InvoicePaymentTransactionCurrencyZAR captures enum value "ZAR"
	InvoicePaymentTransactionCurrencyZAR string = "ZAR"

	// InvoicePaymentTransactionCurrencyZMW captures enum value "ZMW"
	InvoicePaymentTransactionCurrencyZMW string = "ZMW"

	// InvoicePaymentTransactionCurrencyZWD captures enum value "ZWD"
	InvoicePaymentTransactionCurrencyZWD string = "ZWD"

	// InvoicePaymentTransactionCurrencyBTC captures enum value "BTC"
	InvoicePaymentTransactionCurrencyBTC string = "BTC"
)

// prop value enum
func (m *InvoicePaymentTransaction) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, invoicePaymentTransactionTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InvoicePaymentTransaction) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePaymentTransaction) validateEffectiveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveDate", "body", "date-time", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePaymentTransaction) validatePaymentID(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentID) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentId", "body", "uuid", m.PaymentID.String(), formats); err != nil {
		return err
	}

	return nil
}

var invoicePaymentTransactionTypeProcessedCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoicePaymentTransactionTypeProcessedCurrencyPropEnum = append(invoicePaymentTransactionTypeProcessedCurrencyPropEnum, v)
	}
}

const (

	// InvoicePaymentTransactionProcessedCurrencyAED captures enum value "AED"
	InvoicePaymentTransactionProcessedCurrencyAED string = "AED"

	// InvoicePaymentTransactionProcessedCurrencyAFN captures enum value "AFN"
	InvoicePaymentTransactionProcessedCurrencyAFN string = "AFN"

	// InvoicePaymentTransactionProcessedCurrencyALL captures enum value "ALL"
	InvoicePaymentTransactionProcessedCurrencyALL string = "ALL"

	// InvoicePaymentTransactionProcessedCurrencyAMD captures enum value "AMD"
	InvoicePaymentTransactionProcessedCurrencyAMD string = "AMD"

	// InvoicePaymentTransactionProcessedCurrencyANG captures enum value "ANG"
	InvoicePaymentTransactionProcessedCurrencyANG string = "ANG"

	// InvoicePaymentTransactionProcessedCurrencyAOA captures enum value "AOA"
	InvoicePaymentTransactionProcessedCurrencyAOA string = "AOA"

	// InvoicePaymentTransactionProcessedCurrencyARS captures enum value "ARS"
	InvoicePaymentTransactionProcessedCurrencyARS string = "ARS"

	// InvoicePaymentTransactionProcessedCurrencyAUD captures enum value "AUD"
	InvoicePaymentTransactionProcessedCurrencyAUD string = "AUD"

	// InvoicePaymentTransactionProcessedCurrencyAWG captures enum value "AWG"
	InvoicePaymentTransactionProcessedCurrencyAWG string = "AWG"

	// InvoicePaymentTransactionProcessedCurrencyAZN captures enum value "AZN"
	InvoicePaymentTransactionProcessedCurrencyAZN string = "AZN"

	// InvoicePaymentTransactionProcessedCurrencyBAM captures enum value "BAM"
	InvoicePaymentTransactionProcessedCurrencyBAM string = "BAM"

	// InvoicePaymentTransactionProcessedCurrencyBBD captures enum value "BBD"
	InvoicePaymentTransactionProcessedCurrencyBBD string = "BBD"

	// InvoicePaymentTransactionProcessedCurrencyBDT captures enum value "BDT"
	InvoicePaymentTransactionProcessedCurrencyBDT string = "BDT"

	// InvoicePaymentTransactionProcessedCurrencyBGN captures enum value "BGN"
	InvoicePaymentTransactionProcessedCurrencyBGN string = "BGN"

	// InvoicePaymentTransactionProcessedCurrencyBHD captures enum value "BHD"
	InvoicePaymentTransactionProcessedCurrencyBHD string = "BHD"

	// InvoicePaymentTransactionProcessedCurrencyBIF captures enum value "BIF"
	InvoicePaymentTransactionProcessedCurrencyBIF string = "BIF"

	// InvoicePaymentTransactionProcessedCurrencyBMD captures enum value "BMD"
	InvoicePaymentTransactionProcessedCurrencyBMD string = "BMD"

	// InvoicePaymentTransactionProcessedCurrencyBND captures enum value "BND"
	InvoicePaymentTransactionProcessedCurrencyBND string = "BND"

	// InvoicePaymentTransactionProcessedCurrencyBOB captures enum value "BOB"
	InvoicePaymentTransactionProcessedCurrencyBOB string = "BOB"

	// InvoicePaymentTransactionProcessedCurrencyBRL captures enum value "BRL"
	InvoicePaymentTransactionProcessedCurrencyBRL string = "BRL"

	// InvoicePaymentTransactionProcessedCurrencyBSD captures enum value "BSD"
	InvoicePaymentTransactionProcessedCurrencyBSD string = "BSD"

	// InvoicePaymentTransactionProcessedCurrencyBTN captures enum value "BTN"
	InvoicePaymentTransactionProcessedCurrencyBTN string = "BTN"

	// InvoicePaymentTransactionProcessedCurrencyBWP captures enum value "BWP"
	InvoicePaymentTransactionProcessedCurrencyBWP string = "BWP"

	// InvoicePaymentTransactionProcessedCurrencyBYR captures enum value "BYR"
	InvoicePaymentTransactionProcessedCurrencyBYR string = "BYR"

	// InvoicePaymentTransactionProcessedCurrencyBZD captures enum value "BZD"
	InvoicePaymentTransactionProcessedCurrencyBZD string = "BZD"

	// InvoicePaymentTransactionProcessedCurrencyCAD captures enum value "CAD"
	InvoicePaymentTransactionProcessedCurrencyCAD string = "CAD"

	// InvoicePaymentTransactionProcessedCurrencyCDF captures enum value "CDF"
	InvoicePaymentTransactionProcessedCurrencyCDF string = "CDF"

	// InvoicePaymentTransactionProcessedCurrencyCHF captures enum value "CHF"
	InvoicePaymentTransactionProcessedCurrencyCHF string = "CHF"

	// InvoicePaymentTransactionProcessedCurrencyCLP captures enum value "CLP"
	InvoicePaymentTransactionProcessedCurrencyCLP string = "CLP"

	// InvoicePaymentTransactionProcessedCurrencyCNY captures enum value "CNY"
	InvoicePaymentTransactionProcessedCurrencyCNY string = "CNY"

	// InvoicePaymentTransactionProcessedCurrencyCOP captures enum value "COP"
	InvoicePaymentTransactionProcessedCurrencyCOP string = "COP"

	// InvoicePaymentTransactionProcessedCurrencyCRC captures enum value "CRC"
	InvoicePaymentTransactionProcessedCurrencyCRC string = "CRC"

	// InvoicePaymentTransactionProcessedCurrencyCUC captures enum value "CUC"
	InvoicePaymentTransactionProcessedCurrencyCUC string = "CUC"

	// InvoicePaymentTransactionProcessedCurrencyCUP captures enum value "CUP"
	InvoicePaymentTransactionProcessedCurrencyCUP string = "CUP"

	// InvoicePaymentTransactionProcessedCurrencyCVE captures enum value "CVE"
	InvoicePaymentTransactionProcessedCurrencyCVE string = "CVE"

	// InvoicePaymentTransactionProcessedCurrencyCZK captures enum value "CZK"
	InvoicePaymentTransactionProcessedCurrencyCZK string = "CZK"

	// InvoicePaymentTransactionProcessedCurrencyDJF captures enum value "DJF"
	InvoicePaymentTransactionProcessedCurrencyDJF string = "DJF"

	// InvoicePaymentTransactionProcessedCurrencyDKK captures enum value "DKK"
	InvoicePaymentTransactionProcessedCurrencyDKK string = "DKK"

	// InvoicePaymentTransactionProcessedCurrencyDOP captures enum value "DOP"
	InvoicePaymentTransactionProcessedCurrencyDOP string = "DOP"

	// InvoicePaymentTransactionProcessedCurrencyDZD captures enum value "DZD"
	InvoicePaymentTransactionProcessedCurrencyDZD string = "DZD"

	// InvoicePaymentTransactionProcessedCurrencyEGP captures enum value "EGP"
	InvoicePaymentTransactionProcessedCurrencyEGP string = "EGP"

	// InvoicePaymentTransactionProcessedCurrencyERN captures enum value "ERN"
	InvoicePaymentTransactionProcessedCurrencyERN string = "ERN"

	// InvoicePaymentTransactionProcessedCurrencyETB captures enum value "ETB"
	InvoicePaymentTransactionProcessedCurrencyETB string = "ETB"

	// InvoicePaymentTransactionProcessedCurrencyEUR captures enum value "EUR"
	InvoicePaymentTransactionProcessedCurrencyEUR string = "EUR"

	// InvoicePaymentTransactionProcessedCurrencyFJD captures enum value "FJD"
	InvoicePaymentTransactionProcessedCurrencyFJD string = "FJD"

	// InvoicePaymentTransactionProcessedCurrencyFKP captures enum value "FKP"
	InvoicePaymentTransactionProcessedCurrencyFKP string = "FKP"

	// InvoicePaymentTransactionProcessedCurrencyGBP captures enum value "GBP"
	InvoicePaymentTransactionProcessedCurrencyGBP string = "GBP"

	// InvoicePaymentTransactionProcessedCurrencyGEL captures enum value "GEL"
	InvoicePaymentTransactionProcessedCurrencyGEL string = "GEL"

	// InvoicePaymentTransactionProcessedCurrencyGGP captures enum value "GGP"
	InvoicePaymentTransactionProcessedCurrencyGGP string = "GGP"

	// InvoicePaymentTransactionProcessedCurrencyGHS captures enum value "GHS"
	InvoicePaymentTransactionProcessedCurrencyGHS string = "GHS"

	// InvoicePaymentTransactionProcessedCurrencyGIP captures enum value "GIP"
	InvoicePaymentTransactionProcessedCurrencyGIP string = "GIP"

	// InvoicePaymentTransactionProcessedCurrencyGMD captures enum value "GMD"
	InvoicePaymentTransactionProcessedCurrencyGMD string = "GMD"

	// InvoicePaymentTransactionProcessedCurrencyGNF captures enum value "GNF"
	InvoicePaymentTransactionProcessedCurrencyGNF string = "GNF"

	// InvoicePaymentTransactionProcessedCurrencyGTQ captures enum value "GTQ"
	InvoicePaymentTransactionProcessedCurrencyGTQ string = "GTQ"

	// InvoicePaymentTransactionProcessedCurrencyGYD captures enum value "GYD"
	InvoicePaymentTransactionProcessedCurrencyGYD string = "GYD"

	// InvoicePaymentTransactionProcessedCurrencyHKD captures enum value "HKD"
	InvoicePaymentTransactionProcessedCurrencyHKD string = "HKD"

	// InvoicePaymentTransactionProcessedCurrencyHNL captures enum value "HNL"
	InvoicePaymentTransactionProcessedCurrencyHNL string = "HNL"

	// InvoicePaymentTransactionProcessedCurrencyHRK captures enum value "HRK"
	InvoicePaymentTransactionProcessedCurrencyHRK string = "HRK"

	// InvoicePaymentTransactionProcessedCurrencyHTG captures enum value "HTG"
	InvoicePaymentTransactionProcessedCurrencyHTG string = "HTG"

	// InvoicePaymentTransactionProcessedCurrencyHUF captures enum value "HUF"
	InvoicePaymentTransactionProcessedCurrencyHUF string = "HUF"

	// InvoicePaymentTransactionProcessedCurrencyIDR captures enum value "IDR"
	InvoicePaymentTransactionProcessedCurrencyIDR string = "IDR"

	// InvoicePaymentTransactionProcessedCurrencyILS captures enum value "ILS"
	InvoicePaymentTransactionProcessedCurrencyILS string = "ILS"

	// InvoicePaymentTransactionProcessedCurrencyIMP captures enum value "IMP"
	InvoicePaymentTransactionProcessedCurrencyIMP string = "IMP"

	// InvoicePaymentTransactionProcessedCurrencyINR captures enum value "INR"
	InvoicePaymentTransactionProcessedCurrencyINR string = "INR"

	// InvoicePaymentTransactionProcessedCurrencyIQD captures enum value "IQD"
	InvoicePaymentTransactionProcessedCurrencyIQD string = "IQD"

	// InvoicePaymentTransactionProcessedCurrencyIRR captures enum value "IRR"
	InvoicePaymentTransactionProcessedCurrencyIRR string = "IRR"

	// InvoicePaymentTransactionProcessedCurrencyISK captures enum value "ISK"
	InvoicePaymentTransactionProcessedCurrencyISK string = "ISK"

	// InvoicePaymentTransactionProcessedCurrencyJEP captures enum value "JEP"
	InvoicePaymentTransactionProcessedCurrencyJEP string = "JEP"

	// InvoicePaymentTransactionProcessedCurrencyJMD captures enum value "JMD"
	InvoicePaymentTransactionProcessedCurrencyJMD string = "JMD"

	// InvoicePaymentTransactionProcessedCurrencyJOD captures enum value "JOD"
	InvoicePaymentTransactionProcessedCurrencyJOD string = "JOD"

	// InvoicePaymentTransactionProcessedCurrencyJPY captures enum value "JPY"
	InvoicePaymentTransactionProcessedCurrencyJPY string = "JPY"

	// InvoicePaymentTransactionProcessedCurrencyKES captures enum value "KES"
	InvoicePaymentTransactionProcessedCurrencyKES string = "KES"

	// InvoicePaymentTransactionProcessedCurrencyKGS captures enum value "KGS"
	InvoicePaymentTransactionProcessedCurrencyKGS string = "KGS"

	// InvoicePaymentTransactionProcessedCurrencyKHR captures enum value "KHR"
	InvoicePaymentTransactionProcessedCurrencyKHR string = "KHR"

	// InvoicePaymentTransactionProcessedCurrencyKMF captures enum value "KMF"
	InvoicePaymentTransactionProcessedCurrencyKMF string = "KMF"

	// InvoicePaymentTransactionProcessedCurrencyKPW captures enum value "KPW"
	InvoicePaymentTransactionProcessedCurrencyKPW string = "KPW"

	// InvoicePaymentTransactionProcessedCurrencyKRW captures enum value "KRW"
	InvoicePaymentTransactionProcessedCurrencyKRW string = "KRW"

	// InvoicePaymentTransactionProcessedCurrencyKWD captures enum value "KWD"
	InvoicePaymentTransactionProcessedCurrencyKWD string = "KWD"

	// InvoicePaymentTransactionProcessedCurrencyKYD captures enum value "KYD"
	InvoicePaymentTransactionProcessedCurrencyKYD string = "KYD"

	// InvoicePaymentTransactionProcessedCurrencyKZT captures enum value "KZT"
	InvoicePaymentTransactionProcessedCurrencyKZT string = "KZT"

	// InvoicePaymentTransactionProcessedCurrencyLAK captures enum value "LAK"
	InvoicePaymentTransactionProcessedCurrencyLAK string = "LAK"

	// InvoicePaymentTransactionProcessedCurrencyLBP captures enum value "LBP"
	InvoicePaymentTransactionProcessedCurrencyLBP string = "LBP"

	// InvoicePaymentTransactionProcessedCurrencyLKR captures enum value "LKR"
	InvoicePaymentTransactionProcessedCurrencyLKR string = "LKR"

	// InvoicePaymentTransactionProcessedCurrencyLRD captures enum value "LRD"
	InvoicePaymentTransactionProcessedCurrencyLRD string = "LRD"

	// InvoicePaymentTransactionProcessedCurrencyLSL captures enum value "LSL"
	InvoicePaymentTransactionProcessedCurrencyLSL string = "LSL"

	// InvoicePaymentTransactionProcessedCurrencyLTL captures enum value "LTL"
	InvoicePaymentTransactionProcessedCurrencyLTL string = "LTL"

	// InvoicePaymentTransactionProcessedCurrencyLVL captures enum value "LVL"
	InvoicePaymentTransactionProcessedCurrencyLVL string = "LVL"

	// InvoicePaymentTransactionProcessedCurrencyLYD captures enum value "LYD"
	InvoicePaymentTransactionProcessedCurrencyLYD string = "LYD"

	// InvoicePaymentTransactionProcessedCurrencyMAD captures enum value "MAD"
	InvoicePaymentTransactionProcessedCurrencyMAD string = "MAD"

	// InvoicePaymentTransactionProcessedCurrencyMDL captures enum value "MDL"
	InvoicePaymentTransactionProcessedCurrencyMDL string = "MDL"

	// InvoicePaymentTransactionProcessedCurrencyMGA captures enum value "MGA"
	InvoicePaymentTransactionProcessedCurrencyMGA string = "MGA"

	// InvoicePaymentTransactionProcessedCurrencyMKD captures enum value "MKD"
	InvoicePaymentTransactionProcessedCurrencyMKD string = "MKD"

	// InvoicePaymentTransactionProcessedCurrencyMMK captures enum value "MMK"
	InvoicePaymentTransactionProcessedCurrencyMMK string = "MMK"

	// InvoicePaymentTransactionProcessedCurrencyMNT captures enum value "MNT"
	InvoicePaymentTransactionProcessedCurrencyMNT string = "MNT"

	// InvoicePaymentTransactionProcessedCurrencyMOP captures enum value "MOP"
	InvoicePaymentTransactionProcessedCurrencyMOP string = "MOP"

	// InvoicePaymentTransactionProcessedCurrencyMRO captures enum value "MRO"
	InvoicePaymentTransactionProcessedCurrencyMRO string = "MRO"

	// InvoicePaymentTransactionProcessedCurrencyMUR captures enum value "MUR"
	InvoicePaymentTransactionProcessedCurrencyMUR string = "MUR"

	// InvoicePaymentTransactionProcessedCurrencyMVR captures enum value "MVR"
	InvoicePaymentTransactionProcessedCurrencyMVR string = "MVR"

	// InvoicePaymentTransactionProcessedCurrencyMWK captures enum value "MWK"
	InvoicePaymentTransactionProcessedCurrencyMWK string = "MWK"

	// InvoicePaymentTransactionProcessedCurrencyMXN captures enum value "MXN"
	InvoicePaymentTransactionProcessedCurrencyMXN string = "MXN"

	// InvoicePaymentTransactionProcessedCurrencyMYR captures enum value "MYR"
	InvoicePaymentTransactionProcessedCurrencyMYR string = "MYR"

	// InvoicePaymentTransactionProcessedCurrencyMZN captures enum value "MZN"
	InvoicePaymentTransactionProcessedCurrencyMZN string = "MZN"

	// InvoicePaymentTransactionProcessedCurrencyNAD captures enum value "NAD"
	InvoicePaymentTransactionProcessedCurrencyNAD string = "NAD"

	// InvoicePaymentTransactionProcessedCurrencyNGN captures enum value "NGN"
	InvoicePaymentTransactionProcessedCurrencyNGN string = "NGN"

	// InvoicePaymentTransactionProcessedCurrencyNIO captures enum value "NIO"
	InvoicePaymentTransactionProcessedCurrencyNIO string = "NIO"

	// InvoicePaymentTransactionProcessedCurrencyNOK captures enum value "NOK"
	InvoicePaymentTransactionProcessedCurrencyNOK string = "NOK"

	// InvoicePaymentTransactionProcessedCurrencyNPR captures enum value "NPR"
	InvoicePaymentTransactionProcessedCurrencyNPR string = "NPR"

	// InvoicePaymentTransactionProcessedCurrencyNZD captures enum value "NZD"
	InvoicePaymentTransactionProcessedCurrencyNZD string = "NZD"

	// InvoicePaymentTransactionProcessedCurrencyOMR captures enum value "OMR"
	InvoicePaymentTransactionProcessedCurrencyOMR string = "OMR"

	// InvoicePaymentTransactionProcessedCurrencyPAB captures enum value "PAB"
	InvoicePaymentTransactionProcessedCurrencyPAB string = "PAB"

	// InvoicePaymentTransactionProcessedCurrencyPEN captures enum value "PEN"
	InvoicePaymentTransactionProcessedCurrencyPEN string = "PEN"

	// InvoicePaymentTransactionProcessedCurrencyPGK captures enum value "PGK"
	InvoicePaymentTransactionProcessedCurrencyPGK string = "PGK"

	// InvoicePaymentTransactionProcessedCurrencyPHP captures enum value "PHP"
	InvoicePaymentTransactionProcessedCurrencyPHP string = "PHP"

	// InvoicePaymentTransactionProcessedCurrencyPKR captures enum value "PKR"
	InvoicePaymentTransactionProcessedCurrencyPKR string = "PKR"

	// InvoicePaymentTransactionProcessedCurrencyPLN captures enum value "PLN"
	InvoicePaymentTransactionProcessedCurrencyPLN string = "PLN"

	// InvoicePaymentTransactionProcessedCurrencyPYG captures enum value "PYG"
	InvoicePaymentTransactionProcessedCurrencyPYG string = "PYG"

	// InvoicePaymentTransactionProcessedCurrencyQAR captures enum value "QAR"
	InvoicePaymentTransactionProcessedCurrencyQAR string = "QAR"

	// InvoicePaymentTransactionProcessedCurrencyRON captures enum value "RON"
	InvoicePaymentTransactionProcessedCurrencyRON string = "RON"

	// InvoicePaymentTransactionProcessedCurrencyRSD captures enum value "RSD"
	InvoicePaymentTransactionProcessedCurrencyRSD string = "RSD"

	// InvoicePaymentTransactionProcessedCurrencyRUB captures enum value "RUB"
	InvoicePaymentTransactionProcessedCurrencyRUB string = "RUB"

	// InvoicePaymentTransactionProcessedCurrencyRWF captures enum value "RWF"
	InvoicePaymentTransactionProcessedCurrencyRWF string = "RWF"

	// InvoicePaymentTransactionProcessedCurrencySAR captures enum value "SAR"
	InvoicePaymentTransactionProcessedCurrencySAR string = "SAR"

	// InvoicePaymentTransactionProcessedCurrencySBD captures enum value "SBD"
	InvoicePaymentTransactionProcessedCurrencySBD string = "SBD"

	// InvoicePaymentTransactionProcessedCurrencySCR captures enum value "SCR"
	InvoicePaymentTransactionProcessedCurrencySCR string = "SCR"

	// InvoicePaymentTransactionProcessedCurrencySDG captures enum value "SDG"
	InvoicePaymentTransactionProcessedCurrencySDG string = "SDG"

	// InvoicePaymentTransactionProcessedCurrencySEK captures enum value "SEK"
	InvoicePaymentTransactionProcessedCurrencySEK string = "SEK"

	// InvoicePaymentTransactionProcessedCurrencySGD captures enum value "SGD"
	InvoicePaymentTransactionProcessedCurrencySGD string = "SGD"

	// InvoicePaymentTransactionProcessedCurrencySHP captures enum value "SHP"
	InvoicePaymentTransactionProcessedCurrencySHP string = "SHP"

	// InvoicePaymentTransactionProcessedCurrencySLL captures enum value "SLL"
	InvoicePaymentTransactionProcessedCurrencySLL string = "SLL"

	// InvoicePaymentTransactionProcessedCurrencySOS captures enum value "SOS"
	InvoicePaymentTransactionProcessedCurrencySOS string = "SOS"

	// InvoicePaymentTransactionProcessedCurrencySPL captures enum value "SPL"
	InvoicePaymentTransactionProcessedCurrencySPL string = "SPL"

	// InvoicePaymentTransactionProcessedCurrencySRD captures enum value "SRD"
	InvoicePaymentTransactionProcessedCurrencySRD string = "SRD"

	// InvoicePaymentTransactionProcessedCurrencySTD captures enum value "STD"
	InvoicePaymentTransactionProcessedCurrencySTD string = "STD"

	// InvoicePaymentTransactionProcessedCurrencySVC captures enum value "SVC"
	InvoicePaymentTransactionProcessedCurrencySVC string = "SVC"

	// InvoicePaymentTransactionProcessedCurrencySYP captures enum value "SYP"
	InvoicePaymentTransactionProcessedCurrencySYP string = "SYP"

	// InvoicePaymentTransactionProcessedCurrencySZL captures enum value "SZL"
	InvoicePaymentTransactionProcessedCurrencySZL string = "SZL"

	// InvoicePaymentTransactionProcessedCurrencyTHB captures enum value "THB"
	InvoicePaymentTransactionProcessedCurrencyTHB string = "THB"

	// InvoicePaymentTransactionProcessedCurrencyTJS captures enum value "TJS"
	InvoicePaymentTransactionProcessedCurrencyTJS string = "TJS"

	// InvoicePaymentTransactionProcessedCurrencyTMT captures enum value "TMT"
	InvoicePaymentTransactionProcessedCurrencyTMT string = "TMT"

	// InvoicePaymentTransactionProcessedCurrencyTND captures enum value "TND"
	InvoicePaymentTransactionProcessedCurrencyTND string = "TND"

	// InvoicePaymentTransactionProcessedCurrencyTOP captures enum value "TOP"
	InvoicePaymentTransactionProcessedCurrencyTOP string = "TOP"

	// InvoicePaymentTransactionProcessedCurrencyTRY captures enum value "TRY"
	InvoicePaymentTransactionProcessedCurrencyTRY string = "TRY"

	// InvoicePaymentTransactionProcessedCurrencyTTD captures enum value "TTD"
	InvoicePaymentTransactionProcessedCurrencyTTD string = "TTD"

	// InvoicePaymentTransactionProcessedCurrencyTVD captures enum value "TVD"
	InvoicePaymentTransactionProcessedCurrencyTVD string = "TVD"

	// InvoicePaymentTransactionProcessedCurrencyTWD captures enum value "TWD"
	InvoicePaymentTransactionProcessedCurrencyTWD string = "TWD"

	// InvoicePaymentTransactionProcessedCurrencyTZS captures enum value "TZS"
	InvoicePaymentTransactionProcessedCurrencyTZS string = "TZS"

	// InvoicePaymentTransactionProcessedCurrencyUAH captures enum value "UAH"
	InvoicePaymentTransactionProcessedCurrencyUAH string = "UAH"

	// InvoicePaymentTransactionProcessedCurrencyUGX captures enum value "UGX"
	InvoicePaymentTransactionProcessedCurrencyUGX string = "UGX"

	// InvoicePaymentTransactionProcessedCurrencyUSD captures enum value "USD"
	InvoicePaymentTransactionProcessedCurrencyUSD string = "USD"

	// InvoicePaymentTransactionProcessedCurrencyUYU captures enum value "UYU"
	InvoicePaymentTransactionProcessedCurrencyUYU string = "UYU"

	// InvoicePaymentTransactionProcessedCurrencyUZS captures enum value "UZS"
	InvoicePaymentTransactionProcessedCurrencyUZS string = "UZS"

	// InvoicePaymentTransactionProcessedCurrencyVEF captures enum value "VEF"
	InvoicePaymentTransactionProcessedCurrencyVEF string = "VEF"

	// InvoicePaymentTransactionProcessedCurrencyVND captures enum value "VND"
	InvoicePaymentTransactionProcessedCurrencyVND string = "VND"

	// InvoicePaymentTransactionProcessedCurrencyVUV captures enum value "VUV"
	InvoicePaymentTransactionProcessedCurrencyVUV string = "VUV"

	// InvoicePaymentTransactionProcessedCurrencyWST captures enum value "WST"
	InvoicePaymentTransactionProcessedCurrencyWST string = "WST"

	// InvoicePaymentTransactionProcessedCurrencyXAF captures enum value "XAF"
	InvoicePaymentTransactionProcessedCurrencyXAF string = "XAF"

	// InvoicePaymentTransactionProcessedCurrencyXCD captures enum value "XCD"
	InvoicePaymentTransactionProcessedCurrencyXCD string = "XCD"

	// InvoicePaymentTransactionProcessedCurrencyXDR captures enum value "XDR"
	InvoicePaymentTransactionProcessedCurrencyXDR string = "XDR"

	// InvoicePaymentTransactionProcessedCurrencyXOF captures enum value "XOF"
	InvoicePaymentTransactionProcessedCurrencyXOF string = "XOF"

	// InvoicePaymentTransactionProcessedCurrencyXPF captures enum value "XPF"
	InvoicePaymentTransactionProcessedCurrencyXPF string = "XPF"

	// InvoicePaymentTransactionProcessedCurrencyYER captures enum value "YER"
	InvoicePaymentTransactionProcessedCurrencyYER string = "YER"

	// InvoicePaymentTransactionProcessedCurrencyZAR captures enum value "ZAR"
	InvoicePaymentTransactionProcessedCurrencyZAR string = "ZAR"

	// InvoicePaymentTransactionProcessedCurrencyZMW captures enum value "ZMW"
	InvoicePaymentTransactionProcessedCurrencyZMW string = "ZMW"

	// InvoicePaymentTransactionProcessedCurrencyZWD captures enum value "ZWD"
	InvoicePaymentTransactionProcessedCurrencyZWD string = "ZWD"

	// InvoicePaymentTransactionProcessedCurrencyBTC captures enum value "BTC"
	InvoicePaymentTransactionProcessedCurrencyBTC string = "BTC"
)

// prop value enum
func (m *InvoicePaymentTransaction) validateProcessedCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, invoicePaymentTransactionTypeProcessedCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InvoicePaymentTransaction) validateProcessedCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessedCurrency) { // not required
		return nil
	}

	// value enum
	if err := m.validateProcessedCurrencyEnum("processedCurrency", "body", m.ProcessedCurrency); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePaymentTransaction) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for i := 0; i < len(m.Properties); i++ {
		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {
			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var invoicePaymentTransactionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","UNKNOWN","PENDING","PAYMENT_FAILURE","PLUGIN_FAILURE","PAYMENT_SYSTEM_OFF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoicePaymentTransactionTypeStatusPropEnum = append(invoicePaymentTransactionTypeStatusPropEnum, v)
	}
}

const (

	// InvoicePaymentTransactionStatusSUCCESS captures enum value "SUCCESS"
	InvoicePaymentTransactionStatusSUCCESS string = "SUCCESS"

	// InvoicePaymentTransactionStatusUNKNOWN captures enum value "UNKNOWN"
	InvoicePaymentTransactionStatusUNKNOWN string = "UNKNOWN"

	// InvoicePaymentTransactionStatusPENDING captures enum value "PENDING"
	InvoicePaymentTransactionStatusPENDING string = "PENDING"

	// InvoicePaymentTransactionStatusPAYMENTFAILURE captures enum value "PAYMENT_FAILURE"
	InvoicePaymentTransactionStatusPAYMENTFAILURE string = "PAYMENT_FAILURE"

	// InvoicePaymentTransactionStatusPLUGINFAILURE captures enum value "PLUGIN_FAILURE"
	InvoicePaymentTransactionStatusPLUGINFAILURE string = "PLUGIN_FAILURE"

	// InvoicePaymentTransactionStatusPAYMENTSYSTEMOFF captures enum value "PAYMENT_SYSTEM_OFF"
	InvoicePaymentTransactionStatusPAYMENTSYSTEMOFF string = "PAYMENT_SYSTEM_OFF"
)

// prop value enum
func (m *InvoicePaymentTransaction) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, invoicePaymentTransactionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InvoicePaymentTransaction) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePaymentTransaction) validateTransactionID(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionID) { // not required
		return nil
	}

	if err := validate.FormatOf("transactionId", "body", "uuid", m.TransactionID.String(), formats); err != nil {
		return err
	}

	return nil
}

var invoicePaymentTransactionTypeTransactionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTHORIZE","CAPTURE","CHARGEBACK","CREDIT","PURCHASE","REFUND","VOID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoicePaymentTransactionTypeTransactionTypePropEnum = append(invoicePaymentTransactionTypeTransactionTypePropEnum, v)
	}
}

const (

	// InvoicePaymentTransactionTransactionTypeAUTHORIZE captures enum value "AUTHORIZE"
	InvoicePaymentTransactionTransactionTypeAUTHORIZE string = "AUTHORIZE"

	// InvoicePaymentTransactionTransactionTypeCAPTURE captures enum value "CAPTURE"
	InvoicePaymentTransactionTransactionTypeCAPTURE string = "CAPTURE"

	// InvoicePaymentTransactionTransactionTypeCHARGEBACK captures enum value "CHARGEBACK"
	InvoicePaymentTransactionTransactionTypeCHARGEBACK string = "CHARGEBACK"

	// InvoicePaymentTransactionTransactionTypeCREDIT captures enum value "CREDIT"
	InvoicePaymentTransactionTransactionTypeCREDIT string = "CREDIT"

	// InvoicePaymentTransactionTransactionTypePURCHASE captures enum value "PURCHASE"
	InvoicePaymentTransactionTransactionTypePURCHASE string = "PURCHASE"

	// InvoicePaymentTransactionTransactionTypeREFUND captures enum value "REFUND"
	InvoicePaymentTransactionTransactionTypeREFUND string = "REFUND"

	// InvoicePaymentTransactionTransactionTypeVOID captures enum value "VOID"
	InvoicePaymentTransactionTransactionTypeVOID string = "VOID"
)

// prop value enum
func (m *InvoicePaymentTransaction) validateTransactionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, invoicePaymentTransactionTypeTransactionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InvoicePaymentTransaction) validateTransactionType(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransactionTypeEnum("transactionType", "body", m.TransactionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this invoice payment transaction based on the context it is used
func (m *InvoicePaymentTransaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjustments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoicePaymentTransaction) contextValidateAdjustments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Adjustments); i++ {

		if m.Adjustments[i] != nil {
			if err := m.Adjustments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adjustments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("adjustments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicePaymentTransaction) contextValidateAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditLogs); i++ {

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicePaymentTransaction) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Properties); i++ {

		if m.Properties[i] != nil {
			if err := m.Properties[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoicePaymentTransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoicePaymentTransaction) UnmarshalBinary(b []byte) error {
	var res InvoicePaymentTransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
