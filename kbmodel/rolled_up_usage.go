// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RolledUpUsage rolled up usage
//
// swagger:model RolledUpUsage
type RolledUpUsage struct {

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// rolled up units
	RolledUpUnits []*RolledUpUnit `json:"rolledUpUnits"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// subscription Id
	// Format: uuid
	SubscriptionID strfmt.UUID `json:"subscriptionId,omitempty"`
}

// Validate validates this rolled up usage
func (m *RolledUpUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolledUpUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RolledUpUsage) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RolledUpUsage) validateRolledUpUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.RolledUpUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.RolledUpUnits); i++ {
		if swag.IsZero(m.RolledUpUnits[i]) { // not required
			continue
		}

		if m.RolledUpUnits[i] != nil {
			if err := m.RolledUpUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rolledUpUnits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rolledUpUnits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RolledUpUsage) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RolledUpUsage) validateSubscriptionID(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionID) { // not required
		return nil
	}

	if err := validate.FormatOf("subscriptionId", "body", "uuid", m.SubscriptionID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rolled up usage based on the context it is used
func (m *RolledUpUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRolledUpUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RolledUpUsage) contextValidateRolledUpUnits(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RolledUpUnits); i++ {

		if m.RolledUpUnits[i] != nil {
			if err := m.RolledUpUnits[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rolledUpUnits" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rolledUpUnits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RolledUpUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RolledUpUsage) UnmarshalBinary(b []byte) error {
	var res RolledUpUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
