// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Invoice invoice
// swagger:model Invoice
type Invoice struct {

	// account Id
	// Format: uuid
	AccountID strfmt.UUID `json:"accountId,omitempty"`

	// amount
	Amount float64 `json:"amount,omitempty"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// balance
	Balance float64 `json:"balance,omitempty"`

	// bundle keys
	BundleKeys string `json:"bundleKeys,omitempty"`

	// credit adj
	CreditAdj float64 `json:"creditAdj,omitempty"`

	// credits
	Credits []*InvoiceItem `json:"credits"`

	// currency
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	Currency InvoiceCurrencyEnum `json:"currency,omitempty"`

	// invoice date
	// Format: date
	InvoiceDate strfmt.Date `json:"invoiceDate,omitempty"`

	// invoice Id
	// Format: uuid
	InvoiceID strfmt.UUID `json:"invoiceId,omitempty"`

	// invoice number
	InvoiceNumber string `json:"invoiceNumber,omitempty"`

	// is parent invoice
	IsParentInvoice bool `json:"isParentInvoice,omitempty"`

	// items
	Items []*InvoiceItem `json:"items"`

	// parent account Id
	// Format: uuid
	ParentAccountID strfmt.UUID `json:"parentAccountId,omitempty"`

	// parent invoice Id
	// Format: uuid
	ParentInvoiceID strfmt.UUID `json:"parentInvoiceId,omitempty"`

	// refund adj
	RefundAdj float64 `json:"refundAdj,omitempty"`

	// status
	// Enum: [DRAFT COMMITTED VOID]
	Status InvoiceStatusEnum `json:"status,omitempty"`

	// target date
	// Format: date
	TargetDate strfmt.Date `json:"targetDate,omitempty"`

	// tracking ids
	TrackingIds []string `json:"trackingIds"`
}

// Validate validates this invoice
func (m *Invoice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentInvoiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Invoice) validateAccountID(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("accountId", "body", "uuid", m.AccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateAuditLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Invoice) validateCredits(formats strfmt.Registry) error {

	if swag.IsZero(m.Credits) { // not required
		return nil
	}

	for i := 0; i < len(m.Credits); i++ {
		if swag.IsZero(m.Credits[i]) { // not required
			continue
		}

		if m.Credits[i] != nil {
			if err := m.Credits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("credits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var invoiceTypeCurrencyPropEnum []interface{}

func init() {
	var res []InvoiceCurrencyEnum
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceTypeCurrencyPropEnum = append(invoiceTypeCurrencyPropEnum, v)
	}
}

type InvoiceCurrencyEnum string

const (

	// InvoiceCurrencyAED captures enum value "AED"
	InvoiceCurrencyAED InvoiceCurrencyEnum = "AED"

	// InvoiceCurrencyAFN captures enum value "AFN"
	InvoiceCurrencyAFN InvoiceCurrencyEnum = "AFN"

	// InvoiceCurrencyALL captures enum value "ALL"
	InvoiceCurrencyALL InvoiceCurrencyEnum = "ALL"

	// InvoiceCurrencyAMD captures enum value "AMD"
	InvoiceCurrencyAMD InvoiceCurrencyEnum = "AMD"

	// InvoiceCurrencyANG captures enum value "ANG"
	InvoiceCurrencyANG InvoiceCurrencyEnum = "ANG"

	// InvoiceCurrencyAOA captures enum value "AOA"
	InvoiceCurrencyAOA InvoiceCurrencyEnum = "AOA"

	// InvoiceCurrencyARS captures enum value "ARS"
	InvoiceCurrencyARS InvoiceCurrencyEnum = "ARS"

	// InvoiceCurrencyAUD captures enum value "AUD"
	InvoiceCurrencyAUD InvoiceCurrencyEnum = "AUD"

	// InvoiceCurrencyAWG captures enum value "AWG"
	InvoiceCurrencyAWG InvoiceCurrencyEnum = "AWG"

	// InvoiceCurrencyAZN captures enum value "AZN"
	InvoiceCurrencyAZN InvoiceCurrencyEnum = "AZN"

	// InvoiceCurrencyBAM captures enum value "BAM"
	InvoiceCurrencyBAM InvoiceCurrencyEnum = "BAM"

	// InvoiceCurrencyBBD captures enum value "BBD"
	InvoiceCurrencyBBD InvoiceCurrencyEnum = "BBD"

	// InvoiceCurrencyBDT captures enum value "BDT"
	InvoiceCurrencyBDT InvoiceCurrencyEnum = "BDT"

	// InvoiceCurrencyBGN captures enum value "BGN"
	InvoiceCurrencyBGN InvoiceCurrencyEnum = "BGN"

	// InvoiceCurrencyBHD captures enum value "BHD"
	InvoiceCurrencyBHD InvoiceCurrencyEnum = "BHD"

	// InvoiceCurrencyBIF captures enum value "BIF"
	InvoiceCurrencyBIF InvoiceCurrencyEnum = "BIF"

	// InvoiceCurrencyBMD captures enum value "BMD"
	InvoiceCurrencyBMD InvoiceCurrencyEnum = "BMD"

	// InvoiceCurrencyBND captures enum value "BND"
	InvoiceCurrencyBND InvoiceCurrencyEnum = "BND"

	// InvoiceCurrencyBOB captures enum value "BOB"
	InvoiceCurrencyBOB InvoiceCurrencyEnum = "BOB"

	// InvoiceCurrencyBRL captures enum value "BRL"
	InvoiceCurrencyBRL InvoiceCurrencyEnum = "BRL"

	// InvoiceCurrencyBSD captures enum value "BSD"
	InvoiceCurrencyBSD InvoiceCurrencyEnum = "BSD"

	// InvoiceCurrencyBTN captures enum value "BTN"
	InvoiceCurrencyBTN InvoiceCurrencyEnum = "BTN"

	// InvoiceCurrencyBWP captures enum value "BWP"
	InvoiceCurrencyBWP InvoiceCurrencyEnum = "BWP"

	// InvoiceCurrencyBYR captures enum value "BYR"
	InvoiceCurrencyBYR InvoiceCurrencyEnum = "BYR"

	// InvoiceCurrencyBZD captures enum value "BZD"
	InvoiceCurrencyBZD InvoiceCurrencyEnum = "BZD"

	// InvoiceCurrencyCAD captures enum value "CAD"
	InvoiceCurrencyCAD InvoiceCurrencyEnum = "CAD"

	// InvoiceCurrencyCDF captures enum value "CDF"
	InvoiceCurrencyCDF InvoiceCurrencyEnum = "CDF"

	// InvoiceCurrencyCHF captures enum value "CHF"
	InvoiceCurrencyCHF InvoiceCurrencyEnum = "CHF"

	// InvoiceCurrencyCLP captures enum value "CLP"
	InvoiceCurrencyCLP InvoiceCurrencyEnum = "CLP"

	// InvoiceCurrencyCNY captures enum value "CNY"
	InvoiceCurrencyCNY InvoiceCurrencyEnum = "CNY"

	// InvoiceCurrencyCOP captures enum value "COP"
	InvoiceCurrencyCOP InvoiceCurrencyEnum = "COP"

	// InvoiceCurrencyCRC captures enum value "CRC"
	InvoiceCurrencyCRC InvoiceCurrencyEnum = "CRC"

	// InvoiceCurrencyCUC captures enum value "CUC"
	InvoiceCurrencyCUC InvoiceCurrencyEnum = "CUC"

	// InvoiceCurrencyCUP captures enum value "CUP"
	InvoiceCurrencyCUP InvoiceCurrencyEnum = "CUP"

	// InvoiceCurrencyCVE captures enum value "CVE"
	InvoiceCurrencyCVE InvoiceCurrencyEnum = "CVE"

	// InvoiceCurrencyCZK captures enum value "CZK"
	InvoiceCurrencyCZK InvoiceCurrencyEnum = "CZK"

	// InvoiceCurrencyDJF captures enum value "DJF"
	InvoiceCurrencyDJF InvoiceCurrencyEnum = "DJF"

	// InvoiceCurrencyDKK captures enum value "DKK"
	InvoiceCurrencyDKK InvoiceCurrencyEnum = "DKK"

	// InvoiceCurrencyDOP captures enum value "DOP"
	InvoiceCurrencyDOP InvoiceCurrencyEnum = "DOP"

	// InvoiceCurrencyDZD captures enum value "DZD"
	InvoiceCurrencyDZD InvoiceCurrencyEnum = "DZD"

	// InvoiceCurrencyEGP captures enum value "EGP"
	InvoiceCurrencyEGP InvoiceCurrencyEnum = "EGP"

	// InvoiceCurrencyERN captures enum value "ERN"
	InvoiceCurrencyERN InvoiceCurrencyEnum = "ERN"

	// InvoiceCurrencyETB captures enum value "ETB"
	InvoiceCurrencyETB InvoiceCurrencyEnum = "ETB"

	// InvoiceCurrencyEUR captures enum value "EUR"
	InvoiceCurrencyEUR InvoiceCurrencyEnum = "EUR"

	// InvoiceCurrencyFJD captures enum value "FJD"
	InvoiceCurrencyFJD InvoiceCurrencyEnum = "FJD"

	// InvoiceCurrencyFKP captures enum value "FKP"
	InvoiceCurrencyFKP InvoiceCurrencyEnum = "FKP"

	// InvoiceCurrencyGBP captures enum value "GBP"
	InvoiceCurrencyGBP InvoiceCurrencyEnum = "GBP"

	// InvoiceCurrencyGEL captures enum value "GEL"
	InvoiceCurrencyGEL InvoiceCurrencyEnum = "GEL"

	// InvoiceCurrencyGGP captures enum value "GGP"
	InvoiceCurrencyGGP InvoiceCurrencyEnum = "GGP"

	// InvoiceCurrencyGHS captures enum value "GHS"
	InvoiceCurrencyGHS InvoiceCurrencyEnum = "GHS"

	// InvoiceCurrencyGIP captures enum value "GIP"
	InvoiceCurrencyGIP InvoiceCurrencyEnum = "GIP"

	// InvoiceCurrencyGMD captures enum value "GMD"
	InvoiceCurrencyGMD InvoiceCurrencyEnum = "GMD"

	// InvoiceCurrencyGNF captures enum value "GNF"
	InvoiceCurrencyGNF InvoiceCurrencyEnum = "GNF"

	// InvoiceCurrencyGTQ captures enum value "GTQ"
	InvoiceCurrencyGTQ InvoiceCurrencyEnum = "GTQ"

	// InvoiceCurrencyGYD captures enum value "GYD"
	InvoiceCurrencyGYD InvoiceCurrencyEnum = "GYD"

	// InvoiceCurrencyHKD captures enum value "HKD"
	InvoiceCurrencyHKD InvoiceCurrencyEnum = "HKD"

	// InvoiceCurrencyHNL captures enum value "HNL"
	InvoiceCurrencyHNL InvoiceCurrencyEnum = "HNL"

	// InvoiceCurrencyHRK captures enum value "HRK"
	InvoiceCurrencyHRK InvoiceCurrencyEnum = "HRK"

	// InvoiceCurrencyHTG captures enum value "HTG"
	InvoiceCurrencyHTG InvoiceCurrencyEnum = "HTG"

	// InvoiceCurrencyHUF captures enum value "HUF"
	InvoiceCurrencyHUF InvoiceCurrencyEnum = "HUF"

	// InvoiceCurrencyIDR captures enum value "IDR"
	InvoiceCurrencyIDR InvoiceCurrencyEnum = "IDR"

	// InvoiceCurrencyILS captures enum value "ILS"
	InvoiceCurrencyILS InvoiceCurrencyEnum = "ILS"

	// InvoiceCurrencyIMP captures enum value "IMP"
	InvoiceCurrencyIMP InvoiceCurrencyEnum = "IMP"

	// InvoiceCurrencyINR captures enum value "INR"
	InvoiceCurrencyINR InvoiceCurrencyEnum = "INR"

	// InvoiceCurrencyIQD captures enum value "IQD"
	InvoiceCurrencyIQD InvoiceCurrencyEnum = "IQD"

	// InvoiceCurrencyIRR captures enum value "IRR"
	InvoiceCurrencyIRR InvoiceCurrencyEnum = "IRR"

	// InvoiceCurrencyISK captures enum value "ISK"
	InvoiceCurrencyISK InvoiceCurrencyEnum = "ISK"

	// InvoiceCurrencyJEP captures enum value "JEP"
	InvoiceCurrencyJEP InvoiceCurrencyEnum = "JEP"

	// InvoiceCurrencyJMD captures enum value "JMD"
	InvoiceCurrencyJMD InvoiceCurrencyEnum = "JMD"

	// InvoiceCurrencyJOD captures enum value "JOD"
	InvoiceCurrencyJOD InvoiceCurrencyEnum = "JOD"

	// InvoiceCurrencyJPY captures enum value "JPY"
	InvoiceCurrencyJPY InvoiceCurrencyEnum = "JPY"

	// InvoiceCurrencyKES captures enum value "KES"
	InvoiceCurrencyKES InvoiceCurrencyEnum = "KES"

	// InvoiceCurrencyKGS captures enum value "KGS"
	InvoiceCurrencyKGS InvoiceCurrencyEnum = "KGS"

	// InvoiceCurrencyKHR captures enum value "KHR"
	InvoiceCurrencyKHR InvoiceCurrencyEnum = "KHR"

	// InvoiceCurrencyKMF captures enum value "KMF"
	InvoiceCurrencyKMF InvoiceCurrencyEnum = "KMF"

	// InvoiceCurrencyKPW captures enum value "KPW"
	InvoiceCurrencyKPW InvoiceCurrencyEnum = "KPW"

	// InvoiceCurrencyKRW captures enum value "KRW"
	InvoiceCurrencyKRW InvoiceCurrencyEnum = "KRW"

	// InvoiceCurrencyKWD captures enum value "KWD"
	InvoiceCurrencyKWD InvoiceCurrencyEnum = "KWD"

	// InvoiceCurrencyKYD captures enum value "KYD"
	InvoiceCurrencyKYD InvoiceCurrencyEnum = "KYD"

	// InvoiceCurrencyKZT captures enum value "KZT"
	InvoiceCurrencyKZT InvoiceCurrencyEnum = "KZT"

	// InvoiceCurrencyLAK captures enum value "LAK"
	InvoiceCurrencyLAK InvoiceCurrencyEnum = "LAK"

	// InvoiceCurrencyLBP captures enum value "LBP"
	InvoiceCurrencyLBP InvoiceCurrencyEnum = "LBP"

	// InvoiceCurrencyLKR captures enum value "LKR"
	InvoiceCurrencyLKR InvoiceCurrencyEnum = "LKR"

	// InvoiceCurrencyLRD captures enum value "LRD"
	InvoiceCurrencyLRD InvoiceCurrencyEnum = "LRD"

	// InvoiceCurrencyLSL captures enum value "LSL"
	InvoiceCurrencyLSL InvoiceCurrencyEnum = "LSL"

	// InvoiceCurrencyLTL captures enum value "LTL"
	InvoiceCurrencyLTL InvoiceCurrencyEnum = "LTL"

	// InvoiceCurrencyLVL captures enum value "LVL"
	InvoiceCurrencyLVL InvoiceCurrencyEnum = "LVL"

	// InvoiceCurrencyLYD captures enum value "LYD"
	InvoiceCurrencyLYD InvoiceCurrencyEnum = "LYD"

	// InvoiceCurrencyMAD captures enum value "MAD"
	InvoiceCurrencyMAD InvoiceCurrencyEnum = "MAD"

	// InvoiceCurrencyMDL captures enum value "MDL"
	InvoiceCurrencyMDL InvoiceCurrencyEnum = "MDL"

	// InvoiceCurrencyMGA captures enum value "MGA"
	InvoiceCurrencyMGA InvoiceCurrencyEnum = "MGA"

	// InvoiceCurrencyMKD captures enum value "MKD"
	InvoiceCurrencyMKD InvoiceCurrencyEnum = "MKD"

	// InvoiceCurrencyMMK captures enum value "MMK"
	InvoiceCurrencyMMK InvoiceCurrencyEnum = "MMK"

	// InvoiceCurrencyMNT captures enum value "MNT"
	InvoiceCurrencyMNT InvoiceCurrencyEnum = "MNT"

	// InvoiceCurrencyMOP captures enum value "MOP"
	InvoiceCurrencyMOP InvoiceCurrencyEnum = "MOP"

	// InvoiceCurrencyMRO captures enum value "MRO"
	InvoiceCurrencyMRO InvoiceCurrencyEnum = "MRO"

	// InvoiceCurrencyMUR captures enum value "MUR"
	InvoiceCurrencyMUR InvoiceCurrencyEnum = "MUR"

	// InvoiceCurrencyMVR captures enum value "MVR"
	InvoiceCurrencyMVR InvoiceCurrencyEnum = "MVR"

	// InvoiceCurrencyMWK captures enum value "MWK"
	InvoiceCurrencyMWK InvoiceCurrencyEnum = "MWK"

	// InvoiceCurrencyMXN captures enum value "MXN"
	InvoiceCurrencyMXN InvoiceCurrencyEnum = "MXN"

	// InvoiceCurrencyMYR captures enum value "MYR"
	InvoiceCurrencyMYR InvoiceCurrencyEnum = "MYR"

	// InvoiceCurrencyMZN captures enum value "MZN"
	InvoiceCurrencyMZN InvoiceCurrencyEnum = "MZN"

	// InvoiceCurrencyNAD captures enum value "NAD"
	InvoiceCurrencyNAD InvoiceCurrencyEnum = "NAD"

	// InvoiceCurrencyNGN captures enum value "NGN"
	InvoiceCurrencyNGN InvoiceCurrencyEnum = "NGN"

	// InvoiceCurrencyNIO captures enum value "NIO"
	InvoiceCurrencyNIO InvoiceCurrencyEnum = "NIO"

	// InvoiceCurrencyNOK captures enum value "NOK"
	InvoiceCurrencyNOK InvoiceCurrencyEnum = "NOK"

	// InvoiceCurrencyNPR captures enum value "NPR"
	InvoiceCurrencyNPR InvoiceCurrencyEnum = "NPR"

	// InvoiceCurrencyNZD captures enum value "NZD"
	InvoiceCurrencyNZD InvoiceCurrencyEnum = "NZD"

	// InvoiceCurrencyOMR captures enum value "OMR"
	InvoiceCurrencyOMR InvoiceCurrencyEnum = "OMR"

	// InvoiceCurrencyPAB captures enum value "PAB"
	InvoiceCurrencyPAB InvoiceCurrencyEnum = "PAB"

	// InvoiceCurrencyPEN captures enum value "PEN"
	InvoiceCurrencyPEN InvoiceCurrencyEnum = "PEN"

	// InvoiceCurrencyPGK captures enum value "PGK"
	InvoiceCurrencyPGK InvoiceCurrencyEnum = "PGK"

	// InvoiceCurrencyPHP captures enum value "PHP"
	InvoiceCurrencyPHP InvoiceCurrencyEnum = "PHP"

	// InvoiceCurrencyPKR captures enum value "PKR"
	InvoiceCurrencyPKR InvoiceCurrencyEnum = "PKR"

	// InvoiceCurrencyPLN captures enum value "PLN"
	InvoiceCurrencyPLN InvoiceCurrencyEnum = "PLN"

	// InvoiceCurrencyPYG captures enum value "PYG"
	InvoiceCurrencyPYG InvoiceCurrencyEnum = "PYG"

	// InvoiceCurrencyQAR captures enum value "QAR"
	InvoiceCurrencyQAR InvoiceCurrencyEnum = "QAR"

	// InvoiceCurrencyRON captures enum value "RON"
	InvoiceCurrencyRON InvoiceCurrencyEnum = "RON"

	// InvoiceCurrencyRSD captures enum value "RSD"
	InvoiceCurrencyRSD InvoiceCurrencyEnum = "RSD"

	// InvoiceCurrencyRUB captures enum value "RUB"
	InvoiceCurrencyRUB InvoiceCurrencyEnum = "RUB"

	// InvoiceCurrencyRWF captures enum value "RWF"
	InvoiceCurrencyRWF InvoiceCurrencyEnum = "RWF"

	// InvoiceCurrencySAR captures enum value "SAR"
	InvoiceCurrencySAR InvoiceCurrencyEnum = "SAR"

	// InvoiceCurrencySBD captures enum value "SBD"
	InvoiceCurrencySBD InvoiceCurrencyEnum = "SBD"

	// InvoiceCurrencySCR captures enum value "SCR"
	InvoiceCurrencySCR InvoiceCurrencyEnum = "SCR"

	// InvoiceCurrencySDG captures enum value "SDG"
	InvoiceCurrencySDG InvoiceCurrencyEnum = "SDG"

	// InvoiceCurrencySEK captures enum value "SEK"
	InvoiceCurrencySEK InvoiceCurrencyEnum = "SEK"

	// InvoiceCurrencySGD captures enum value "SGD"
	InvoiceCurrencySGD InvoiceCurrencyEnum = "SGD"

	// InvoiceCurrencySHP captures enum value "SHP"
	InvoiceCurrencySHP InvoiceCurrencyEnum = "SHP"

	// InvoiceCurrencySLL captures enum value "SLL"
	InvoiceCurrencySLL InvoiceCurrencyEnum = "SLL"

	// InvoiceCurrencySOS captures enum value "SOS"
	InvoiceCurrencySOS InvoiceCurrencyEnum = "SOS"

	// InvoiceCurrencySPL captures enum value "SPL"
	InvoiceCurrencySPL InvoiceCurrencyEnum = "SPL"

	// InvoiceCurrencySRD captures enum value "SRD"
	InvoiceCurrencySRD InvoiceCurrencyEnum = "SRD"

	// InvoiceCurrencySTD captures enum value "STD"
	InvoiceCurrencySTD InvoiceCurrencyEnum = "STD"

	// InvoiceCurrencySVC captures enum value "SVC"
	InvoiceCurrencySVC InvoiceCurrencyEnum = "SVC"

	// InvoiceCurrencySYP captures enum value "SYP"
	InvoiceCurrencySYP InvoiceCurrencyEnum = "SYP"

	// InvoiceCurrencySZL captures enum value "SZL"
	InvoiceCurrencySZL InvoiceCurrencyEnum = "SZL"

	// InvoiceCurrencyTHB captures enum value "THB"
	InvoiceCurrencyTHB InvoiceCurrencyEnum = "THB"

	// InvoiceCurrencyTJS captures enum value "TJS"
	InvoiceCurrencyTJS InvoiceCurrencyEnum = "TJS"

	// InvoiceCurrencyTMT captures enum value "TMT"
	InvoiceCurrencyTMT InvoiceCurrencyEnum = "TMT"

	// InvoiceCurrencyTND captures enum value "TND"
	InvoiceCurrencyTND InvoiceCurrencyEnum = "TND"

	// InvoiceCurrencyTOP captures enum value "TOP"
	InvoiceCurrencyTOP InvoiceCurrencyEnum = "TOP"

	// InvoiceCurrencyTRY captures enum value "TRY"
	InvoiceCurrencyTRY InvoiceCurrencyEnum = "TRY"

	// InvoiceCurrencyTTD captures enum value "TTD"
	InvoiceCurrencyTTD InvoiceCurrencyEnum = "TTD"

	// InvoiceCurrencyTVD captures enum value "TVD"
	InvoiceCurrencyTVD InvoiceCurrencyEnum = "TVD"

	// InvoiceCurrencyTWD captures enum value "TWD"
	InvoiceCurrencyTWD InvoiceCurrencyEnum = "TWD"

	// InvoiceCurrencyTZS captures enum value "TZS"
	InvoiceCurrencyTZS InvoiceCurrencyEnum = "TZS"

	// InvoiceCurrencyUAH captures enum value "UAH"
	InvoiceCurrencyUAH InvoiceCurrencyEnum = "UAH"

	// InvoiceCurrencyUGX captures enum value "UGX"
	InvoiceCurrencyUGX InvoiceCurrencyEnum = "UGX"

	// InvoiceCurrencyUSD captures enum value "USD"
	InvoiceCurrencyUSD InvoiceCurrencyEnum = "USD"

	// InvoiceCurrencyUYU captures enum value "UYU"
	InvoiceCurrencyUYU InvoiceCurrencyEnum = "UYU"

	// InvoiceCurrencyUZS captures enum value "UZS"
	InvoiceCurrencyUZS InvoiceCurrencyEnum = "UZS"

	// InvoiceCurrencyVEF captures enum value "VEF"
	InvoiceCurrencyVEF InvoiceCurrencyEnum = "VEF"

	// InvoiceCurrencyVND captures enum value "VND"
	InvoiceCurrencyVND InvoiceCurrencyEnum = "VND"

	// InvoiceCurrencyVUV captures enum value "VUV"
	InvoiceCurrencyVUV InvoiceCurrencyEnum = "VUV"

	// InvoiceCurrencyWST captures enum value "WST"
	InvoiceCurrencyWST InvoiceCurrencyEnum = "WST"

	// InvoiceCurrencyXAF captures enum value "XAF"
	InvoiceCurrencyXAF InvoiceCurrencyEnum = "XAF"

	// InvoiceCurrencyXCD captures enum value "XCD"
	InvoiceCurrencyXCD InvoiceCurrencyEnum = "XCD"

	// InvoiceCurrencyXDR captures enum value "XDR"
	InvoiceCurrencyXDR InvoiceCurrencyEnum = "XDR"

	// InvoiceCurrencyXOF captures enum value "XOF"
	InvoiceCurrencyXOF InvoiceCurrencyEnum = "XOF"

	// InvoiceCurrencyXPF captures enum value "XPF"
	InvoiceCurrencyXPF InvoiceCurrencyEnum = "XPF"

	// InvoiceCurrencyYER captures enum value "YER"
	InvoiceCurrencyYER InvoiceCurrencyEnum = "YER"

	// InvoiceCurrencyZAR captures enum value "ZAR"
	InvoiceCurrencyZAR InvoiceCurrencyEnum = "ZAR"

	// InvoiceCurrencyZMW captures enum value "ZMW"
	InvoiceCurrencyZMW InvoiceCurrencyEnum = "ZMW"

	// InvoiceCurrencyZWD captures enum value "ZWD"
	InvoiceCurrencyZWD InvoiceCurrencyEnum = "ZWD"

	// InvoiceCurrencyBTC captures enum value "BTC"
	InvoiceCurrencyBTC InvoiceCurrencyEnum = "BTC"
)

var InvoiceCurrencyEnumValues = []string{
	"AED",
	"AFN",
	"ALL",
	"AMD",
	"ANG",
	"AOA",
	"ARS",
	"AUD",
	"AWG",
	"AZN",
	"BAM",
	"BBD",
	"BDT",
	"BGN",
	"BHD",
	"BIF",
	"BMD",
	"BND",
	"BOB",
	"BRL",
	"BSD",
	"BTN",
	"BWP",
	"BYR",
	"BZD",
	"CAD",
	"CDF",
	"CHF",
	"CLP",
	"CNY",
	"COP",
	"CRC",
	"CUC",
	"CUP",
	"CVE",
	"CZK",
	"DJF",
	"DKK",
	"DOP",
	"DZD",
	"EGP",
	"ERN",
	"ETB",
	"EUR",
	"FJD",
	"FKP",
	"GBP",
	"GEL",
	"GGP",
	"GHS",
	"GIP",
	"GMD",
	"GNF",
	"GTQ",
	"GYD",
	"HKD",
	"HNL",
	"HRK",
	"HTG",
	"HUF",
	"IDR",
	"ILS",
	"IMP",
	"INR",
	"IQD",
	"IRR",
	"ISK",
	"JEP",
	"JMD",
	"JOD",
	"JPY",
	"KES",
	"KGS",
	"KHR",
	"KMF",
	"KPW",
	"KRW",
	"KWD",
	"KYD",
	"KZT",
	"LAK",
	"LBP",
	"LKR",
	"LRD",
	"LSL",
	"LTL",
	"LVL",
	"LYD",
	"MAD",
	"MDL",
	"MGA",
	"MKD",
	"MMK",
	"MNT",
	"MOP",
	"MRO",
	"MUR",
	"MVR",
	"MWK",
	"MXN",
	"MYR",
	"MZN",
	"NAD",
	"NGN",
	"NIO",
	"NOK",
	"NPR",
	"NZD",
	"OMR",
	"PAB",
	"PEN",
	"PGK",
	"PHP",
	"PKR",
	"PLN",
	"PYG",
	"QAR",
	"RON",
	"RSD",
	"RUB",
	"RWF",
	"SAR",
	"SBD",
	"SCR",
	"SDG",
	"SEK",
	"SGD",
	"SHP",
	"SLL",
	"SOS",
	"SPL",
	"SRD",
	"STD",
	"SVC",
	"SYP",
	"SZL",
	"THB",
	"TJS",
	"TMT",
	"TND",
	"TOP",
	"TRY",
	"TTD",
	"TVD",
	"TWD",
	"TZS",
	"UAH",
	"UGX",
	"USD",
	"UYU",
	"UZS",
	"VEF",
	"VND",
	"VUV",
	"WST",
	"XAF",
	"XCD",
	"XDR",
	"XOF",
	"XPF",
	"YER",
	"ZAR",
	"ZMW",
	"ZWD",
	"BTC",
}

func (e InvoiceCurrencyEnum) IsValid() bool {
	for _, v := range InvoiceCurrencyEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *Invoice) validateCurrencyEnum(path, location string, value InvoiceCurrencyEnum) error {
	if err := validate.Enum(path, location, value, invoiceTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Invoice) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateInvoiceDate(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceDate) { // not required
		return nil
	}

	if err := validate.FormatOf("invoiceDate", "body", "date", m.InvoiceDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateInvoiceID(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("invoiceId", "body", "uuid", m.InvoiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Invoice) validateParentAccountID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentAccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentAccountId", "body", "uuid", m.ParentAccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateParentInvoiceID(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentInvoiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentInvoiceId", "body", "uuid", m.ParentInvoiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

var invoiceTypeStatusPropEnum []interface{}

func init() {
	var res []InvoiceStatusEnum
	if err := json.Unmarshal([]byte(`["DRAFT","COMMITTED","VOID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceTypeStatusPropEnum = append(invoiceTypeStatusPropEnum, v)
	}
}

type InvoiceStatusEnum string

const (

	// InvoiceStatusDRAFT captures enum value "DRAFT"
	InvoiceStatusDRAFT InvoiceStatusEnum = "DRAFT"

	// InvoiceStatusCOMMITTED captures enum value "COMMITTED"
	InvoiceStatusCOMMITTED InvoiceStatusEnum = "COMMITTED"

	// InvoiceStatusVOID captures enum value "VOID"
	InvoiceStatusVOID InvoiceStatusEnum = "VOID"
)

var InvoiceStatusEnumValues = []string{
	"DRAFT",
	"COMMITTED",
	"VOID",
}

func (e InvoiceStatusEnum) IsValid() bool {
	for _, v := range InvoiceStatusEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *Invoice) validateStatusEnum(path, location string, value InvoiceStatusEnum) error {
	if err := validate.Enum(path, location, value, invoiceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Invoice) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Invoice) validateTargetDate(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetDate) { // not required
		return nil
	}

	if err := validate.FormatOf("targetDate", "body", "date", m.TargetDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Invoice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Invoice) UnmarshalBinary(b []byte) error {
	var res Invoice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
