// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoiceDryRun invoice dry run
// swagger:model InvoiceDryRun
type InvoiceDryRun struct {

	// billing period
	// Enum: [DAILY WEEKLY BIWEEKLY THIRTY_DAYS THIRTY_ONE_DAYS SIXTY_DAYS NINETY_DAYS MONTHLY BIMESTRIAL QUARTERLY TRIANNUAL BIANNUAL ANNUAL SESQUIENNIAL BIENNIAL TRIENNIAL NO_BILLING_PERIOD]
	BillingPeriod InvoiceDryRunBillingPeriodEnum `json:"billingPeriod,omitempty"`

	// billing policy
	// Enum: [START_OF_TERM END_OF_TERM IMMEDIATE ILLEGAL]
	BillingPolicy InvoiceDryRunBillingPolicyEnum `json:"billingPolicy,omitempty"`

	// bundle Id
	// Format: uuid
	BundleID strfmt.UUID `json:"bundleId,omitempty"`

	// dry run action
	// Enum: [START_ENTITLEMENT START_BILLING PAUSE_ENTITLEMENT PAUSE_BILLING RESUME_ENTITLEMENT RESUME_BILLING PHASE CHANGE STOP_ENTITLEMENT STOP_BILLING SERVICE_STATE_CHANGE]
	DryRunAction InvoiceDryRunDryRunActionEnum `json:"dryRunAction,omitempty"`

	// dry run type
	// Enum: [TARGET_DATE UPCOMING_INVOICE SUBSCRIPTION_ACTION]
	DryRunType InvoiceDryRunDryRunTypeEnum `json:"dryRunType,omitempty"`

	// effective date
	// Format: date
	EffectiveDate strfmt.Date `json:"effectiveDate,omitempty"`

	// phase type
	// Enum: [TRIAL DISCOUNT FIXEDTERM EVERGREEN]
	PhaseType InvoiceDryRunPhaseTypeEnum `json:"phaseType,omitempty"`

	// plan name
	PlanName string `json:"planName,omitempty"`

	// price list name
	PriceListName string `json:"priceListName,omitempty"`

	// price overrides
	PriceOverrides []*PhasePrice `json:"priceOverrides"`

	// product category
	// Enum: [BASE ADD_ON STANDALONE]
	ProductCategory InvoiceDryRunProductCategoryEnum `json:"productCategory,omitempty"`

	// product name
	ProductName string `json:"productName,omitempty"`

	// subscription Id
	// Format: uuid
	SubscriptionID strfmt.UUID `json:"subscriptionId,omitempty"`
}

// Validate validates this invoice dry run
func (m *InvoiceDryRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDryRunAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDryRunType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhaseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceOverrides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var invoiceDryRunTypeBillingPeriodPropEnum []interface{}

func init() {
	var res []InvoiceDryRunBillingPeriodEnum
	if err := json.Unmarshal([]byte(`["DAILY","WEEKLY","BIWEEKLY","THIRTY_DAYS","THIRTY_ONE_DAYS","SIXTY_DAYS","NINETY_DAYS","MONTHLY","BIMESTRIAL","QUARTERLY","TRIANNUAL","BIANNUAL","ANNUAL","SESQUIENNIAL","BIENNIAL","TRIENNIAL","NO_BILLING_PERIOD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceDryRunTypeBillingPeriodPropEnum = append(invoiceDryRunTypeBillingPeriodPropEnum, v)
	}
}

type InvoiceDryRunBillingPeriodEnum string

const (

	// InvoiceDryRunBillingPeriodDAILY captures enum value "DAILY"
	InvoiceDryRunBillingPeriodDAILY InvoiceDryRunBillingPeriodEnum = "DAILY"

	// InvoiceDryRunBillingPeriodWEEKLY captures enum value "WEEKLY"
	InvoiceDryRunBillingPeriodWEEKLY InvoiceDryRunBillingPeriodEnum = "WEEKLY"

	// InvoiceDryRunBillingPeriodBIWEEKLY captures enum value "BIWEEKLY"
	InvoiceDryRunBillingPeriodBIWEEKLY InvoiceDryRunBillingPeriodEnum = "BIWEEKLY"

	// InvoiceDryRunBillingPeriodTHIRTYDAYS captures enum value "THIRTY_DAYS"
	InvoiceDryRunBillingPeriodTHIRTYDAYS InvoiceDryRunBillingPeriodEnum = "THIRTY_DAYS"

	// InvoiceDryRunBillingPeriodTHIRTYONEDAYS captures enum value "THIRTY_ONE_DAYS"
	InvoiceDryRunBillingPeriodTHIRTYONEDAYS InvoiceDryRunBillingPeriodEnum = "THIRTY_ONE_DAYS"

	// InvoiceDryRunBillingPeriodSIXTYDAYS captures enum value "SIXTY_DAYS"
	InvoiceDryRunBillingPeriodSIXTYDAYS InvoiceDryRunBillingPeriodEnum = "SIXTY_DAYS"

	// InvoiceDryRunBillingPeriodNINETYDAYS captures enum value "NINETY_DAYS"
	InvoiceDryRunBillingPeriodNINETYDAYS InvoiceDryRunBillingPeriodEnum = "NINETY_DAYS"

	// InvoiceDryRunBillingPeriodMONTHLY captures enum value "MONTHLY"
	InvoiceDryRunBillingPeriodMONTHLY InvoiceDryRunBillingPeriodEnum = "MONTHLY"

	// InvoiceDryRunBillingPeriodBIMESTRIAL captures enum value "BIMESTRIAL"
	InvoiceDryRunBillingPeriodBIMESTRIAL InvoiceDryRunBillingPeriodEnum = "BIMESTRIAL"

	// InvoiceDryRunBillingPeriodQUARTERLY captures enum value "QUARTERLY"
	InvoiceDryRunBillingPeriodQUARTERLY InvoiceDryRunBillingPeriodEnum = "QUARTERLY"

	// InvoiceDryRunBillingPeriodTRIANNUAL captures enum value "TRIANNUAL"
	InvoiceDryRunBillingPeriodTRIANNUAL InvoiceDryRunBillingPeriodEnum = "TRIANNUAL"

	// InvoiceDryRunBillingPeriodBIANNUAL captures enum value "BIANNUAL"
	InvoiceDryRunBillingPeriodBIANNUAL InvoiceDryRunBillingPeriodEnum = "BIANNUAL"

	// InvoiceDryRunBillingPeriodANNUAL captures enum value "ANNUAL"
	InvoiceDryRunBillingPeriodANNUAL InvoiceDryRunBillingPeriodEnum = "ANNUAL"

	// InvoiceDryRunBillingPeriodSESQUIENNIAL captures enum value "SESQUIENNIAL"
	InvoiceDryRunBillingPeriodSESQUIENNIAL InvoiceDryRunBillingPeriodEnum = "SESQUIENNIAL"

	// InvoiceDryRunBillingPeriodBIENNIAL captures enum value "BIENNIAL"
	InvoiceDryRunBillingPeriodBIENNIAL InvoiceDryRunBillingPeriodEnum = "BIENNIAL"

	// InvoiceDryRunBillingPeriodTRIENNIAL captures enum value "TRIENNIAL"
	InvoiceDryRunBillingPeriodTRIENNIAL InvoiceDryRunBillingPeriodEnum = "TRIENNIAL"

	// InvoiceDryRunBillingPeriodNOBILLINGPERIOD captures enum value "NO_BILLING_PERIOD"
	InvoiceDryRunBillingPeriodNOBILLINGPERIOD InvoiceDryRunBillingPeriodEnum = "NO_BILLING_PERIOD"
)

var InvoiceDryRunBillingPeriodEnumValues = []string{
	"DAILY",
	"WEEKLY",
	"BIWEEKLY",
	"THIRTY_DAYS",
	"THIRTY_ONE_DAYS",
	"SIXTY_DAYS",
	"NINETY_DAYS",
	"MONTHLY",
	"BIMESTRIAL",
	"QUARTERLY",
	"TRIANNUAL",
	"BIANNUAL",
	"ANNUAL",
	"SESQUIENNIAL",
	"BIENNIAL",
	"TRIENNIAL",
	"NO_BILLING_PERIOD",
}

func (e InvoiceDryRunBillingPeriodEnum) IsValid() bool {
	for _, v := range InvoiceDryRunBillingPeriodEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *InvoiceDryRun) validateBillingPeriodEnum(path, location string, value InvoiceDryRunBillingPeriodEnum) error {
	if err := validate.Enum(path, location, value, invoiceDryRunTypeBillingPeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvoiceDryRun) validateBillingPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingPeriodEnum("billingPeriod", "body", m.BillingPeriod); err != nil {
		return err
	}

	return nil
}

var invoiceDryRunTypeBillingPolicyPropEnum []interface{}

func init() {
	var res []InvoiceDryRunBillingPolicyEnum
	if err := json.Unmarshal([]byte(`["START_OF_TERM","END_OF_TERM","IMMEDIATE","ILLEGAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceDryRunTypeBillingPolicyPropEnum = append(invoiceDryRunTypeBillingPolicyPropEnum, v)
	}
}

type InvoiceDryRunBillingPolicyEnum string

const (

	// InvoiceDryRunBillingPolicySTARTOFTERM captures enum value "START_OF_TERM"
	InvoiceDryRunBillingPolicySTARTOFTERM InvoiceDryRunBillingPolicyEnum = "START_OF_TERM"

	// InvoiceDryRunBillingPolicyENDOFTERM captures enum value "END_OF_TERM"
	InvoiceDryRunBillingPolicyENDOFTERM InvoiceDryRunBillingPolicyEnum = "END_OF_TERM"

	// InvoiceDryRunBillingPolicyIMMEDIATE captures enum value "IMMEDIATE"
	InvoiceDryRunBillingPolicyIMMEDIATE InvoiceDryRunBillingPolicyEnum = "IMMEDIATE"

	// InvoiceDryRunBillingPolicyILLEGAL captures enum value "ILLEGAL"
	InvoiceDryRunBillingPolicyILLEGAL InvoiceDryRunBillingPolicyEnum = "ILLEGAL"
)

var InvoiceDryRunBillingPolicyEnumValues = []string{
	"START_OF_TERM",
	"END_OF_TERM",
	"IMMEDIATE",
	"ILLEGAL",
}

func (e InvoiceDryRunBillingPolicyEnum) IsValid() bool {
	for _, v := range InvoiceDryRunBillingPolicyEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *InvoiceDryRun) validateBillingPolicyEnum(path, location string, value InvoiceDryRunBillingPolicyEnum) error {
	if err := validate.Enum(path, location, value, invoiceDryRunTypeBillingPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvoiceDryRun) validateBillingPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingPolicyEnum("billingPolicy", "body", m.BillingPolicy); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceDryRun) validateBundleID(formats strfmt.Registry) error {

	if swag.IsZero(m.BundleID) { // not required
		return nil
	}

	if err := validate.FormatOf("bundleId", "body", "uuid", m.BundleID.String(), formats); err != nil {
		return err
	}

	return nil
}

var invoiceDryRunTypeDryRunActionPropEnum []interface{}

func init() {
	var res []InvoiceDryRunDryRunActionEnum
	if err := json.Unmarshal([]byte(`["START_ENTITLEMENT","START_BILLING","PAUSE_ENTITLEMENT","PAUSE_BILLING","RESUME_ENTITLEMENT","RESUME_BILLING","PHASE","CHANGE","STOP_ENTITLEMENT","STOP_BILLING","SERVICE_STATE_CHANGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceDryRunTypeDryRunActionPropEnum = append(invoiceDryRunTypeDryRunActionPropEnum, v)
	}
}

type InvoiceDryRunDryRunActionEnum string

const (

	// InvoiceDryRunDryRunActionSTARTENTITLEMENT captures enum value "START_ENTITLEMENT"
	InvoiceDryRunDryRunActionSTARTENTITLEMENT InvoiceDryRunDryRunActionEnum = "START_ENTITLEMENT"

	// InvoiceDryRunDryRunActionSTARTBILLING captures enum value "START_BILLING"
	InvoiceDryRunDryRunActionSTARTBILLING InvoiceDryRunDryRunActionEnum = "START_BILLING"

	// InvoiceDryRunDryRunActionPAUSEENTITLEMENT captures enum value "PAUSE_ENTITLEMENT"
	InvoiceDryRunDryRunActionPAUSEENTITLEMENT InvoiceDryRunDryRunActionEnum = "PAUSE_ENTITLEMENT"

	// InvoiceDryRunDryRunActionPAUSEBILLING captures enum value "PAUSE_BILLING"
	InvoiceDryRunDryRunActionPAUSEBILLING InvoiceDryRunDryRunActionEnum = "PAUSE_BILLING"

	// InvoiceDryRunDryRunActionRESUMEENTITLEMENT captures enum value "RESUME_ENTITLEMENT"
	InvoiceDryRunDryRunActionRESUMEENTITLEMENT InvoiceDryRunDryRunActionEnum = "RESUME_ENTITLEMENT"

	// InvoiceDryRunDryRunActionRESUMEBILLING captures enum value "RESUME_BILLING"
	InvoiceDryRunDryRunActionRESUMEBILLING InvoiceDryRunDryRunActionEnum = "RESUME_BILLING"

	// InvoiceDryRunDryRunActionPHASE captures enum value "PHASE"
	InvoiceDryRunDryRunActionPHASE InvoiceDryRunDryRunActionEnum = "PHASE"

	// InvoiceDryRunDryRunActionCHANGE captures enum value "CHANGE"
	InvoiceDryRunDryRunActionCHANGE InvoiceDryRunDryRunActionEnum = "CHANGE"

	// InvoiceDryRunDryRunActionSTOPENTITLEMENT captures enum value "STOP_ENTITLEMENT"
	InvoiceDryRunDryRunActionSTOPENTITLEMENT InvoiceDryRunDryRunActionEnum = "STOP_ENTITLEMENT"

	// InvoiceDryRunDryRunActionSTOPBILLING captures enum value "STOP_BILLING"
	InvoiceDryRunDryRunActionSTOPBILLING InvoiceDryRunDryRunActionEnum = "STOP_BILLING"

	// InvoiceDryRunDryRunActionSERVICESTATECHANGE captures enum value "SERVICE_STATE_CHANGE"
	InvoiceDryRunDryRunActionSERVICESTATECHANGE InvoiceDryRunDryRunActionEnum = "SERVICE_STATE_CHANGE"
)

var InvoiceDryRunDryRunActionEnumValues = []string{
	"START_ENTITLEMENT",
	"START_BILLING",
	"PAUSE_ENTITLEMENT",
	"PAUSE_BILLING",
	"RESUME_ENTITLEMENT",
	"RESUME_BILLING",
	"PHASE",
	"CHANGE",
	"STOP_ENTITLEMENT",
	"STOP_BILLING",
	"SERVICE_STATE_CHANGE",
}

func (e InvoiceDryRunDryRunActionEnum) IsValid() bool {
	for _, v := range InvoiceDryRunDryRunActionEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *InvoiceDryRun) validateDryRunActionEnum(path, location string, value InvoiceDryRunDryRunActionEnum) error {
	if err := validate.Enum(path, location, value, invoiceDryRunTypeDryRunActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvoiceDryRun) validateDryRunAction(formats strfmt.Registry) error {

	if swag.IsZero(m.DryRunAction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDryRunActionEnum("dryRunAction", "body", m.DryRunAction); err != nil {
		return err
	}

	return nil
}

var invoiceDryRunTypeDryRunTypePropEnum []interface{}

func init() {
	var res []InvoiceDryRunDryRunTypeEnum
	if err := json.Unmarshal([]byte(`["TARGET_DATE","UPCOMING_INVOICE","SUBSCRIPTION_ACTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceDryRunTypeDryRunTypePropEnum = append(invoiceDryRunTypeDryRunTypePropEnum, v)
	}
}

type InvoiceDryRunDryRunTypeEnum string

const (

	// InvoiceDryRunDryRunTypeTARGETDATE captures enum value "TARGET_DATE"
	InvoiceDryRunDryRunTypeTARGETDATE InvoiceDryRunDryRunTypeEnum = "TARGET_DATE"

	// InvoiceDryRunDryRunTypeUPCOMINGINVOICE captures enum value "UPCOMING_INVOICE"
	InvoiceDryRunDryRunTypeUPCOMINGINVOICE InvoiceDryRunDryRunTypeEnum = "UPCOMING_INVOICE"

	// InvoiceDryRunDryRunTypeSUBSCRIPTIONACTION captures enum value "SUBSCRIPTION_ACTION"
	InvoiceDryRunDryRunTypeSUBSCRIPTIONACTION InvoiceDryRunDryRunTypeEnum = "SUBSCRIPTION_ACTION"
)

var InvoiceDryRunDryRunTypeEnumValues = []string{
	"TARGET_DATE",
	"UPCOMING_INVOICE",
	"SUBSCRIPTION_ACTION",
}

func (e InvoiceDryRunDryRunTypeEnum) IsValid() bool {
	for _, v := range InvoiceDryRunDryRunTypeEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *InvoiceDryRun) validateDryRunTypeEnum(path, location string, value InvoiceDryRunDryRunTypeEnum) error {
	if err := validate.Enum(path, location, value, invoiceDryRunTypeDryRunTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvoiceDryRun) validateDryRunType(formats strfmt.Registry) error {

	if swag.IsZero(m.DryRunType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDryRunTypeEnum("dryRunType", "body", m.DryRunType); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceDryRun) validateEffectiveDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveDate", "body", "date", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var invoiceDryRunTypePhaseTypePropEnum []interface{}

func init() {
	var res []InvoiceDryRunPhaseTypeEnum
	if err := json.Unmarshal([]byte(`["TRIAL","DISCOUNT","FIXEDTERM","EVERGREEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceDryRunTypePhaseTypePropEnum = append(invoiceDryRunTypePhaseTypePropEnum, v)
	}
}

type InvoiceDryRunPhaseTypeEnum string

const (

	// InvoiceDryRunPhaseTypeTRIAL captures enum value "TRIAL"
	InvoiceDryRunPhaseTypeTRIAL InvoiceDryRunPhaseTypeEnum = "TRIAL"

	// InvoiceDryRunPhaseTypeDISCOUNT captures enum value "DISCOUNT"
	InvoiceDryRunPhaseTypeDISCOUNT InvoiceDryRunPhaseTypeEnum = "DISCOUNT"

	// InvoiceDryRunPhaseTypeFIXEDTERM captures enum value "FIXEDTERM"
	InvoiceDryRunPhaseTypeFIXEDTERM InvoiceDryRunPhaseTypeEnum = "FIXEDTERM"

	// InvoiceDryRunPhaseTypeEVERGREEN captures enum value "EVERGREEN"
	InvoiceDryRunPhaseTypeEVERGREEN InvoiceDryRunPhaseTypeEnum = "EVERGREEN"
)

var InvoiceDryRunPhaseTypeEnumValues = []string{
	"TRIAL",
	"DISCOUNT",
	"FIXEDTERM",
	"EVERGREEN",
}

func (e InvoiceDryRunPhaseTypeEnum) IsValid() bool {
	for _, v := range InvoiceDryRunPhaseTypeEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *InvoiceDryRun) validatePhaseTypeEnum(path, location string, value InvoiceDryRunPhaseTypeEnum) error {
	if err := validate.Enum(path, location, value, invoiceDryRunTypePhaseTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvoiceDryRun) validatePhaseType(formats strfmt.Registry) error {

	if swag.IsZero(m.PhaseType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhaseTypeEnum("phaseType", "body", m.PhaseType); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceDryRun) validatePriceOverrides(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceOverrides) { // not required
		return nil
	}

	for i := 0; i < len(m.PriceOverrides); i++ {
		if swag.IsZero(m.PriceOverrides[i]) { // not required
			continue
		}

		if m.PriceOverrides[i] != nil {
			if err := m.PriceOverrides[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("priceOverrides" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var invoiceDryRunTypeProductCategoryPropEnum []interface{}

func init() {
	var res []InvoiceDryRunProductCategoryEnum
	if err := json.Unmarshal([]byte(`["BASE","ADD_ON","STANDALONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoiceDryRunTypeProductCategoryPropEnum = append(invoiceDryRunTypeProductCategoryPropEnum, v)
	}
}

type InvoiceDryRunProductCategoryEnum string

const (

	// InvoiceDryRunProductCategoryBASE captures enum value "BASE"
	InvoiceDryRunProductCategoryBASE InvoiceDryRunProductCategoryEnum = "BASE"

	// InvoiceDryRunProductCategoryADDON captures enum value "ADD_ON"
	InvoiceDryRunProductCategoryADDON InvoiceDryRunProductCategoryEnum = "ADD_ON"

	// InvoiceDryRunProductCategorySTANDALONE captures enum value "STANDALONE"
	InvoiceDryRunProductCategorySTANDALONE InvoiceDryRunProductCategoryEnum = "STANDALONE"
)

var InvoiceDryRunProductCategoryEnumValues = []string{
	"BASE",
	"ADD_ON",
	"STANDALONE",
}

func (e InvoiceDryRunProductCategoryEnum) IsValid() bool {
	for _, v := range InvoiceDryRunProductCategoryEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *InvoiceDryRun) validateProductCategoryEnum(path, location string, value InvoiceDryRunProductCategoryEnum) error {
	if err := validate.Enum(path, location, value, invoiceDryRunTypeProductCategoryPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InvoiceDryRun) validateProductCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductCategory) { // not required
		return nil
	}

	// value enum
	if err := m.validateProductCategoryEnum("productCategory", "body", m.ProductCategory); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceDryRun) validateSubscriptionID(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionID) { // not required
		return nil
	}

	if err := validate.FormatOf("subscriptionId", "body", "uuid", m.SubscriptionID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoiceDryRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoiceDryRun) UnmarshalBinary(b []byte) error {
	var res InvoiceDryRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
