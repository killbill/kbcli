// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Payment payment
// swagger:model Payment
type Payment struct {

	// account Id
	// Format: uuid
	AccountID strfmt.UUID `json:"accountId,omitempty"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// auth amount
	AuthAmount float64 `json:"authAmount,omitempty"`

	// captured amount
	CapturedAmount float64 `json:"capturedAmount,omitempty"`

	// credited amount
	CreditedAmount float64 `json:"creditedAmount,omitempty"`

	// currency
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	Currency PaymentCurrencyEnum `json:"currency,omitempty"`

	// payment attempts
	PaymentAttempts []*PaymentAttempt `json:"paymentAttempts"`

	// payment external key
	PaymentExternalKey string `json:"paymentExternalKey,omitempty"`

	// payment Id
	// Format: uuid
	PaymentID strfmt.UUID `json:"paymentId,omitempty"`

	// payment method Id
	// Format: uuid
	PaymentMethodID strfmt.UUID `json:"paymentMethodId,omitempty"`

	// payment number
	PaymentNumber string `json:"paymentNumber,omitempty"`

	// purchased amount
	PurchasedAmount float64 `json:"purchasedAmount,omitempty"`

	// refunded amount
	RefundedAmount float64 `json:"refundedAmount,omitempty"`

	// transactions
	Transactions []*PaymentTransaction `json:"transactions"`
}

// Validate validates this payment
func (m *Payment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethodID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Payment) validateAccountID(formats strfmt.Registry) error {

	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("accountId", "body", "uuid", m.AccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateAuditLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var paymentTypeCurrencyPropEnum []interface{}

func init() {
	var res []PaymentCurrencyEnum
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTypeCurrencyPropEnum = append(paymentTypeCurrencyPropEnum, v)
	}
}

type PaymentCurrencyEnum string

const (

	// PaymentCurrencyAED captures enum value "AED"
	PaymentCurrencyAED PaymentCurrencyEnum = "AED"

	// PaymentCurrencyAFN captures enum value "AFN"
	PaymentCurrencyAFN PaymentCurrencyEnum = "AFN"

	// PaymentCurrencyALL captures enum value "ALL"
	PaymentCurrencyALL PaymentCurrencyEnum = "ALL"

	// PaymentCurrencyAMD captures enum value "AMD"
	PaymentCurrencyAMD PaymentCurrencyEnum = "AMD"

	// PaymentCurrencyANG captures enum value "ANG"
	PaymentCurrencyANG PaymentCurrencyEnum = "ANG"

	// PaymentCurrencyAOA captures enum value "AOA"
	PaymentCurrencyAOA PaymentCurrencyEnum = "AOA"

	// PaymentCurrencyARS captures enum value "ARS"
	PaymentCurrencyARS PaymentCurrencyEnum = "ARS"

	// PaymentCurrencyAUD captures enum value "AUD"
	PaymentCurrencyAUD PaymentCurrencyEnum = "AUD"

	// PaymentCurrencyAWG captures enum value "AWG"
	PaymentCurrencyAWG PaymentCurrencyEnum = "AWG"

	// PaymentCurrencyAZN captures enum value "AZN"
	PaymentCurrencyAZN PaymentCurrencyEnum = "AZN"

	// PaymentCurrencyBAM captures enum value "BAM"
	PaymentCurrencyBAM PaymentCurrencyEnum = "BAM"

	// PaymentCurrencyBBD captures enum value "BBD"
	PaymentCurrencyBBD PaymentCurrencyEnum = "BBD"

	// PaymentCurrencyBDT captures enum value "BDT"
	PaymentCurrencyBDT PaymentCurrencyEnum = "BDT"

	// PaymentCurrencyBGN captures enum value "BGN"
	PaymentCurrencyBGN PaymentCurrencyEnum = "BGN"

	// PaymentCurrencyBHD captures enum value "BHD"
	PaymentCurrencyBHD PaymentCurrencyEnum = "BHD"

	// PaymentCurrencyBIF captures enum value "BIF"
	PaymentCurrencyBIF PaymentCurrencyEnum = "BIF"

	// PaymentCurrencyBMD captures enum value "BMD"
	PaymentCurrencyBMD PaymentCurrencyEnum = "BMD"

	// PaymentCurrencyBND captures enum value "BND"
	PaymentCurrencyBND PaymentCurrencyEnum = "BND"

	// PaymentCurrencyBOB captures enum value "BOB"
	PaymentCurrencyBOB PaymentCurrencyEnum = "BOB"

	// PaymentCurrencyBRL captures enum value "BRL"
	PaymentCurrencyBRL PaymentCurrencyEnum = "BRL"

	// PaymentCurrencyBSD captures enum value "BSD"
	PaymentCurrencyBSD PaymentCurrencyEnum = "BSD"

	// PaymentCurrencyBTN captures enum value "BTN"
	PaymentCurrencyBTN PaymentCurrencyEnum = "BTN"

	// PaymentCurrencyBWP captures enum value "BWP"
	PaymentCurrencyBWP PaymentCurrencyEnum = "BWP"

	// PaymentCurrencyBYR captures enum value "BYR"
	PaymentCurrencyBYR PaymentCurrencyEnum = "BYR"

	// PaymentCurrencyBZD captures enum value "BZD"
	PaymentCurrencyBZD PaymentCurrencyEnum = "BZD"

	// PaymentCurrencyCAD captures enum value "CAD"
	PaymentCurrencyCAD PaymentCurrencyEnum = "CAD"

	// PaymentCurrencyCDF captures enum value "CDF"
	PaymentCurrencyCDF PaymentCurrencyEnum = "CDF"

	// PaymentCurrencyCHF captures enum value "CHF"
	PaymentCurrencyCHF PaymentCurrencyEnum = "CHF"

	// PaymentCurrencyCLP captures enum value "CLP"
	PaymentCurrencyCLP PaymentCurrencyEnum = "CLP"

	// PaymentCurrencyCNY captures enum value "CNY"
	PaymentCurrencyCNY PaymentCurrencyEnum = "CNY"

	// PaymentCurrencyCOP captures enum value "COP"
	PaymentCurrencyCOP PaymentCurrencyEnum = "COP"

	// PaymentCurrencyCRC captures enum value "CRC"
	PaymentCurrencyCRC PaymentCurrencyEnum = "CRC"

	// PaymentCurrencyCUC captures enum value "CUC"
	PaymentCurrencyCUC PaymentCurrencyEnum = "CUC"

	// PaymentCurrencyCUP captures enum value "CUP"
	PaymentCurrencyCUP PaymentCurrencyEnum = "CUP"

	// PaymentCurrencyCVE captures enum value "CVE"
	PaymentCurrencyCVE PaymentCurrencyEnum = "CVE"

	// PaymentCurrencyCZK captures enum value "CZK"
	PaymentCurrencyCZK PaymentCurrencyEnum = "CZK"

	// PaymentCurrencyDJF captures enum value "DJF"
	PaymentCurrencyDJF PaymentCurrencyEnum = "DJF"

	// PaymentCurrencyDKK captures enum value "DKK"
	PaymentCurrencyDKK PaymentCurrencyEnum = "DKK"

	// PaymentCurrencyDOP captures enum value "DOP"
	PaymentCurrencyDOP PaymentCurrencyEnum = "DOP"

	// PaymentCurrencyDZD captures enum value "DZD"
	PaymentCurrencyDZD PaymentCurrencyEnum = "DZD"

	// PaymentCurrencyEGP captures enum value "EGP"
	PaymentCurrencyEGP PaymentCurrencyEnum = "EGP"

	// PaymentCurrencyERN captures enum value "ERN"
	PaymentCurrencyERN PaymentCurrencyEnum = "ERN"

	// PaymentCurrencyETB captures enum value "ETB"
	PaymentCurrencyETB PaymentCurrencyEnum = "ETB"

	// PaymentCurrencyEUR captures enum value "EUR"
	PaymentCurrencyEUR PaymentCurrencyEnum = "EUR"

	// PaymentCurrencyFJD captures enum value "FJD"
	PaymentCurrencyFJD PaymentCurrencyEnum = "FJD"

	// PaymentCurrencyFKP captures enum value "FKP"
	PaymentCurrencyFKP PaymentCurrencyEnum = "FKP"

	// PaymentCurrencyGBP captures enum value "GBP"
	PaymentCurrencyGBP PaymentCurrencyEnum = "GBP"

	// PaymentCurrencyGEL captures enum value "GEL"
	PaymentCurrencyGEL PaymentCurrencyEnum = "GEL"

	// PaymentCurrencyGGP captures enum value "GGP"
	PaymentCurrencyGGP PaymentCurrencyEnum = "GGP"

	// PaymentCurrencyGHS captures enum value "GHS"
	PaymentCurrencyGHS PaymentCurrencyEnum = "GHS"

	// PaymentCurrencyGIP captures enum value "GIP"
	PaymentCurrencyGIP PaymentCurrencyEnum = "GIP"

	// PaymentCurrencyGMD captures enum value "GMD"
	PaymentCurrencyGMD PaymentCurrencyEnum = "GMD"

	// PaymentCurrencyGNF captures enum value "GNF"
	PaymentCurrencyGNF PaymentCurrencyEnum = "GNF"

	// PaymentCurrencyGTQ captures enum value "GTQ"
	PaymentCurrencyGTQ PaymentCurrencyEnum = "GTQ"

	// PaymentCurrencyGYD captures enum value "GYD"
	PaymentCurrencyGYD PaymentCurrencyEnum = "GYD"

	// PaymentCurrencyHKD captures enum value "HKD"
	PaymentCurrencyHKD PaymentCurrencyEnum = "HKD"

	// PaymentCurrencyHNL captures enum value "HNL"
	PaymentCurrencyHNL PaymentCurrencyEnum = "HNL"

	// PaymentCurrencyHRK captures enum value "HRK"
	PaymentCurrencyHRK PaymentCurrencyEnum = "HRK"

	// PaymentCurrencyHTG captures enum value "HTG"
	PaymentCurrencyHTG PaymentCurrencyEnum = "HTG"

	// PaymentCurrencyHUF captures enum value "HUF"
	PaymentCurrencyHUF PaymentCurrencyEnum = "HUF"

	// PaymentCurrencyIDR captures enum value "IDR"
	PaymentCurrencyIDR PaymentCurrencyEnum = "IDR"

	// PaymentCurrencyILS captures enum value "ILS"
	PaymentCurrencyILS PaymentCurrencyEnum = "ILS"

	// PaymentCurrencyIMP captures enum value "IMP"
	PaymentCurrencyIMP PaymentCurrencyEnum = "IMP"

	// PaymentCurrencyINR captures enum value "INR"
	PaymentCurrencyINR PaymentCurrencyEnum = "INR"

	// PaymentCurrencyIQD captures enum value "IQD"
	PaymentCurrencyIQD PaymentCurrencyEnum = "IQD"

	// PaymentCurrencyIRR captures enum value "IRR"
	PaymentCurrencyIRR PaymentCurrencyEnum = "IRR"

	// PaymentCurrencyISK captures enum value "ISK"
	PaymentCurrencyISK PaymentCurrencyEnum = "ISK"

	// PaymentCurrencyJEP captures enum value "JEP"
	PaymentCurrencyJEP PaymentCurrencyEnum = "JEP"

	// PaymentCurrencyJMD captures enum value "JMD"
	PaymentCurrencyJMD PaymentCurrencyEnum = "JMD"

	// PaymentCurrencyJOD captures enum value "JOD"
	PaymentCurrencyJOD PaymentCurrencyEnum = "JOD"

	// PaymentCurrencyJPY captures enum value "JPY"
	PaymentCurrencyJPY PaymentCurrencyEnum = "JPY"

	// PaymentCurrencyKES captures enum value "KES"
	PaymentCurrencyKES PaymentCurrencyEnum = "KES"

	// PaymentCurrencyKGS captures enum value "KGS"
	PaymentCurrencyKGS PaymentCurrencyEnum = "KGS"

	// PaymentCurrencyKHR captures enum value "KHR"
	PaymentCurrencyKHR PaymentCurrencyEnum = "KHR"

	// PaymentCurrencyKMF captures enum value "KMF"
	PaymentCurrencyKMF PaymentCurrencyEnum = "KMF"

	// PaymentCurrencyKPW captures enum value "KPW"
	PaymentCurrencyKPW PaymentCurrencyEnum = "KPW"

	// PaymentCurrencyKRW captures enum value "KRW"
	PaymentCurrencyKRW PaymentCurrencyEnum = "KRW"

	// PaymentCurrencyKWD captures enum value "KWD"
	PaymentCurrencyKWD PaymentCurrencyEnum = "KWD"

	// PaymentCurrencyKYD captures enum value "KYD"
	PaymentCurrencyKYD PaymentCurrencyEnum = "KYD"

	// PaymentCurrencyKZT captures enum value "KZT"
	PaymentCurrencyKZT PaymentCurrencyEnum = "KZT"

	// PaymentCurrencyLAK captures enum value "LAK"
	PaymentCurrencyLAK PaymentCurrencyEnum = "LAK"

	// PaymentCurrencyLBP captures enum value "LBP"
	PaymentCurrencyLBP PaymentCurrencyEnum = "LBP"

	// PaymentCurrencyLKR captures enum value "LKR"
	PaymentCurrencyLKR PaymentCurrencyEnum = "LKR"

	// PaymentCurrencyLRD captures enum value "LRD"
	PaymentCurrencyLRD PaymentCurrencyEnum = "LRD"

	// PaymentCurrencyLSL captures enum value "LSL"
	PaymentCurrencyLSL PaymentCurrencyEnum = "LSL"

	// PaymentCurrencyLTL captures enum value "LTL"
	PaymentCurrencyLTL PaymentCurrencyEnum = "LTL"

	// PaymentCurrencyLVL captures enum value "LVL"
	PaymentCurrencyLVL PaymentCurrencyEnum = "LVL"

	// PaymentCurrencyLYD captures enum value "LYD"
	PaymentCurrencyLYD PaymentCurrencyEnum = "LYD"

	// PaymentCurrencyMAD captures enum value "MAD"
	PaymentCurrencyMAD PaymentCurrencyEnum = "MAD"

	// PaymentCurrencyMDL captures enum value "MDL"
	PaymentCurrencyMDL PaymentCurrencyEnum = "MDL"

	// PaymentCurrencyMGA captures enum value "MGA"
	PaymentCurrencyMGA PaymentCurrencyEnum = "MGA"

	// PaymentCurrencyMKD captures enum value "MKD"
	PaymentCurrencyMKD PaymentCurrencyEnum = "MKD"

	// PaymentCurrencyMMK captures enum value "MMK"
	PaymentCurrencyMMK PaymentCurrencyEnum = "MMK"

	// PaymentCurrencyMNT captures enum value "MNT"
	PaymentCurrencyMNT PaymentCurrencyEnum = "MNT"

	// PaymentCurrencyMOP captures enum value "MOP"
	PaymentCurrencyMOP PaymentCurrencyEnum = "MOP"

	// PaymentCurrencyMRO captures enum value "MRO"
	PaymentCurrencyMRO PaymentCurrencyEnum = "MRO"

	// PaymentCurrencyMUR captures enum value "MUR"
	PaymentCurrencyMUR PaymentCurrencyEnum = "MUR"

	// PaymentCurrencyMVR captures enum value "MVR"
	PaymentCurrencyMVR PaymentCurrencyEnum = "MVR"

	// PaymentCurrencyMWK captures enum value "MWK"
	PaymentCurrencyMWK PaymentCurrencyEnum = "MWK"

	// PaymentCurrencyMXN captures enum value "MXN"
	PaymentCurrencyMXN PaymentCurrencyEnum = "MXN"

	// PaymentCurrencyMYR captures enum value "MYR"
	PaymentCurrencyMYR PaymentCurrencyEnum = "MYR"

	// PaymentCurrencyMZN captures enum value "MZN"
	PaymentCurrencyMZN PaymentCurrencyEnum = "MZN"

	// PaymentCurrencyNAD captures enum value "NAD"
	PaymentCurrencyNAD PaymentCurrencyEnum = "NAD"

	// PaymentCurrencyNGN captures enum value "NGN"
	PaymentCurrencyNGN PaymentCurrencyEnum = "NGN"

	// PaymentCurrencyNIO captures enum value "NIO"
	PaymentCurrencyNIO PaymentCurrencyEnum = "NIO"

	// PaymentCurrencyNOK captures enum value "NOK"
	PaymentCurrencyNOK PaymentCurrencyEnum = "NOK"

	// PaymentCurrencyNPR captures enum value "NPR"
	PaymentCurrencyNPR PaymentCurrencyEnum = "NPR"

	// PaymentCurrencyNZD captures enum value "NZD"
	PaymentCurrencyNZD PaymentCurrencyEnum = "NZD"

	// PaymentCurrencyOMR captures enum value "OMR"
	PaymentCurrencyOMR PaymentCurrencyEnum = "OMR"

	// PaymentCurrencyPAB captures enum value "PAB"
	PaymentCurrencyPAB PaymentCurrencyEnum = "PAB"

	// PaymentCurrencyPEN captures enum value "PEN"
	PaymentCurrencyPEN PaymentCurrencyEnum = "PEN"

	// PaymentCurrencyPGK captures enum value "PGK"
	PaymentCurrencyPGK PaymentCurrencyEnum = "PGK"

	// PaymentCurrencyPHP captures enum value "PHP"
	PaymentCurrencyPHP PaymentCurrencyEnum = "PHP"

	// PaymentCurrencyPKR captures enum value "PKR"
	PaymentCurrencyPKR PaymentCurrencyEnum = "PKR"

	// PaymentCurrencyPLN captures enum value "PLN"
	PaymentCurrencyPLN PaymentCurrencyEnum = "PLN"

	// PaymentCurrencyPYG captures enum value "PYG"
	PaymentCurrencyPYG PaymentCurrencyEnum = "PYG"

	// PaymentCurrencyQAR captures enum value "QAR"
	PaymentCurrencyQAR PaymentCurrencyEnum = "QAR"

	// PaymentCurrencyRON captures enum value "RON"
	PaymentCurrencyRON PaymentCurrencyEnum = "RON"

	// PaymentCurrencyRSD captures enum value "RSD"
	PaymentCurrencyRSD PaymentCurrencyEnum = "RSD"

	// PaymentCurrencyRUB captures enum value "RUB"
	PaymentCurrencyRUB PaymentCurrencyEnum = "RUB"

	// PaymentCurrencyRWF captures enum value "RWF"
	PaymentCurrencyRWF PaymentCurrencyEnum = "RWF"

	// PaymentCurrencySAR captures enum value "SAR"
	PaymentCurrencySAR PaymentCurrencyEnum = "SAR"

	// PaymentCurrencySBD captures enum value "SBD"
	PaymentCurrencySBD PaymentCurrencyEnum = "SBD"

	// PaymentCurrencySCR captures enum value "SCR"
	PaymentCurrencySCR PaymentCurrencyEnum = "SCR"

	// PaymentCurrencySDG captures enum value "SDG"
	PaymentCurrencySDG PaymentCurrencyEnum = "SDG"

	// PaymentCurrencySEK captures enum value "SEK"
	PaymentCurrencySEK PaymentCurrencyEnum = "SEK"

	// PaymentCurrencySGD captures enum value "SGD"
	PaymentCurrencySGD PaymentCurrencyEnum = "SGD"

	// PaymentCurrencySHP captures enum value "SHP"
	PaymentCurrencySHP PaymentCurrencyEnum = "SHP"

	// PaymentCurrencySLL captures enum value "SLL"
	PaymentCurrencySLL PaymentCurrencyEnum = "SLL"

	// PaymentCurrencySOS captures enum value "SOS"
	PaymentCurrencySOS PaymentCurrencyEnum = "SOS"

	// PaymentCurrencySPL captures enum value "SPL"
	PaymentCurrencySPL PaymentCurrencyEnum = "SPL"

	// PaymentCurrencySRD captures enum value "SRD"
	PaymentCurrencySRD PaymentCurrencyEnum = "SRD"

	// PaymentCurrencySTD captures enum value "STD"
	PaymentCurrencySTD PaymentCurrencyEnum = "STD"

	// PaymentCurrencySVC captures enum value "SVC"
	PaymentCurrencySVC PaymentCurrencyEnum = "SVC"

	// PaymentCurrencySYP captures enum value "SYP"
	PaymentCurrencySYP PaymentCurrencyEnum = "SYP"

	// PaymentCurrencySZL captures enum value "SZL"
	PaymentCurrencySZL PaymentCurrencyEnum = "SZL"

	// PaymentCurrencyTHB captures enum value "THB"
	PaymentCurrencyTHB PaymentCurrencyEnum = "THB"

	// PaymentCurrencyTJS captures enum value "TJS"
	PaymentCurrencyTJS PaymentCurrencyEnum = "TJS"

	// PaymentCurrencyTMT captures enum value "TMT"
	PaymentCurrencyTMT PaymentCurrencyEnum = "TMT"

	// PaymentCurrencyTND captures enum value "TND"
	PaymentCurrencyTND PaymentCurrencyEnum = "TND"

	// PaymentCurrencyTOP captures enum value "TOP"
	PaymentCurrencyTOP PaymentCurrencyEnum = "TOP"

	// PaymentCurrencyTRY captures enum value "TRY"
	PaymentCurrencyTRY PaymentCurrencyEnum = "TRY"

	// PaymentCurrencyTTD captures enum value "TTD"
	PaymentCurrencyTTD PaymentCurrencyEnum = "TTD"

	// PaymentCurrencyTVD captures enum value "TVD"
	PaymentCurrencyTVD PaymentCurrencyEnum = "TVD"

	// PaymentCurrencyTWD captures enum value "TWD"
	PaymentCurrencyTWD PaymentCurrencyEnum = "TWD"

	// PaymentCurrencyTZS captures enum value "TZS"
	PaymentCurrencyTZS PaymentCurrencyEnum = "TZS"

	// PaymentCurrencyUAH captures enum value "UAH"
	PaymentCurrencyUAH PaymentCurrencyEnum = "UAH"

	// PaymentCurrencyUGX captures enum value "UGX"
	PaymentCurrencyUGX PaymentCurrencyEnum = "UGX"

	// PaymentCurrencyUSD captures enum value "USD"
	PaymentCurrencyUSD PaymentCurrencyEnum = "USD"

	// PaymentCurrencyUYU captures enum value "UYU"
	PaymentCurrencyUYU PaymentCurrencyEnum = "UYU"

	// PaymentCurrencyUZS captures enum value "UZS"
	PaymentCurrencyUZS PaymentCurrencyEnum = "UZS"

	// PaymentCurrencyVEF captures enum value "VEF"
	PaymentCurrencyVEF PaymentCurrencyEnum = "VEF"

	// PaymentCurrencyVND captures enum value "VND"
	PaymentCurrencyVND PaymentCurrencyEnum = "VND"

	// PaymentCurrencyVUV captures enum value "VUV"
	PaymentCurrencyVUV PaymentCurrencyEnum = "VUV"

	// PaymentCurrencyWST captures enum value "WST"
	PaymentCurrencyWST PaymentCurrencyEnum = "WST"

	// PaymentCurrencyXAF captures enum value "XAF"
	PaymentCurrencyXAF PaymentCurrencyEnum = "XAF"

	// PaymentCurrencyXCD captures enum value "XCD"
	PaymentCurrencyXCD PaymentCurrencyEnum = "XCD"

	// PaymentCurrencyXDR captures enum value "XDR"
	PaymentCurrencyXDR PaymentCurrencyEnum = "XDR"

	// PaymentCurrencyXOF captures enum value "XOF"
	PaymentCurrencyXOF PaymentCurrencyEnum = "XOF"

	// PaymentCurrencyXPF captures enum value "XPF"
	PaymentCurrencyXPF PaymentCurrencyEnum = "XPF"

	// PaymentCurrencyYER captures enum value "YER"
	PaymentCurrencyYER PaymentCurrencyEnum = "YER"

	// PaymentCurrencyZAR captures enum value "ZAR"
	PaymentCurrencyZAR PaymentCurrencyEnum = "ZAR"

	// PaymentCurrencyZMW captures enum value "ZMW"
	PaymentCurrencyZMW PaymentCurrencyEnum = "ZMW"

	// PaymentCurrencyZWD captures enum value "ZWD"
	PaymentCurrencyZWD PaymentCurrencyEnum = "ZWD"

	// PaymentCurrencyBTC captures enum value "BTC"
	PaymentCurrencyBTC PaymentCurrencyEnum = "BTC"
)

var PaymentCurrencyEnumValues = []string{
	"AED",
	"AFN",
	"ALL",
	"AMD",
	"ANG",
	"AOA",
	"ARS",
	"AUD",
	"AWG",
	"AZN",
	"BAM",
	"BBD",
	"BDT",
	"BGN",
	"BHD",
	"BIF",
	"BMD",
	"BND",
	"BOB",
	"BRL",
	"BSD",
	"BTN",
	"BWP",
	"BYR",
	"BZD",
	"CAD",
	"CDF",
	"CHF",
	"CLP",
	"CNY",
	"COP",
	"CRC",
	"CUC",
	"CUP",
	"CVE",
	"CZK",
	"DJF",
	"DKK",
	"DOP",
	"DZD",
	"EGP",
	"ERN",
	"ETB",
	"EUR",
	"FJD",
	"FKP",
	"GBP",
	"GEL",
	"GGP",
	"GHS",
	"GIP",
	"GMD",
	"GNF",
	"GTQ",
	"GYD",
	"HKD",
	"HNL",
	"HRK",
	"HTG",
	"HUF",
	"IDR",
	"ILS",
	"IMP",
	"INR",
	"IQD",
	"IRR",
	"ISK",
	"JEP",
	"JMD",
	"JOD",
	"JPY",
	"KES",
	"KGS",
	"KHR",
	"KMF",
	"KPW",
	"KRW",
	"KWD",
	"KYD",
	"KZT",
	"LAK",
	"LBP",
	"LKR",
	"LRD",
	"LSL",
	"LTL",
	"LVL",
	"LYD",
	"MAD",
	"MDL",
	"MGA",
	"MKD",
	"MMK",
	"MNT",
	"MOP",
	"MRO",
	"MUR",
	"MVR",
	"MWK",
	"MXN",
	"MYR",
	"MZN",
	"NAD",
	"NGN",
	"NIO",
	"NOK",
	"NPR",
	"NZD",
	"OMR",
	"PAB",
	"PEN",
	"PGK",
	"PHP",
	"PKR",
	"PLN",
	"PYG",
	"QAR",
	"RON",
	"RSD",
	"RUB",
	"RWF",
	"SAR",
	"SBD",
	"SCR",
	"SDG",
	"SEK",
	"SGD",
	"SHP",
	"SLL",
	"SOS",
	"SPL",
	"SRD",
	"STD",
	"SVC",
	"SYP",
	"SZL",
	"THB",
	"TJS",
	"TMT",
	"TND",
	"TOP",
	"TRY",
	"TTD",
	"TVD",
	"TWD",
	"TZS",
	"UAH",
	"UGX",
	"USD",
	"UYU",
	"UZS",
	"VEF",
	"VND",
	"VUV",
	"WST",
	"XAF",
	"XCD",
	"XDR",
	"XOF",
	"XPF",
	"YER",
	"ZAR",
	"ZMW",
	"ZWD",
	"BTC",
}

func (e PaymentCurrencyEnum) IsValid() bool {
	for _, v := range PaymentCurrencyEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *Payment) validateCurrencyEnum(path, location string, value PaymentCurrencyEnum) error {
	if err := validate.Enum(path, location, value, paymentTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Payment) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validatePaymentAttempts(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentAttempts) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentAttempts); i++ {
		if swag.IsZero(m.PaymentAttempts[i]) { // not required
			continue
		}

		if m.PaymentAttempts[i] != nil {
			if err := m.PaymentAttempts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paymentAttempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Payment) validatePaymentID(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentID) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentId", "body", "uuid", m.PaymentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validatePaymentMethodID(formats strfmt.Registry) error {

	if swag.IsZero(m.PaymentMethodID) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentMethodId", "body", "uuid", m.PaymentMethodID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Payment) validateTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Payment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Payment) UnmarshalBinary(b []byte) error {
	var res Payment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
