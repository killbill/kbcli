// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OverdueCondition overdue condition
//
// swagger:model OverdueCondition
type OverdueCondition struct {

	// control tag exclusion
	// Enum: [AUTO_PAY_OFF AUTO_INVOICING_OFF OVERDUE_ENFORCEMENT_OFF WRITTEN_OFF MANUAL_PAY TEST PARTNER AUTO_INVOICING_DRAFT AUTO_INVOICING_REUSE_DRAFT]
	ControlTagExclusion string `json:"controlTagExclusion,omitempty"`

	// control tag inclusion
	// Enum: [AUTO_PAY_OFF AUTO_INVOICING_OFF OVERDUE_ENFORCEMENT_OFF WRITTEN_OFF MANUAL_PAY TEST PARTNER AUTO_INVOICING_DRAFT AUTO_INVOICING_REUSE_DRAFT]
	ControlTagInclusion string `json:"controlTagInclusion,omitempty"`

	// number of unpaid invoices equals or exceeds
	NumberOfUnpaidInvoicesEqualsOrExceeds int32 `json:"numberOfUnpaidInvoicesEqualsOrExceeds,omitempty"`

	// response for last failed payment
	ResponseForLastFailedPayment []string `json:"responseForLastFailedPayment"`

	// time since earliest unpaid invoice equals or exceeds
	TimeSinceEarliestUnpaidInvoiceEqualsOrExceeds *Duration `json:"timeSinceEarliestUnpaidInvoiceEqualsOrExceeds,omitempty"`

	// total unpaid invoice balance equals or exceeds
	TotalUnpaidInvoiceBalanceEqualsOrExceeds float64 `json:"totalUnpaidInvoiceBalanceEqualsOrExceeds,omitempty"`
}

// Validate validates this overdue condition
func (m *OverdueCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlTagExclusion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateControlTagInclusion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseForLastFailedPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSinceEarliestUnpaidInvoiceEqualsOrExceeds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var overdueConditionTypeControlTagExclusionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO_PAY_OFF","AUTO_INVOICING_OFF","OVERDUE_ENFORCEMENT_OFF","WRITTEN_OFF","MANUAL_PAY","TEST","PARTNER","AUTO_INVOICING_DRAFT","AUTO_INVOICING_REUSE_DRAFT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		overdueConditionTypeControlTagExclusionPropEnum = append(overdueConditionTypeControlTagExclusionPropEnum, v)
	}
}

const (

	// OverdueConditionControlTagExclusionAUTOPAYOFF captures enum value "AUTO_PAY_OFF"
	OverdueConditionControlTagExclusionAUTOPAYOFF string = "AUTO_PAY_OFF"

	// OverdueConditionControlTagExclusionAUTOINVOICINGOFF captures enum value "AUTO_INVOICING_OFF"
	OverdueConditionControlTagExclusionAUTOINVOICINGOFF string = "AUTO_INVOICING_OFF"

	// OverdueConditionControlTagExclusionOVERDUEENFORCEMENTOFF captures enum value "OVERDUE_ENFORCEMENT_OFF"
	OverdueConditionControlTagExclusionOVERDUEENFORCEMENTOFF string = "OVERDUE_ENFORCEMENT_OFF"

	// OverdueConditionControlTagExclusionWRITTENOFF captures enum value "WRITTEN_OFF"
	OverdueConditionControlTagExclusionWRITTENOFF string = "WRITTEN_OFF"

	// OverdueConditionControlTagExclusionMANUALPAY captures enum value "MANUAL_PAY"
	OverdueConditionControlTagExclusionMANUALPAY string = "MANUAL_PAY"

	// OverdueConditionControlTagExclusionTEST captures enum value "TEST"
	OverdueConditionControlTagExclusionTEST string = "TEST"

	// OverdueConditionControlTagExclusionPARTNER captures enum value "PARTNER"
	OverdueConditionControlTagExclusionPARTNER string = "PARTNER"

	// OverdueConditionControlTagExclusionAUTOINVOICINGDRAFT captures enum value "AUTO_INVOICING_DRAFT"
	OverdueConditionControlTagExclusionAUTOINVOICINGDRAFT string = "AUTO_INVOICING_DRAFT"

	// OverdueConditionControlTagExclusionAUTOINVOICINGREUSEDRAFT captures enum value "AUTO_INVOICING_REUSE_DRAFT"
	OverdueConditionControlTagExclusionAUTOINVOICINGREUSEDRAFT string = "AUTO_INVOICING_REUSE_DRAFT"
)

// prop value enum
func (m *OverdueCondition) validateControlTagExclusionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, overdueConditionTypeControlTagExclusionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OverdueCondition) validateControlTagExclusion(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlTagExclusion) { // not required
		return nil
	}

	// value enum
	if err := m.validateControlTagExclusionEnum("controlTagExclusion", "body", m.ControlTagExclusion); err != nil {
		return err
	}

	return nil
}

var overdueConditionTypeControlTagInclusionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTO_PAY_OFF","AUTO_INVOICING_OFF","OVERDUE_ENFORCEMENT_OFF","WRITTEN_OFF","MANUAL_PAY","TEST","PARTNER","AUTO_INVOICING_DRAFT","AUTO_INVOICING_REUSE_DRAFT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		overdueConditionTypeControlTagInclusionPropEnum = append(overdueConditionTypeControlTagInclusionPropEnum, v)
	}
}

const (

	// OverdueConditionControlTagInclusionAUTOPAYOFF captures enum value "AUTO_PAY_OFF"
	OverdueConditionControlTagInclusionAUTOPAYOFF string = "AUTO_PAY_OFF"

	// OverdueConditionControlTagInclusionAUTOINVOICINGOFF captures enum value "AUTO_INVOICING_OFF"
	OverdueConditionControlTagInclusionAUTOINVOICINGOFF string = "AUTO_INVOICING_OFF"

	// OverdueConditionControlTagInclusionOVERDUEENFORCEMENTOFF captures enum value "OVERDUE_ENFORCEMENT_OFF"
	OverdueConditionControlTagInclusionOVERDUEENFORCEMENTOFF string = "OVERDUE_ENFORCEMENT_OFF"

	// OverdueConditionControlTagInclusionWRITTENOFF captures enum value "WRITTEN_OFF"
	OverdueConditionControlTagInclusionWRITTENOFF string = "WRITTEN_OFF"

	// OverdueConditionControlTagInclusionMANUALPAY captures enum value "MANUAL_PAY"
	OverdueConditionControlTagInclusionMANUALPAY string = "MANUAL_PAY"

	// OverdueConditionControlTagInclusionTEST captures enum value "TEST"
	OverdueConditionControlTagInclusionTEST string = "TEST"

	// OverdueConditionControlTagInclusionPARTNER captures enum value "PARTNER"
	OverdueConditionControlTagInclusionPARTNER string = "PARTNER"

	// OverdueConditionControlTagInclusionAUTOINVOICINGDRAFT captures enum value "AUTO_INVOICING_DRAFT"
	OverdueConditionControlTagInclusionAUTOINVOICINGDRAFT string = "AUTO_INVOICING_DRAFT"

	// OverdueConditionControlTagInclusionAUTOINVOICINGREUSEDRAFT captures enum value "AUTO_INVOICING_REUSE_DRAFT"
	OverdueConditionControlTagInclusionAUTOINVOICINGREUSEDRAFT string = "AUTO_INVOICING_REUSE_DRAFT"
)

// prop value enum
func (m *OverdueCondition) validateControlTagInclusionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, overdueConditionTypeControlTagInclusionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OverdueCondition) validateControlTagInclusion(formats strfmt.Registry) error {
	if swag.IsZero(m.ControlTagInclusion) { // not required
		return nil
	}

	// value enum
	if err := m.validateControlTagInclusionEnum("controlTagInclusion", "body", m.ControlTagInclusion); err != nil {
		return err
	}

	return nil
}

var overdueConditionResponseForLastFailedPaymentItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INVALID_CARD","EXPIRED_CARD","LOST_OR_STOLEN_CARD","DO_NOT_HONOR","INSUFFICIENT_FUNDS","DECLINE","PROCESSING_ERROR","INVALID_AMOUNT","DUPLICATE_TRANSACTION","OTHER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		overdueConditionResponseForLastFailedPaymentItemsEnum = append(overdueConditionResponseForLastFailedPaymentItemsEnum, v)
	}
}

func (m *OverdueCondition) validateResponseForLastFailedPaymentItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, overdueConditionResponseForLastFailedPaymentItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OverdueCondition) validateResponseForLastFailedPayment(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseForLastFailedPayment) { // not required
		return nil
	}

	for i := 0; i < len(m.ResponseForLastFailedPayment); i++ {

		// value enum
		if err := m.validateResponseForLastFailedPaymentItemsEnum("responseForLastFailedPayment"+"."+strconv.Itoa(i), "body", m.ResponseForLastFailedPayment[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OverdueCondition) validateTimeSinceEarliestUnpaidInvoiceEqualsOrExceeds(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeSinceEarliestUnpaidInvoiceEqualsOrExceeds) { // not required
		return nil
	}

	if m.TimeSinceEarliestUnpaidInvoiceEqualsOrExceeds != nil {
		if err := m.TimeSinceEarliestUnpaidInvoiceEqualsOrExceeds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeSinceEarliestUnpaidInvoiceEqualsOrExceeds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeSinceEarliestUnpaidInvoiceEqualsOrExceeds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this overdue condition based on the context it is used
func (m *OverdueCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeSinceEarliestUnpaidInvoiceEqualsOrExceeds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OverdueCondition) contextValidateTimeSinceEarliestUnpaidInvoiceEqualsOrExceeds(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeSinceEarliestUnpaidInvoiceEqualsOrExceeds != nil {
		if err := m.TimeSinceEarliestUnpaidInvoiceEqualsOrExceeds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeSinceEarliestUnpaidInvoiceEqualsOrExceeds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeSinceEarliestUnpaidInvoiceEqualsOrExceeds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OverdueCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OverdueCondition) UnmarshalBinary(b []byte) error {
	var res OverdueCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
