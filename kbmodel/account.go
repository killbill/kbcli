// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Account account
//
// swagger:model Account
type Account struct {

	// account balance
	AccountBalance float64 `json:"accountBalance,omitempty"`

	// account c b a
	AccountCBA float64 `json:"accountCBA,omitempty"`

	// account Id
	// Format: uuid
	AccountID strfmt.UUID `json:"accountId,omitempty"`

	// address1
	Address1 string `json:"address1,omitempty"`

	// address2
	Address2 string `json:"address2,omitempty"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// bill cycle day local
	BillCycleDayLocal int32 `json:"billCycleDayLocal,omitempty"`

	// city
	City string `json:"city,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// currency
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	Currency string `json:"currency,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// external key
	ExternalKey string `json:"externalKey,omitempty"`

	// first name length
	FirstNameLength int32 `json:"firstNameLength,omitempty"`

	// is migrated
	IsMigrated bool `json:"isMigrated,omitempty"`

	// is payment delegated to parent
	IsPaymentDelegatedToParent bool `json:"isPaymentDelegatedToParent,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notes
	Notes string `json:"notes,omitempty"`

	// parent account Id
	// Format: uuid
	ParentAccountID strfmt.UUID `json:"parentAccountId,omitempty"`

	// payment method Id
	// Format: uuid
	PaymentMethodID strfmt.UUID `json:"paymentMethodId,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// postal code
	PostalCode string `json:"postalCode,omitempty"`

	// reference time
	// Format: date-time
	ReferenceTime strfmt.DateTime `json:"referenceTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// time zone
	TimeZone string `json:"timeZone,omitempty"`
}

// Validate validates this account
func (m *Account) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethodID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Account) validateAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("accountId", "body", "uuid", m.AccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var accountTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountTypeCurrencyPropEnum = append(accountTypeCurrencyPropEnum, v)
	}
}

const (

	// AccountCurrencyAED captures enum value "AED"
	AccountCurrencyAED string = "AED"

	// AccountCurrencyAFN captures enum value "AFN"
	AccountCurrencyAFN string = "AFN"

	// AccountCurrencyALL captures enum value "ALL"
	AccountCurrencyALL string = "ALL"

	// AccountCurrencyAMD captures enum value "AMD"
	AccountCurrencyAMD string = "AMD"

	// AccountCurrencyANG captures enum value "ANG"
	AccountCurrencyANG string = "ANG"

	// AccountCurrencyAOA captures enum value "AOA"
	AccountCurrencyAOA string = "AOA"

	// AccountCurrencyARS captures enum value "ARS"
	AccountCurrencyARS string = "ARS"

	// AccountCurrencyAUD captures enum value "AUD"
	AccountCurrencyAUD string = "AUD"

	// AccountCurrencyAWG captures enum value "AWG"
	AccountCurrencyAWG string = "AWG"

	// AccountCurrencyAZN captures enum value "AZN"
	AccountCurrencyAZN string = "AZN"

	// AccountCurrencyBAM captures enum value "BAM"
	AccountCurrencyBAM string = "BAM"

	// AccountCurrencyBBD captures enum value "BBD"
	AccountCurrencyBBD string = "BBD"

	// AccountCurrencyBDT captures enum value "BDT"
	AccountCurrencyBDT string = "BDT"

	// AccountCurrencyBGN captures enum value "BGN"
	AccountCurrencyBGN string = "BGN"

	// AccountCurrencyBHD captures enum value "BHD"
	AccountCurrencyBHD string = "BHD"

	// AccountCurrencyBIF captures enum value "BIF"
	AccountCurrencyBIF string = "BIF"

	// AccountCurrencyBMD captures enum value "BMD"
	AccountCurrencyBMD string = "BMD"

	// AccountCurrencyBND captures enum value "BND"
	AccountCurrencyBND string = "BND"

	// AccountCurrencyBOB captures enum value "BOB"
	AccountCurrencyBOB string = "BOB"

	// AccountCurrencyBRL captures enum value "BRL"
	AccountCurrencyBRL string = "BRL"

	// AccountCurrencyBSD captures enum value "BSD"
	AccountCurrencyBSD string = "BSD"

	// AccountCurrencyBTN captures enum value "BTN"
	AccountCurrencyBTN string = "BTN"

	// AccountCurrencyBWP captures enum value "BWP"
	AccountCurrencyBWP string = "BWP"

	// AccountCurrencyBYR captures enum value "BYR"
	AccountCurrencyBYR string = "BYR"

	// AccountCurrencyBZD captures enum value "BZD"
	AccountCurrencyBZD string = "BZD"

	// AccountCurrencyCAD captures enum value "CAD"
	AccountCurrencyCAD string = "CAD"

	// AccountCurrencyCDF captures enum value "CDF"
	AccountCurrencyCDF string = "CDF"

	// AccountCurrencyCHF captures enum value "CHF"
	AccountCurrencyCHF string = "CHF"

	// AccountCurrencyCLP captures enum value "CLP"
	AccountCurrencyCLP string = "CLP"

	// AccountCurrencyCNY captures enum value "CNY"
	AccountCurrencyCNY string = "CNY"

	// AccountCurrencyCOP captures enum value "COP"
	AccountCurrencyCOP string = "COP"

	// AccountCurrencyCRC captures enum value "CRC"
	AccountCurrencyCRC string = "CRC"

	// AccountCurrencyCUC captures enum value "CUC"
	AccountCurrencyCUC string = "CUC"

	// AccountCurrencyCUP captures enum value "CUP"
	AccountCurrencyCUP string = "CUP"

	// AccountCurrencyCVE captures enum value "CVE"
	AccountCurrencyCVE string = "CVE"

	// AccountCurrencyCZK captures enum value "CZK"
	AccountCurrencyCZK string = "CZK"

	// AccountCurrencyDJF captures enum value "DJF"
	AccountCurrencyDJF string = "DJF"

	// AccountCurrencyDKK captures enum value "DKK"
	AccountCurrencyDKK string = "DKK"

	// AccountCurrencyDOP captures enum value "DOP"
	AccountCurrencyDOP string = "DOP"

	// AccountCurrencyDZD captures enum value "DZD"
	AccountCurrencyDZD string = "DZD"

	// AccountCurrencyEGP captures enum value "EGP"
	AccountCurrencyEGP string = "EGP"

	// AccountCurrencyERN captures enum value "ERN"
	AccountCurrencyERN string = "ERN"

	// AccountCurrencyETB captures enum value "ETB"
	AccountCurrencyETB string = "ETB"

	// AccountCurrencyEUR captures enum value "EUR"
	AccountCurrencyEUR string = "EUR"

	// AccountCurrencyFJD captures enum value "FJD"
	AccountCurrencyFJD string = "FJD"

	// AccountCurrencyFKP captures enum value "FKP"
	AccountCurrencyFKP string = "FKP"

	// AccountCurrencyGBP captures enum value "GBP"
	AccountCurrencyGBP string = "GBP"

	// AccountCurrencyGEL captures enum value "GEL"
	AccountCurrencyGEL string = "GEL"

	// AccountCurrencyGGP captures enum value "GGP"
	AccountCurrencyGGP string = "GGP"

	// AccountCurrencyGHS captures enum value "GHS"
	AccountCurrencyGHS string = "GHS"

	// AccountCurrencyGIP captures enum value "GIP"
	AccountCurrencyGIP string = "GIP"

	// AccountCurrencyGMD captures enum value "GMD"
	AccountCurrencyGMD string = "GMD"

	// AccountCurrencyGNF captures enum value "GNF"
	AccountCurrencyGNF string = "GNF"

	// AccountCurrencyGTQ captures enum value "GTQ"
	AccountCurrencyGTQ string = "GTQ"

	// AccountCurrencyGYD captures enum value "GYD"
	AccountCurrencyGYD string = "GYD"

	// AccountCurrencyHKD captures enum value "HKD"
	AccountCurrencyHKD string = "HKD"

	// AccountCurrencyHNL captures enum value "HNL"
	AccountCurrencyHNL string = "HNL"

	// AccountCurrencyHRK captures enum value "HRK"
	AccountCurrencyHRK string = "HRK"

	// AccountCurrencyHTG captures enum value "HTG"
	AccountCurrencyHTG string = "HTG"

	// AccountCurrencyHUF captures enum value "HUF"
	AccountCurrencyHUF string = "HUF"

	// AccountCurrencyIDR captures enum value "IDR"
	AccountCurrencyIDR string = "IDR"

	// AccountCurrencyILS captures enum value "ILS"
	AccountCurrencyILS string = "ILS"

	// AccountCurrencyIMP captures enum value "IMP"
	AccountCurrencyIMP string = "IMP"

	// AccountCurrencyINR captures enum value "INR"
	AccountCurrencyINR string = "INR"

	// AccountCurrencyIQD captures enum value "IQD"
	AccountCurrencyIQD string = "IQD"

	// AccountCurrencyIRR captures enum value "IRR"
	AccountCurrencyIRR string = "IRR"

	// AccountCurrencyISK captures enum value "ISK"
	AccountCurrencyISK string = "ISK"

	// AccountCurrencyJEP captures enum value "JEP"
	AccountCurrencyJEP string = "JEP"

	// AccountCurrencyJMD captures enum value "JMD"
	AccountCurrencyJMD string = "JMD"

	// AccountCurrencyJOD captures enum value "JOD"
	AccountCurrencyJOD string = "JOD"

	// AccountCurrencyJPY captures enum value "JPY"
	AccountCurrencyJPY string = "JPY"

	// AccountCurrencyKES captures enum value "KES"
	AccountCurrencyKES string = "KES"

	// AccountCurrencyKGS captures enum value "KGS"
	AccountCurrencyKGS string = "KGS"

	// AccountCurrencyKHR captures enum value "KHR"
	AccountCurrencyKHR string = "KHR"

	// AccountCurrencyKMF captures enum value "KMF"
	AccountCurrencyKMF string = "KMF"

	// AccountCurrencyKPW captures enum value "KPW"
	AccountCurrencyKPW string = "KPW"

	// AccountCurrencyKRW captures enum value "KRW"
	AccountCurrencyKRW string = "KRW"

	// AccountCurrencyKWD captures enum value "KWD"
	AccountCurrencyKWD string = "KWD"

	// AccountCurrencyKYD captures enum value "KYD"
	AccountCurrencyKYD string = "KYD"

	// AccountCurrencyKZT captures enum value "KZT"
	AccountCurrencyKZT string = "KZT"

	// AccountCurrencyLAK captures enum value "LAK"
	AccountCurrencyLAK string = "LAK"

	// AccountCurrencyLBP captures enum value "LBP"
	AccountCurrencyLBP string = "LBP"

	// AccountCurrencyLKR captures enum value "LKR"
	AccountCurrencyLKR string = "LKR"

	// AccountCurrencyLRD captures enum value "LRD"
	AccountCurrencyLRD string = "LRD"

	// AccountCurrencyLSL captures enum value "LSL"
	AccountCurrencyLSL string = "LSL"

	// AccountCurrencyLTL captures enum value "LTL"
	AccountCurrencyLTL string = "LTL"

	// AccountCurrencyLVL captures enum value "LVL"
	AccountCurrencyLVL string = "LVL"

	// AccountCurrencyLYD captures enum value "LYD"
	AccountCurrencyLYD string = "LYD"

	// AccountCurrencyMAD captures enum value "MAD"
	AccountCurrencyMAD string = "MAD"

	// AccountCurrencyMDL captures enum value "MDL"
	AccountCurrencyMDL string = "MDL"

	// AccountCurrencyMGA captures enum value "MGA"
	AccountCurrencyMGA string = "MGA"

	// AccountCurrencyMKD captures enum value "MKD"
	AccountCurrencyMKD string = "MKD"

	// AccountCurrencyMMK captures enum value "MMK"
	AccountCurrencyMMK string = "MMK"

	// AccountCurrencyMNT captures enum value "MNT"
	AccountCurrencyMNT string = "MNT"

	// AccountCurrencyMOP captures enum value "MOP"
	AccountCurrencyMOP string = "MOP"

	// AccountCurrencyMRO captures enum value "MRO"
	AccountCurrencyMRO string = "MRO"

	// AccountCurrencyMUR captures enum value "MUR"
	AccountCurrencyMUR string = "MUR"

	// AccountCurrencyMVR captures enum value "MVR"
	AccountCurrencyMVR string = "MVR"

	// AccountCurrencyMWK captures enum value "MWK"
	AccountCurrencyMWK string = "MWK"

	// AccountCurrencyMXN captures enum value "MXN"
	AccountCurrencyMXN string = "MXN"

	// AccountCurrencyMYR captures enum value "MYR"
	AccountCurrencyMYR string = "MYR"

	// AccountCurrencyMZN captures enum value "MZN"
	AccountCurrencyMZN string = "MZN"

	// AccountCurrencyNAD captures enum value "NAD"
	AccountCurrencyNAD string = "NAD"

	// AccountCurrencyNGN captures enum value "NGN"
	AccountCurrencyNGN string = "NGN"

	// AccountCurrencyNIO captures enum value "NIO"
	AccountCurrencyNIO string = "NIO"

	// AccountCurrencyNOK captures enum value "NOK"
	AccountCurrencyNOK string = "NOK"

	// AccountCurrencyNPR captures enum value "NPR"
	AccountCurrencyNPR string = "NPR"

	// AccountCurrencyNZD captures enum value "NZD"
	AccountCurrencyNZD string = "NZD"

	// AccountCurrencyOMR captures enum value "OMR"
	AccountCurrencyOMR string = "OMR"

	// AccountCurrencyPAB captures enum value "PAB"
	AccountCurrencyPAB string = "PAB"

	// AccountCurrencyPEN captures enum value "PEN"
	AccountCurrencyPEN string = "PEN"

	// AccountCurrencyPGK captures enum value "PGK"
	AccountCurrencyPGK string = "PGK"

	// AccountCurrencyPHP captures enum value "PHP"
	AccountCurrencyPHP string = "PHP"

	// AccountCurrencyPKR captures enum value "PKR"
	AccountCurrencyPKR string = "PKR"

	// AccountCurrencyPLN captures enum value "PLN"
	AccountCurrencyPLN string = "PLN"

	// AccountCurrencyPYG captures enum value "PYG"
	AccountCurrencyPYG string = "PYG"

	// AccountCurrencyQAR captures enum value "QAR"
	AccountCurrencyQAR string = "QAR"

	// AccountCurrencyRON captures enum value "RON"
	AccountCurrencyRON string = "RON"

	// AccountCurrencyRSD captures enum value "RSD"
	AccountCurrencyRSD string = "RSD"

	// AccountCurrencyRUB captures enum value "RUB"
	AccountCurrencyRUB string = "RUB"

	// AccountCurrencyRWF captures enum value "RWF"
	AccountCurrencyRWF string = "RWF"

	// AccountCurrencySAR captures enum value "SAR"
	AccountCurrencySAR string = "SAR"

	// AccountCurrencySBD captures enum value "SBD"
	AccountCurrencySBD string = "SBD"

	// AccountCurrencySCR captures enum value "SCR"
	AccountCurrencySCR string = "SCR"

	// AccountCurrencySDG captures enum value "SDG"
	AccountCurrencySDG string = "SDG"

	// AccountCurrencySEK captures enum value "SEK"
	AccountCurrencySEK string = "SEK"

	// AccountCurrencySGD captures enum value "SGD"
	AccountCurrencySGD string = "SGD"

	// AccountCurrencySHP captures enum value "SHP"
	AccountCurrencySHP string = "SHP"

	// AccountCurrencySLL captures enum value "SLL"
	AccountCurrencySLL string = "SLL"

	// AccountCurrencySOS captures enum value "SOS"
	AccountCurrencySOS string = "SOS"

	// AccountCurrencySPL captures enum value "SPL"
	AccountCurrencySPL string = "SPL"

	// AccountCurrencySRD captures enum value "SRD"
	AccountCurrencySRD string = "SRD"

	// AccountCurrencySTD captures enum value "STD"
	AccountCurrencySTD string = "STD"

	// AccountCurrencySVC captures enum value "SVC"
	AccountCurrencySVC string = "SVC"

	// AccountCurrencySYP captures enum value "SYP"
	AccountCurrencySYP string = "SYP"

	// AccountCurrencySZL captures enum value "SZL"
	AccountCurrencySZL string = "SZL"

	// AccountCurrencyTHB captures enum value "THB"
	AccountCurrencyTHB string = "THB"

	// AccountCurrencyTJS captures enum value "TJS"
	AccountCurrencyTJS string = "TJS"

	// AccountCurrencyTMT captures enum value "TMT"
	AccountCurrencyTMT string = "TMT"

	// AccountCurrencyTND captures enum value "TND"
	AccountCurrencyTND string = "TND"

	// AccountCurrencyTOP captures enum value "TOP"
	AccountCurrencyTOP string = "TOP"

	// AccountCurrencyTRY captures enum value "TRY"
	AccountCurrencyTRY string = "TRY"

	// AccountCurrencyTTD captures enum value "TTD"
	AccountCurrencyTTD string = "TTD"

	// AccountCurrencyTVD captures enum value "TVD"
	AccountCurrencyTVD string = "TVD"

	// AccountCurrencyTWD captures enum value "TWD"
	AccountCurrencyTWD string = "TWD"

	// AccountCurrencyTZS captures enum value "TZS"
	AccountCurrencyTZS string = "TZS"

	// AccountCurrencyUAH captures enum value "UAH"
	AccountCurrencyUAH string = "UAH"

	// AccountCurrencyUGX captures enum value "UGX"
	AccountCurrencyUGX string = "UGX"

	// AccountCurrencyUSD captures enum value "USD"
	AccountCurrencyUSD string = "USD"

	// AccountCurrencyUYU captures enum value "UYU"
	AccountCurrencyUYU string = "UYU"

	// AccountCurrencyUZS captures enum value "UZS"
	AccountCurrencyUZS string = "UZS"

	// AccountCurrencyVEF captures enum value "VEF"
	AccountCurrencyVEF string = "VEF"

	// AccountCurrencyVND captures enum value "VND"
	AccountCurrencyVND string = "VND"

	// AccountCurrencyVUV captures enum value "VUV"
	AccountCurrencyVUV string = "VUV"

	// AccountCurrencyWST captures enum value "WST"
	AccountCurrencyWST string = "WST"

	// AccountCurrencyXAF captures enum value "XAF"
	AccountCurrencyXAF string = "XAF"

	// AccountCurrencyXCD captures enum value "XCD"
	AccountCurrencyXCD string = "XCD"

	// AccountCurrencyXDR captures enum value "XDR"
	AccountCurrencyXDR string = "XDR"

	// AccountCurrencyXOF captures enum value "XOF"
	AccountCurrencyXOF string = "XOF"

	// AccountCurrencyXPF captures enum value "XPF"
	AccountCurrencyXPF string = "XPF"

	// AccountCurrencyYER captures enum value "YER"
	AccountCurrencyYER string = "YER"

	// AccountCurrencyZAR captures enum value "ZAR"
	AccountCurrencyZAR string = "ZAR"

	// AccountCurrencyZMW captures enum value "ZMW"
	AccountCurrencyZMW string = "ZMW"

	// AccountCurrencyZWD captures enum value "ZWD"
	AccountCurrencyZWD string = "ZWD"

	// AccountCurrencyBTC captures enum value "BTC"
	AccountCurrencyBTC string = "BTC"
)

// prop value enum
func (m *Account) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Account) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateParentAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentAccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentAccountId", "body", "uuid", m.ParentAccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Account) validatePaymentMethodID(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethodID) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentMethodId", "body", "uuid", m.PaymentMethodID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateReferenceTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferenceTime) { // not required
		return nil
	}

	if err := validate.FormatOf("referenceTime", "body", "date-time", m.ReferenceTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this account based on the context it is used
func (m *Account) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Account) contextValidateAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditLogs); i++ {

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Account) UnmarshalBinary(b []byte) error {
	var res Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
