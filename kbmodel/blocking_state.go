// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlockingState blocking state
//
// swagger:model BlockingState
type BlockingState struct {

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// blocked Id
	// Format: uuid
	BlockedID strfmt.UUID `json:"blockedId,omitempty"`

	// effective date
	// Format: date-time
	EffectiveDate strfmt.DateTime `json:"effectiveDate,omitempty"`

	// is block billing
	IsBlockBilling bool `json:"isBlockBilling,omitempty"`

	// is block change
	IsBlockChange bool `json:"isBlockChange,omitempty"`

	// is block entitlement
	IsBlockEntitlement bool `json:"isBlockEntitlement,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// state name
	StateName string `json:"stateName,omitempty"`

	// type
	// Enum: [SUBSCRIPTION SUBSCRIPTION_BUNDLE ACCOUNT]
	Type string `json:"type,omitempty"`
}

// Validate validates this blocking state
func (m *BlockingState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlockedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockingState) validateAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BlockingState) validateBlockedID(formats strfmt.Registry) error {
	if swag.IsZero(m.BlockedID) { // not required
		return nil
	}

	if err := validate.FormatOf("blockedId", "body", "uuid", m.BlockedID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BlockingState) validateEffectiveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EffectiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveDate", "body", "date-time", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var blockingStateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUBSCRIPTION","SUBSCRIPTION_BUNDLE","ACCOUNT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		blockingStateTypeTypePropEnum = append(blockingStateTypeTypePropEnum, v)
	}
}

const (

	// BlockingStateTypeSUBSCRIPTION captures enum value "SUBSCRIPTION"
	BlockingStateTypeSUBSCRIPTION string = "SUBSCRIPTION"

	// BlockingStateTypeSUBSCRIPTIONBUNDLE captures enum value "SUBSCRIPTION_BUNDLE"
	BlockingStateTypeSUBSCRIPTIONBUNDLE string = "SUBSCRIPTION_BUNDLE"

	// BlockingStateTypeACCOUNT captures enum value "ACCOUNT"
	BlockingStateTypeACCOUNT string = "ACCOUNT"
)

// prop value enum
func (m *BlockingState) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, blockingStateTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BlockingState) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this blocking state based on the context it is used
func (m *BlockingState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockingState) contextValidateAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditLogs); i++ {

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockingState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockingState) UnmarshalBinary(b []byte) error {
	var res BlockingState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
