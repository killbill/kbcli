// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventSubscription event subscription
// swagger:model EventSubscription
type EventSubscription struct {

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// billing period
	// Enum: [DAILY WEEKLY BIWEEKLY THIRTY_DAYS THIRTY_ONE_DAYS SIXTY_DAYS NINETY_DAYS MONTHLY BIMESTRIAL QUARTERLY TRIANNUAL BIANNUAL ANNUAL SESQUIENNIAL BIENNIAL TRIENNIAL NO_BILLING_PERIOD]
	BillingPeriod EventSubscriptionBillingPeriodEnum `json:"billingPeriod,omitempty"`

	// catalog effective date
	// Format: date-time
	CatalogEffectiveDate strfmt.DateTime `json:"catalogEffectiveDate,omitempty"`

	// effective date
	// Format: date-time
	EffectiveDate strfmt.DateTime `json:"effectiveDate,omitempty"`

	// event Id
	// Format: uuid
	EventID strfmt.UUID `json:"eventId,omitempty"`

	// event type
	// Enum: [START_ENTITLEMENT START_BILLING PAUSE_ENTITLEMENT PAUSE_BILLING RESUME_ENTITLEMENT RESUME_BILLING PHASE CHANGE STOP_ENTITLEMENT STOP_BILLING SERVICE_STATE_CHANGE]
	EventType EventSubscriptionEventTypeEnum `json:"eventType,omitempty"`

	// is blocked billing
	IsBlockedBilling bool `json:"isBlockedBilling,omitempty"`

	// is blocked entitlement
	IsBlockedEntitlement bool `json:"isBlockedEntitlement,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// plan
	Plan string `json:"plan,omitempty"`

	// price list
	PriceList string `json:"priceList,omitempty"`

	// product
	Product string `json:"product,omitempty"`

	// service name
	ServiceName string `json:"serviceName,omitempty"`

	// service state name
	ServiceStateName string `json:"serviceStateName,omitempty"`
}

// Validate validates this event subscription
func (m *EventSubscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventSubscription) validateAuditLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var eventSubscriptionTypeBillingPeriodPropEnum []interface{}

func init() {
	var res []EventSubscriptionBillingPeriodEnum
	if err := json.Unmarshal([]byte(`["DAILY","WEEKLY","BIWEEKLY","THIRTY_DAYS","THIRTY_ONE_DAYS","SIXTY_DAYS","NINETY_DAYS","MONTHLY","BIMESTRIAL","QUARTERLY","TRIANNUAL","BIANNUAL","ANNUAL","SESQUIENNIAL","BIENNIAL","TRIENNIAL","NO_BILLING_PERIOD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventSubscriptionTypeBillingPeriodPropEnum = append(eventSubscriptionTypeBillingPeriodPropEnum, v)
	}
}

type EventSubscriptionBillingPeriodEnum string

const (

	// EventSubscriptionBillingPeriodDAILY captures enum value "DAILY"
	EventSubscriptionBillingPeriodDAILY EventSubscriptionBillingPeriodEnum = "DAILY"

	// EventSubscriptionBillingPeriodWEEKLY captures enum value "WEEKLY"
	EventSubscriptionBillingPeriodWEEKLY EventSubscriptionBillingPeriodEnum = "WEEKLY"

	// EventSubscriptionBillingPeriodBIWEEKLY captures enum value "BIWEEKLY"
	EventSubscriptionBillingPeriodBIWEEKLY EventSubscriptionBillingPeriodEnum = "BIWEEKLY"

	// EventSubscriptionBillingPeriodTHIRTYDAYS captures enum value "THIRTY_DAYS"
	EventSubscriptionBillingPeriodTHIRTYDAYS EventSubscriptionBillingPeriodEnum = "THIRTY_DAYS"

	// EventSubscriptionBillingPeriodTHIRTYONEDAYS captures enum value "THIRTY_ONE_DAYS"
	EventSubscriptionBillingPeriodTHIRTYONEDAYS EventSubscriptionBillingPeriodEnum = "THIRTY_ONE_DAYS"

	// EventSubscriptionBillingPeriodSIXTYDAYS captures enum value "SIXTY_DAYS"
	EventSubscriptionBillingPeriodSIXTYDAYS EventSubscriptionBillingPeriodEnum = "SIXTY_DAYS"

	// EventSubscriptionBillingPeriodNINETYDAYS captures enum value "NINETY_DAYS"
	EventSubscriptionBillingPeriodNINETYDAYS EventSubscriptionBillingPeriodEnum = "NINETY_DAYS"

	// EventSubscriptionBillingPeriodMONTHLY captures enum value "MONTHLY"
	EventSubscriptionBillingPeriodMONTHLY EventSubscriptionBillingPeriodEnum = "MONTHLY"

	// EventSubscriptionBillingPeriodBIMESTRIAL captures enum value "BIMESTRIAL"
	EventSubscriptionBillingPeriodBIMESTRIAL EventSubscriptionBillingPeriodEnum = "BIMESTRIAL"

	// EventSubscriptionBillingPeriodQUARTERLY captures enum value "QUARTERLY"
	EventSubscriptionBillingPeriodQUARTERLY EventSubscriptionBillingPeriodEnum = "QUARTERLY"

	// EventSubscriptionBillingPeriodTRIANNUAL captures enum value "TRIANNUAL"
	EventSubscriptionBillingPeriodTRIANNUAL EventSubscriptionBillingPeriodEnum = "TRIANNUAL"

	// EventSubscriptionBillingPeriodBIANNUAL captures enum value "BIANNUAL"
	EventSubscriptionBillingPeriodBIANNUAL EventSubscriptionBillingPeriodEnum = "BIANNUAL"

	// EventSubscriptionBillingPeriodANNUAL captures enum value "ANNUAL"
	EventSubscriptionBillingPeriodANNUAL EventSubscriptionBillingPeriodEnum = "ANNUAL"

	// EventSubscriptionBillingPeriodSESQUIENNIAL captures enum value "SESQUIENNIAL"
	EventSubscriptionBillingPeriodSESQUIENNIAL EventSubscriptionBillingPeriodEnum = "SESQUIENNIAL"

	// EventSubscriptionBillingPeriodBIENNIAL captures enum value "BIENNIAL"
	EventSubscriptionBillingPeriodBIENNIAL EventSubscriptionBillingPeriodEnum = "BIENNIAL"

	// EventSubscriptionBillingPeriodTRIENNIAL captures enum value "TRIENNIAL"
	EventSubscriptionBillingPeriodTRIENNIAL EventSubscriptionBillingPeriodEnum = "TRIENNIAL"

	// EventSubscriptionBillingPeriodNOBILLINGPERIOD captures enum value "NO_BILLING_PERIOD"
	EventSubscriptionBillingPeriodNOBILLINGPERIOD EventSubscriptionBillingPeriodEnum = "NO_BILLING_PERIOD"
)

var EventSubscriptionBillingPeriodEnumValues = []string{
	"DAILY",
	"WEEKLY",
	"BIWEEKLY",
	"THIRTY_DAYS",
	"THIRTY_ONE_DAYS",
	"SIXTY_DAYS",
	"NINETY_DAYS",
	"MONTHLY",
	"BIMESTRIAL",
	"QUARTERLY",
	"TRIANNUAL",
	"BIANNUAL",
	"ANNUAL",
	"SESQUIENNIAL",
	"BIENNIAL",
	"TRIENNIAL",
	"NO_BILLING_PERIOD",
}

func (e EventSubscriptionBillingPeriodEnum) IsValid() bool {
	for _, v := range EventSubscriptionBillingPeriodEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *EventSubscription) validateBillingPeriodEnum(path, location string, value EventSubscriptionBillingPeriodEnum) error {
	if err := validate.Enum(path, location, value, eventSubscriptionTypeBillingPeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventSubscription) validateBillingPeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingPeriod) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingPeriodEnum("billingPeriod", "body", m.BillingPeriod); err != nil {
		return err
	}

	return nil
}

func (m *EventSubscription) validateCatalogEffectiveDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CatalogEffectiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("catalogEffectiveDate", "body", "date-time", m.CatalogEffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventSubscription) validateEffectiveDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveDate", "body", "date-time", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventSubscription) validateEventID(formats strfmt.Registry) error {

	if swag.IsZero(m.EventID) { // not required
		return nil
	}

	if err := validate.FormatOf("eventId", "body", "uuid", m.EventID.String(), formats); err != nil {
		return err
	}

	return nil
}

var eventSubscriptionTypeEventTypePropEnum []interface{}

func init() {
	var res []EventSubscriptionEventTypeEnum
	if err := json.Unmarshal([]byte(`["START_ENTITLEMENT","START_BILLING","PAUSE_ENTITLEMENT","PAUSE_BILLING","RESUME_ENTITLEMENT","RESUME_BILLING","PHASE","CHANGE","STOP_ENTITLEMENT","STOP_BILLING","SERVICE_STATE_CHANGE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventSubscriptionTypeEventTypePropEnum = append(eventSubscriptionTypeEventTypePropEnum, v)
	}
}

type EventSubscriptionEventTypeEnum string

const (

	// EventSubscriptionEventTypeSTARTENTITLEMENT captures enum value "START_ENTITLEMENT"
	EventSubscriptionEventTypeSTARTENTITLEMENT EventSubscriptionEventTypeEnum = "START_ENTITLEMENT"

	// EventSubscriptionEventTypeSTARTBILLING captures enum value "START_BILLING"
	EventSubscriptionEventTypeSTARTBILLING EventSubscriptionEventTypeEnum = "START_BILLING"

	// EventSubscriptionEventTypePAUSEENTITLEMENT captures enum value "PAUSE_ENTITLEMENT"
	EventSubscriptionEventTypePAUSEENTITLEMENT EventSubscriptionEventTypeEnum = "PAUSE_ENTITLEMENT"

	// EventSubscriptionEventTypePAUSEBILLING captures enum value "PAUSE_BILLING"
	EventSubscriptionEventTypePAUSEBILLING EventSubscriptionEventTypeEnum = "PAUSE_BILLING"

	// EventSubscriptionEventTypeRESUMEENTITLEMENT captures enum value "RESUME_ENTITLEMENT"
	EventSubscriptionEventTypeRESUMEENTITLEMENT EventSubscriptionEventTypeEnum = "RESUME_ENTITLEMENT"

	// EventSubscriptionEventTypeRESUMEBILLING captures enum value "RESUME_BILLING"
	EventSubscriptionEventTypeRESUMEBILLING EventSubscriptionEventTypeEnum = "RESUME_BILLING"

	// EventSubscriptionEventTypePHASE captures enum value "PHASE"
	EventSubscriptionEventTypePHASE EventSubscriptionEventTypeEnum = "PHASE"

	// EventSubscriptionEventTypeCHANGE captures enum value "CHANGE"
	EventSubscriptionEventTypeCHANGE EventSubscriptionEventTypeEnum = "CHANGE"

	// EventSubscriptionEventTypeSTOPENTITLEMENT captures enum value "STOP_ENTITLEMENT"
	EventSubscriptionEventTypeSTOPENTITLEMENT EventSubscriptionEventTypeEnum = "STOP_ENTITLEMENT"

	// EventSubscriptionEventTypeSTOPBILLING captures enum value "STOP_BILLING"
	EventSubscriptionEventTypeSTOPBILLING EventSubscriptionEventTypeEnum = "STOP_BILLING"

	// EventSubscriptionEventTypeSERVICESTATECHANGE captures enum value "SERVICE_STATE_CHANGE"
	EventSubscriptionEventTypeSERVICESTATECHANGE EventSubscriptionEventTypeEnum = "SERVICE_STATE_CHANGE"
)

var EventSubscriptionEventTypeEnumValues = []string{
	"START_ENTITLEMENT",
	"START_BILLING",
	"PAUSE_ENTITLEMENT",
	"PAUSE_BILLING",
	"RESUME_ENTITLEMENT",
	"RESUME_BILLING",
	"PHASE",
	"CHANGE",
	"STOP_ENTITLEMENT",
	"STOP_BILLING",
	"SERVICE_STATE_CHANGE",
}

func (e EventSubscriptionEventTypeEnum) IsValid() bool {
	for _, v := range EventSubscriptionEventTypeEnumValues {
		if v == string(e) {
			return true
		}
	}
	return false
}

// prop value enum
func (m *EventSubscription) validateEventTypeEnum(path, location string, value EventSubscriptionEventTypeEnum) error {
	if err := validate.Enum(path, location, value, eventSubscriptionTypeEventTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventSubscription) validateEventType(formats strfmt.Registry) error {

	if swag.IsZero(m.EventType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventTypeEnum("eventType", "body", m.EventType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventSubscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventSubscription) UnmarshalBinary(b []byte) error {
	var res EventSubscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
