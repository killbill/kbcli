// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AccountTimeline account timeline
// swagger:model AccountTimeline
type AccountTimeline struct {

	// account
	Account *Account `json:"account,omitempty"`

	// bundles
	Bundles []*Bundle `json:"bundles"`

	// invoices
	Invoices []*Invoice `json:"invoices"`

	// payments
	Payments []*InvoicePayment `json:"payments"`
}

// Validate validates this account timeline
func (m *AccountTimeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBundles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountTimeline) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *AccountTimeline) validateBundles(formats strfmt.Registry) error {

	if swag.IsZero(m.Bundles) { // not required
		return nil
	}

	for i := 0; i < len(m.Bundles); i++ {
		if swag.IsZero(m.Bundles[i]) { // not required
			continue
		}

		if m.Bundles[i] != nil {
			if err := m.Bundles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bundles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountTimeline) validateInvoices(formats strfmt.Registry) error {

	if swag.IsZero(m.Invoices) { // not required
		return nil
	}

	for i := 0; i < len(m.Invoices); i++ {
		if swag.IsZero(m.Invoices[i]) { // not required
			continue
		}

		if m.Invoices[i] != nil {
			if err := m.Invoices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invoices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountTimeline) validatePayments(formats strfmt.Registry) error {

	if swag.IsZero(m.Payments) { // not required
		return nil
	}

	for i := 0; i < len(m.Payments); i++ {
		if swag.IsZero(m.Payments[i]) { // not required
			continue
		}

		if m.Payments[i] != nil {
			if err := m.Payments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("payments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountTimeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountTimeline) UnmarshalBinary(b []byte) error {
	var res AccountTimeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
