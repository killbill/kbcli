// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoicePayment invoice payment
//
// swagger:model InvoicePayment
type InvoicePayment struct {

	// account Id
	// Format: uuid
	AccountID strfmt.UUID `json:"accountId,omitempty"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// auth amount
	AuthAmount float64 `json:"authAmount,omitempty"`

	// captured amount
	CapturedAmount float64 `json:"capturedAmount,omitempty"`

	// credited amount
	CreditedAmount float64 `json:"creditedAmount,omitempty"`

	// currency
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	Currency string `json:"currency,omitempty"`

	// payment attempts
	PaymentAttempts []*PaymentAttempt `json:"paymentAttempts"`

	// payment external key
	PaymentExternalKey string `json:"paymentExternalKey,omitempty"`

	// payment Id
	// Format: uuid
	PaymentID strfmt.UUID `json:"paymentId,omitempty"`

	// payment method Id
	// Format: uuid
	PaymentMethodID strfmt.UUID `json:"paymentMethodId,omitempty"`

	// payment number
	PaymentNumber string `json:"paymentNumber,omitempty"`

	// purchased amount
	PurchasedAmount float64 `json:"purchasedAmount,omitempty"`

	// refunded amount
	RefundedAmount float64 `json:"refundedAmount,omitempty"`

	// target invoice Id
	// Format: uuid
	TargetInvoiceID strfmt.UUID `json:"targetInvoiceId,omitempty"`

	// transactions
	Transactions []*PaymentTransaction `json:"transactions"`
}

// Validate validates this invoice payment
func (m *InvoicePayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethodID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetInvoiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoicePayment) validateAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if err := validate.FormatOf("accountId", "body", "uuid", m.AccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateAuditLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {
		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var invoicePaymentTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invoicePaymentTypeCurrencyPropEnum = append(invoicePaymentTypeCurrencyPropEnum, v)
	}
}

const (

	// InvoicePaymentCurrencyAED captures enum value "AED"
	InvoicePaymentCurrencyAED string = "AED"

	// InvoicePaymentCurrencyAFN captures enum value "AFN"
	InvoicePaymentCurrencyAFN string = "AFN"

	// InvoicePaymentCurrencyALL captures enum value "ALL"
	InvoicePaymentCurrencyALL string = "ALL"

	// InvoicePaymentCurrencyAMD captures enum value "AMD"
	InvoicePaymentCurrencyAMD string = "AMD"

	// InvoicePaymentCurrencyANG captures enum value "ANG"
	InvoicePaymentCurrencyANG string = "ANG"

	// InvoicePaymentCurrencyAOA captures enum value "AOA"
	InvoicePaymentCurrencyAOA string = "AOA"

	// InvoicePaymentCurrencyARS captures enum value "ARS"
	InvoicePaymentCurrencyARS string = "ARS"

	// InvoicePaymentCurrencyAUD captures enum value "AUD"
	InvoicePaymentCurrencyAUD string = "AUD"

	// InvoicePaymentCurrencyAWG captures enum value "AWG"
	InvoicePaymentCurrencyAWG string = "AWG"

	// InvoicePaymentCurrencyAZN captures enum value "AZN"
	InvoicePaymentCurrencyAZN string = "AZN"

	// InvoicePaymentCurrencyBAM captures enum value "BAM"
	InvoicePaymentCurrencyBAM string = "BAM"

	// InvoicePaymentCurrencyBBD captures enum value "BBD"
	InvoicePaymentCurrencyBBD string = "BBD"

	// InvoicePaymentCurrencyBDT captures enum value "BDT"
	InvoicePaymentCurrencyBDT string = "BDT"

	// InvoicePaymentCurrencyBGN captures enum value "BGN"
	InvoicePaymentCurrencyBGN string = "BGN"

	// InvoicePaymentCurrencyBHD captures enum value "BHD"
	InvoicePaymentCurrencyBHD string = "BHD"

	// InvoicePaymentCurrencyBIF captures enum value "BIF"
	InvoicePaymentCurrencyBIF string = "BIF"

	// InvoicePaymentCurrencyBMD captures enum value "BMD"
	InvoicePaymentCurrencyBMD string = "BMD"

	// InvoicePaymentCurrencyBND captures enum value "BND"
	InvoicePaymentCurrencyBND string = "BND"

	// InvoicePaymentCurrencyBOB captures enum value "BOB"
	InvoicePaymentCurrencyBOB string = "BOB"

	// InvoicePaymentCurrencyBRL captures enum value "BRL"
	InvoicePaymentCurrencyBRL string = "BRL"

	// InvoicePaymentCurrencyBSD captures enum value "BSD"
	InvoicePaymentCurrencyBSD string = "BSD"

	// InvoicePaymentCurrencyBTN captures enum value "BTN"
	InvoicePaymentCurrencyBTN string = "BTN"

	// InvoicePaymentCurrencyBWP captures enum value "BWP"
	InvoicePaymentCurrencyBWP string = "BWP"

	// InvoicePaymentCurrencyBYR captures enum value "BYR"
	InvoicePaymentCurrencyBYR string = "BYR"

	// InvoicePaymentCurrencyBZD captures enum value "BZD"
	InvoicePaymentCurrencyBZD string = "BZD"

	// InvoicePaymentCurrencyCAD captures enum value "CAD"
	InvoicePaymentCurrencyCAD string = "CAD"

	// InvoicePaymentCurrencyCDF captures enum value "CDF"
	InvoicePaymentCurrencyCDF string = "CDF"

	// InvoicePaymentCurrencyCHF captures enum value "CHF"
	InvoicePaymentCurrencyCHF string = "CHF"

	// InvoicePaymentCurrencyCLP captures enum value "CLP"
	InvoicePaymentCurrencyCLP string = "CLP"

	// InvoicePaymentCurrencyCNY captures enum value "CNY"
	InvoicePaymentCurrencyCNY string = "CNY"

	// InvoicePaymentCurrencyCOP captures enum value "COP"
	InvoicePaymentCurrencyCOP string = "COP"

	// InvoicePaymentCurrencyCRC captures enum value "CRC"
	InvoicePaymentCurrencyCRC string = "CRC"

	// InvoicePaymentCurrencyCUC captures enum value "CUC"
	InvoicePaymentCurrencyCUC string = "CUC"

	// InvoicePaymentCurrencyCUP captures enum value "CUP"
	InvoicePaymentCurrencyCUP string = "CUP"

	// InvoicePaymentCurrencyCVE captures enum value "CVE"
	InvoicePaymentCurrencyCVE string = "CVE"

	// InvoicePaymentCurrencyCZK captures enum value "CZK"
	InvoicePaymentCurrencyCZK string = "CZK"

	// InvoicePaymentCurrencyDJF captures enum value "DJF"
	InvoicePaymentCurrencyDJF string = "DJF"

	// InvoicePaymentCurrencyDKK captures enum value "DKK"
	InvoicePaymentCurrencyDKK string = "DKK"

	// InvoicePaymentCurrencyDOP captures enum value "DOP"
	InvoicePaymentCurrencyDOP string = "DOP"

	// InvoicePaymentCurrencyDZD captures enum value "DZD"
	InvoicePaymentCurrencyDZD string = "DZD"

	// InvoicePaymentCurrencyEGP captures enum value "EGP"
	InvoicePaymentCurrencyEGP string = "EGP"

	// InvoicePaymentCurrencyERN captures enum value "ERN"
	InvoicePaymentCurrencyERN string = "ERN"

	// InvoicePaymentCurrencyETB captures enum value "ETB"
	InvoicePaymentCurrencyETB string = "ETB"

	// InvoicePaymentCurrencyEUR captures enum value "EUR"
	InvoicePaymentCurrencyEUR string = "EUR"

	// InvoicePaymentCurrencyFJD captures enum value "FJD"
	InvoicePaymentCurrencyFJD string = "FJD"

	// InvoicePaymentCurrencyFKP captures enum value "FKP"
	InvoicePaymentCurrencyFKP string = "FKP"

	// InvoicePaymentCurrencyGBP captures enum value "GBP"
	InvoicePaymentCurrencyGBP string = "GBP"

	// InvoicePaymentCurrencyGEL captures enum value "GEL"
	InvoicePaymentCurrencyGEL string = "GEL"

	// InvoicePaymentCurrencyGGP captures enum value "GGP"
	InvoicePaymentCurrencyGGP string = "GGP"

	// InvoicePaymentCurrencyGHS captures enum value "GHS"
	InvoicePaymentCurrencyGHS string = "GHS"

	// InvoicePaymentCurrencyGIP captures enum value "GIP"
	InvoicePaymentCurrencyGIP string = "GIP"

	// InvoicePaymentCurrencyGMD captures enum value "GMD"
	InvoicePaymentCurrencyGMD string = "GMD"

	// InvoicePaymentCurrencyGNF captures enum value "GNF"
	InvoicePaymentCurrencyGNF string = "GNF"

	// InvoicePaymentCurrencyGTQ captures enum value "GTQ"
	InvoicePaymentCurrencyGTQ string = "GTQ"

	// InvoicePaymentCurrencyGYD captures enum value "GYD"
	InvoicePaymentCurrencyGYD string = "GYD"

	// InvoicePaymentCurrencyHKD captures enum value "HKD"
	InvoicePaymentCurrencyHKD string = "HKD"

	// InvoicePaymentCurrencyHNL captures enum value "HNL"
	InvoicePaymentCurrencyHNL string = "HNL"

	// InvoicePaymentCurrencyHRK captures enum value "HRK"
	InvoicePaymentCurrencyHRK string = "HRK"

	// InvoicePaymentCurrencyHTG captures enum value "HTG"
	InvoicePaymentCurrencyHTG string = "HTG"

	// InvoicePaymentCurrencyHUF captures enum value "HUF"
	InvoicePaymentCurrencyHUF string = "HUF"

	// InvoicePaymentCurrencyIDR captures enum value "IDR"
	InvoicePaymentCurrencyIDR string = "IDR"

	// InvoicePaymentCurrencyILS captures enum value "ILS"
	InvoicePaymentCurrencyILS string = "ILS"

	// InvoicePaymentCurrencyIMP captures enum value "IMP"
	InvoicePaymentCurrencyIMP string = "IMP"

	// InvoicePaymentCurrencyINR captures enum value "INR"
	InvoicePaymentCurrencyINR string = "INR"

	// InvoicePaymentCurrencyIQD captures enum value "IQD"
	InvoicePaymentCurrencyIQD string = "IQD"

	// InvoicePaymentCurrencyIRR captures enum value "IRR"
	InvoicePaymentCurrencyIRR string = "IRR"

	// InvoicePaymentCurrencyISK captures enum value "ISK"
	InvoicePaymentCurrencyISK string = "ISK"

	// InvoicePaymentCurrencyJEP captures enum value "JEP"
	InvoicePaymentCurrencyJEP string = "JEP"

	// InvoicePaymentCurrencyJMD captures enum value "JMD"
	InvoicePaymentCurrencyJMD string = "JMD"

	// InvoicePaymentCurrencyJOD captures enum value "JOD"
	InvoicePaymentCurrencyJOD string = "JOD"

	// InvoicePaymentCurrencyJPY captures enum value "JPY"
	InvoicePaymentCurrencyJPY string = "JPY"

	// InvoicePaymentCurrencyKES captures enum value "KES"
	InvoicePaymentCurrencyKES string = "KES"

	// InvoicePaymentCurrencyKGS captures enum value "KGS"
	InvoicePaymentCurrencyKGS string = "KGS"

	// InvoicePaymentCurrencyKHR captures enum value "KHR"
	InvoicePaymentCurrencyKHR string = "KHR"

	// InvoicePaymentCurrencyKMF captures enum value "KMF"
	InvoicePaymentCurrencyKMF string = "KMF"

	// InvoicePaymentCurrencyKPW captures enum value "KPW"
	InvoicePaymentCurrencyKPW string = "KPW"

	// InvoicePaymentCurrencyKRW captures enum value "KRW"
	InvoicePaymentCurrencyKRW string = "KRW"

	// InvoicePaymentCurrencyKWD captures enum value "KWD"
	InvoicePaymentCurrencyKWD string = "KWD"

	// InvoicePaymentCurrencyKYD captures enum value "KYD"
	InvoicePaymentCurrencyKYD string = "KYD"

	// InvoicePaymentCurrencyKZT captures enum value "KZT"
	InvoicePaymentCurrencyKZT string = "KZT"

	// InvoicePaymentCurrencyLAK captures enum value "LAK"
	InvoicePaymentCurrencyLAK string = "LAK"

	// InvoicePaymentCurrencyLBP captures enum value "LBP"
	InvoicePaymentCurrencyLBP string = "LBP"

	// InvoicePaymentCurrencyLKR captures enum value "LKR"
	InvoicePaymentCurrencyLKR string = "LKR"

	// InvoicePaymentCurrencyLRD captures enum value "LRD"
	InvoicePaymentCurrencyLRD string = "LRD"

	// InvoicePaymentCurrencyLSL captures enum value "LSL"
	InvoicePaymentCurrencyLSL string = "LSL"

	// InvoicePaymentCurrencyLTL captures enum value "LTL"
	InvoicePaymentCurrencyLTL string = "LTL"

	// InvoicePaymentCurrencyLVL captures enum value "LVL"
	InvoicePaymentCurrencyLVL string = "LVL"

	// InvoicePaymentCurrencyLYD captures enum value "LYD"
	InvoicePaymentCurrencyLYD string = "LYD"

	// InvoicePaymentCurrencyMAD captures enum value "MAD"
	InvoicePaymentCurrencyMAD string = "MAD"

	// InvoicePaymentCurrencyMDL captures enum value "MDL"
	InvoicePaymentCurrencyMDL string = "MDL"

	// InvoicePaymentCurrencyMGA captures enum value "MGA"
	InvoicePaymentCurrencyMGA string = "MGA"

	// InvoicePaymentCurrencyMKD captures enum value "MKD"
	InvoicePaymentCurrencyMKD string = "MKD"

	// InvoicePaymentCurrencyMMK captures enum value "MMK"
	InvoicePaymentCurrencyMMK string = "MMK"

	// InvoicePaymentCurrencyMNT captures enum value "MNT"
	InvoicePaymentCurrencyMNT string = "MNT"

	// InvoicePaymentCurrencyMOP captures enum value "MOP"
	InvoicePaymentCurrencyMOP string = "MOP"

	// InvoicePaymentCurrencyMRO captures enum value "MRO"
	InvoicePaymentCurrencyMRO string = "MRO"

	// InvoicePaymentCurrencyMUR captures enum value "MUR"
	InvoicePaymentCurrencyMUR string = "MUR"

	// InvoicePaymentCurrencyMVR captures enum value "MVR"
	InvoicePaymentCurrencyMVR string = "MVR"

	// InvoicePaymentCurrencyMWK captures enum value "MWK"
	InvoicePaymentCurrencyMWK string = "MWK"

	// InvoicePaymentCurrencyMXN captures enum value "MXN"
	InvoicePaymentCurrencyMXN string = "MXN"

	// InvoicePaymentCurrencyMYR captures enum value "MYR"
	InvoicePaymentCurrencyMYR string = "MYR"

	// InvoicePaymentCurrencyMZN captures enum value "MZN"
	InvoicePaymentCurrencyMZN string = "MZN"

	// InvoicePaymentCurrencyNAD captures enum value "NAD"
	InvoicePaymentCurrencyNAD string = "NAD"

	// InvoicePaymentCurrencyNGN captures enum value "NGN"
	InvoicePaymentCurrencyNGN string = "NGN"

	// InvoicePaymentCurrencyNIO captures enum value "NIO"
	InvoicePaymentCurrencyNIO string = "NIO"

	// InvoicePaymentCurrencyNOK captures enum value "NOK"
	InvoicePaymentCurrencyNOK string = "NOK"

	// InvoicePaymentCurrencyNPR captures enum value "NPR"
	InvoicePaymentCurrencyNPR string = "NPR"

	// InvoicePaymentCurrencyNZD captures enum value "NZD"
	InvoicePaymentCurrencyNZD string = "NZD"

	// InvoicePaymentCurrencyOMR captures enum value "OMR"
	InvoicePaymentCurrencyOMR string = "OMR"

	// InvoicePaymentCurrencyPAB captures enum value "PAB"
	InvoicePaymentCurrencyPAB string = "PAB"

	// InvoicePaymentCurrencyPEN captures enum value "PEN"
	InvoicePaymentCurrencyPEN string = "PEN"

	// InvoicePaymentCurrencyPGK captures enum value "PGK"
	InvoicePaymentCurrencyPGK string = "PGK"

	// InvoicePaymentCurrencyPHP captures enum value "PHP"
	InvoicePaymentCurrencyPHP string = "PHP"

	// InvoicePaymentCurrencyPKR captures enum value "PKR"
	InvoicePaymentCurrencyPKR string = "PKR"

	// InvoicePaymentCurrencyPLN captures enum value "PLN"
	InvoicePaymentCurrencyPLN string = "PLN"

	// InvoicePaymentCurrencyPYG captures enum value "PYG"
	InvoicePaymentCurrencyPYG string = "PYG"

	// InvoicePaymentCurrencyQAR captures enum value "QAR"
	InvoicePaymentCurrencyQAR string = "QAR"

	// InvoicePaymentCurrencyRON captures enum value "RON"
	InvoicePaymentCurrencyRON string = "RON"

	// InvoicePaymentCurrencyRSD captures enum value "RSD"
	InvoicePaymentCurrencyRSD string = "RSD"

	// InvoicePaymentCurrencyRUB captures enum value "RUB"
	InvoicePaymentCurrencyRUB string = "RUB"

	// InvoicePaymentCurrencyRWF captures enum value "RWF"
	InvoicePaymentCurrencyRWF string = "RWF"

	// InvoicePaymentCurrencySAR captures enum value "SAR"
	InvoicePaymentCurrencySAR string = "SAR"

	// InvoicePaymentCurrencySBD captures enum value "SBD"
	InvoicePaymentCurrencySBD string = "SBD"

	// InvoicePaymentCurrencySCR captures enum value "SCR"
	InvoicePaymentCurrencySCR string = "SCR"

	// InvoicePaymentCurrencySDG captures enum value "SDG"
	InvoicePaymentCurrencySDG string = "SDG"

	// InvoicePaymentCurrencySEK captures enum value "SEK"
	InvoicePaymentCurrencySEK string = "SEK"

	// InvoicePaymentCurrencySGD captures enum value "SGD"
	InvoicePaymentCurrencySGD string = "SGD"

	// InvoicePaymentCurrencySHP captures enum value "SHP"
	InvoicePaymentCurrencySHP string = "SHP"

	// InvoicePaymentCurrencySLL captures enum value "SLL"
	InvoicePaymentCurrencySLL string = "SLL"

	// InvoicePaymentCurrencySOS captures enum value "SOS"
	InvoicePaymentCurrencySOS string = "SOS"

	// InvoicePaymentCurrencySPL captures enum value "SPL"
	InvoicePaymentCurrencySPL string = "SPL"

	// InvoicePaymentCurrencySRD captures enum value "SRD"
	InvoicePaymentCurrencySRD string = "SRD"

	// InvoicePaymentCurrencySTD captures enum value "STD"
	InvoicePaymentCurrencySTD string = "STD"

	// InvoicePaymentCurrencySVC captures enum value "SVC"
	InvoicePaymentCurrencySVC string = "SVC"

	// InvoicePaymentCurrencySYP captures enum value "SYP"
	InvoicePaymentCurrencySYP string = "SYP"

	// InvoicePaymentCurrencySZL captures enum value "SZL"
	InvoicePaymentCurrencySZL string = "SZL"

	// InvoicePaymentCurrencyTHB captures enum value "THB"
	InvoicePaymentCurrencyTHB string = "THB"

	// InvoicePaymentCurrencyTJS captures enum value "TJS"
	InvoicePaymentCurrencyTJS string = "TJS"

	// InvoicePaymentCurrencyTMT captures enum value "TMT"
	InvoicePaymentCurrencyTMT string = "TMT"

	// InvoicePaymentCurrencyTND captures enum value "TND"
	InvoicePaymentCurrencyTND string = "TND"

	// InvoicePaymentCurrencyTOP captures enum value "TOP"
	InvoicePaymentCurrencyTOP string = "TOP"

	// InvoicePaymentCurrencyTRY captures enum value "TRY"
	InvoicePaymentCurrencyTRY string = "TRY"

	// InvoicePaymentCurrencyTTD captures enum value "TTD"
	InvoicePaymentCurrencyTTD string = "TTD"

	// InvoicePaymentCurrencyTVD captures enum value "TVD"
	InvoicePaymentCurrencyTVD string = "TVD"

	// InvoicePaymentCurrencyTWD captures enum value "TWD"
	InvoicePaymentCurrencyTWD string = "TWD"

	// InvoicePaymentCurrencyTZS captures enum value "TZS"
	InvoicePaymentCurrencyTZS string = "TZS"

	// InvoicePaymentCurrencyUAH captures enum value "UAH"
	InvoicePaymentCurrencyUAH string = "UAH"

	// InvoicePaymentCurrencyUGX captures enum value "UGX"
	InvoicePaymentCurrencyUGX string = "UGX"

	// InvoicePaymentCurrencyUSD captures enum value "USD"
	InvoicePaymentCurrencyUSD string = "USD"

	// InvoicePaymentCurrencyUYU captures enum value "UYU"
	InvoicePaymentCurrencyUYU string = "UYU"

	// InvoicePaymentCurrencyUZS captures enum value "UZS"
	InvoicePaymentCurrencyUZS string = "UZS"

	// InvoicePaymentCurrencyVEF captures enum value "VEF"
	InvoicePaymentCurrencyVEF string = "VEF"

	// InvoicePaymentCurrencyVND captures enum value "VND"
	InvoicePaymentCurrencyVND string = "VND"

	// InvoicePaymentCurrencyVUV captures enum value "VUV"
	InvoicePaymentCurrencyVUV string = "VUV"

	// InvoicePaymentCurrencyWST captures enum value "WST"
	InvoicePaymentCurrencyWST string = "WST"

	// InvoicePaymentCurrencyXAF captures enum value "XAF"
	InvoicePaymentCurrencyXAF string = "XAF"

	// InvoicePaymentCurrencyXCD captures enum value "XCD"
	InvoicePaymentCurrencyXCD string = "XCD"

	// InvoicePaymentCurrencyXDR captures enum value "XDR"
	InvoicePaymentCurrencyXDR string = "XDR"

	// InvoicePaymentCurrencyXOF captures enum value "XOF"
	InvoicePaymentCurrencyXOF string = "XOF"

	// InvoicePaymentCurrencyXPF captures enum value "XPF"
	InvoicePaymentCurrencyXPF string = "XPF"

	// InvoicePaymentCurrencyYER captures enum value "YER"
	InvoicePaymentCurrencyYER string = "YER"

	// InvoicePaymentCurrencyZAR captures enum value "ZAR"
	InvoicePaymentCurrencyZAR string = "ZAR"

	// InvoicePaymentCurrencyZMW captures enum value "ZMW"
	InvoicePaymentCurrencyZMW string = "ZMW"

	// InvoicePaymentCurrencyZWD captures enum value "ZWD"
	InvoicePaymentCurrencyZWD string = "ZWD"

	// InvoicePaymentCurrencyBTC captures enum value "BTC"
	InvoicePaymentCurrencyBTC string = "BTC"
)

// prop value enum
func (m *InvoicePayment) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, invoicePaymentTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InvoicePayment) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validatePaymentAttempts(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentAttempts) { // not required
		return nil
	}

	for i := 0; i < len(m.PaymentAttempts); i++ {
		if swag.IsZero(m.PaymentAttempts[i]) { // not required
			continue
		}

		if m.PaymentAttempts[i] != nil {
			if err := m.PaymentAttempts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paymentAttempts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("paymentAttempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicePayment) validatePaymentID(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentID) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentId", "body", "uuid", m.PaymentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validatePaymentMethodID(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethodID) { // not required
		return nil
	}

	if err := validate.FormatOf("paymentMethodId", "body", "uuid", m.PaymentMethodID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateTargetInvoiceID(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetInvoiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("targetInvoiceId", "body", "uuid", m.TargetInvoiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InvoicePayment) validateTransactions(formats strfmt.Registry) error {
	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transactions); i++ {
		if swag.IsZero(m.Transactions[i]) { // not required
			continue
		}

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this invoice payment based on the context it is used
func (m *InvoicePayment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentAttempts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoicePayment) contextValidateAuditLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditLogs); i++ {

		if m.AuditLogs[i] != nil {
			if err := m.AuditLogs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicePayment) contextValidatePaymentAttempts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PaymentAttempts); i++ {

		if m.PaymentAttempts[i] != nil {
			if err := m.PaymentAttempts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paymentAttempts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("paymentAttempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicePayment) contextValidateTransactions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Transactions); i++ {

		if m.Transactions[i] != nil {
			if err := m.Transactions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoicePayment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoicePayment) UnmarshalBinary(b []byte) error {
	var res InvoicePayment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
