// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionUsageRecord subscription usage record
// swagger:model SubscriptionUsageRecord
type SubscriptionUsageRecord struct {

	// subscription Id
	// Required: true
	// Format: uuid
	SubscriptionID *strfmt.UUID `json:"subscriptionId"`

	// tracking Id
	TrackingID string `json:"trackingId,omitempty"`

	// unit usage records
	// Required: true
	UnitUsageRecords []*UnitUsageRecord `json:"unitUsageRecords"`
}

// Validate validates this subscription usage record
func (m *SubscriptionUsageRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubscriptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitUsageRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionUsageRecord) validateSubscriptionID(formats strfmt.Registry) error {

	if err := validate.Required("subscriptionId", "body", m.SubscriptionID); err != nil {
		return err
	}

	if err := validate.FormatOf("subscriptionId", "body", "uuid", m.SubscriptionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionUsageRecord) validateUnitUsageRecords(formats strfmt.Registry) error {

	if err := validate.Required("unitUsageRecords", "body", m.UnitUsageRecords); err != nil {
		return err
	}

	for i := 0; i < len(m.UnitUsageRecords); i++ {
		if swag.IsZero(m.UnitUsageRecords[i]) { // not required
			continue
		}

		if m.UnitUsageRecords[i] != nil {
			if err := m.UnitUsageRecords[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unitUsageRecords" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionUsageRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionUsageRecord) UnmarshalBinary(b []byte) error {
	var res SubscriptionUsageRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
