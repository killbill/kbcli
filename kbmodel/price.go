// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Price price
//
// swagger:model Price
type Price struct {

	// currency
	// Enum: [AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BRL BSD BTN BWP BYR BZD CAD CDF CHF CLP CNY COP CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GGP GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS IMP INR IQD IRR ISK JEP JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LTL LVL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SPL SRD STD SVC SYP SZL THB TJS TMT TND TOP TRY TTD TVD TWD TZS UAH UGX USD UYU UZS VEF VND VUV WST XAF XCD XDR XOF XPF YER ZAR ZMW ZWD BTC]
	Currency string `json:"currency,omitempty"`

	// value
	Value float64 `json:"value,omitempty"`
}

// Validate validates this price
func (m *Price) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var priceTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		priceTypeCurrencyPropEnum = append(priceTypeCurrencyPropEnum, v)
	}
}

const (

	// PriceCurrencyAED captures enum value "AED"
	PriceCurrencyAED string = "AED"

	// PriceCurrencyAFN captures enum value "AFN"
	PriceCurrencyAFN string = "AFN"

	// PriceCurrencyALL captures enum value "ALL"
	PriceCurrencyALL string = "ALL"

	// PriceCurrencyAMD captures enum value "AMD"
	PriceCurrencyAMD string = "AMD"

	// PriceCurrencyANG captures enum value "ANG"
	PriceCurrencyANG string = "ANG"

	// PriceCurrencyAOA captures enum value "AOA"
	PriceCurrencyAOA string = "AOA"

	// PriceCurrencyARS captures enum value "ARS"
	PriceCurrencyARS string = "ARS"

	// PriceCurrencyAUD captures enum value "AUD"
	PriceCurrencyAUD string = "AUD"

	// PriceCurrencyAWG captures enum value "AWG"
	PriceCurrencyAWG string = "AWG"

	// PriceCurrencyAZN captures enum value "AZN"
	PriceCurrencyAZN string = "AZN"

	// PriceCurrencyBAM captures enum value "BAM"
	PriceCurrencyBAM string = "BAM"

	// PriceCurrencyBBD captures enum value "BBD"
	PriceCurrencyBBD string = "BBD"

	// PriceCurrencyBDT captures enum value "BDT"
	PriceCurrencyBDT string = "BDT"

	// PriceCurrencyBGN captures enum value "BGN"
	PriceCurrencyBGN string = "BGN"

	// PriceCurrencyBHD captures enum value "BHD"
	PriceCurrencyBHD string = "BHD"

	// PriceCurrencyBIF captures enum value "BIF"
	PriceCurrencyBIF string = "BIF"

	// PriceCurrencyBMD captures enum value "BMD"
	PriceCurrencyBMD string = "BMD"

	// PriceCurrencyBND captures enum value "BND"
	PriceCurrencyBND string = "BND"

	// PriceCurrencyBOB captures enum value "BOB"
	PriceCurrencyBOB string = "BOB"

	// PriceCurrencyBRL captures enum value "BRL"
	PriceCurrencyBRL string = "BRL"

	// PriceCurrencyBSD captures enum value "BSD"
	PriceCurrencyBSD string = "BSD"

	// PriceCurrencyBTN captures enum value "BTN"
	PriceCurrencyBTN string = "BTN"

	// PriceCurrencyBWP captures enum value "BWP"
	PriceCurrencyBWP string = "BWP"

	// PriceCurrencyBYR captures enum value "BYR"
	PriceCurrencyBYR string = "BYR"

	// PriceCurrencyBZD captures enum value "BZD"
	PriceCurrencyBZD string = "BZD"

	// PriceCurrencyCAD captures enum value "CAD"
	PriceCurrencyCAD string = "CAD"

	// PriceCurrencyCDF captures enum value "CDF"
	PriceCurrencyCDF string = "CDF"

	// PriceCurrencyCHF captures enum value "CHF"
	PriceCurrencyCHF string = "CHF"

	// PriceCurrencyCLP captures enum value "CLP"
	PriceCurrencyCLP string = "CLP"

	// PriceCurrencyCNY captures enum value "CNY"
	PriceCurrencyCNY string = "CNY"

	// PriceCurrencyCOP captures enum value "COP"
	PriceCurrencyCOP string = "COP"

	// PriceCurrencyCRC captures enum value "CRC"
	PriceCurrencyCRC string = "CRC"

	// PriceCurrencyCUC captures enum value "CUC"
	PriceCurrencyCUC string = "CUC"

	// PriceCurrencyCUP captures enum value "CUP"
	PriceCurrencyCUP string = "CUP"

	// PriceCurrencyCVE captures enum value "CVE"
	PriceCurrencyCVE string = "CVE"

	// PriceCurrencyCZK captures enum value "CZK"
	PriceCurrencyCZK string = "CZK"

	// PriceCurrencyDJF captures enum value "DJF"
	PriceCurrencyDJF string = "DJF"

	// PriceCurrencyDKK captures enum value "DKK"
	PriceCurrencyDKK string = "DKK"

	// PriceCurrencyDOP captures enum value "DOP"
	PriceCurrencyDOP string = "DOP"

	// PriceCurrencyDZD captures enum value "DZD"
	PriceCurrencyDZD string = "DZD"

	// PriceCurrencyEGP captures enum value "EGP"
	PriceCurrencyEGP string = "EGP"

	// PriceCurrencyERN captures enum value "ERN"
	PriceCurrencyERN string = "ERN"

	// PriceCurrencyETB captures enum value "ETB"
	PriceCurrencyETB string = "ETB"

	// PriceCurrencyEUR captures enum value "EUR"
	PriceCurrencyEUR string = "EUR"

	// PriceCurrencyFJD captures enum value "FJD"
	PriceCurrencyFJD string = "FJD"

	// PriceCurrencyFKP captures enum value "FKP"
	PriceCurrencyFKP string = "FKP"

	// PriceCurrencyGBP captures enum value "GBP"
	PriceCurrencyGBP string = "GBP"

	// PriceCurrencyGEL captures enum value "GEL"
	PriceCurrencyGEL string = "GEL"

	// PriceCurrencyGGP captures enum value "GGP"
	PriceCurrencyGGP string = "GGP"

	// PriceCurrencyGHS captures enum value "GHS"
	PriceCurrencyGHS string = "GHS"

	// PriceCurrencyGIP captures enum value "GIP"
	PriceCurrencyGIP string = "GIP"

	// PriceCurrencyGMD captures enum value "GMD"
	PriceCurrencyGMD string = "GMD"

	// PriceCurrencyGNF captures enum value "GNF"
	PriceCurrencyGNF string = "GNF"

	// PriceCurrencyGTQ captures enum value "GTQ"
	PriceCurrencyGTQ string = "GTQ"

	// PriceCurrencyGYD captures enum value "GYD"
	PriceCurrencyGYD string = "GYD"

	// PriceCurrencyHKD captures enum value "HKD"
	PriceCurrencyHKD string = "HKD"

	// PriceCurrencyHNL captures enum value "HNL"
	PriceCurrencyHNL string = "HNL"

	// PriceCurrencyHRK captures enum value "HRK"
	PriceCurrencyHRK string = "HRK"

	// PriceCurrencyHTG captures enum value "HTG"
	PriceCurrencyHTG string = "HTG"

	// PriceCurrencyHUF captures enum value "HUF"
	PriceCurrencyHUF string = "HUF"

	// PriceCurrencyIDR captures enum value "IDR"
	PriceCurrencyIDR string = "IDR"

	// PriceCurrencyILS captures enum value "ILS"
	PriceCurrencyILS string = "ILS"

	// PriceCurrencyIMP captures enum value "IMP"
	PriceCurrencyIMP string = "IMP"

	// PriceCurrencyINR captures enum value "INR"
	PriceCurrencyINR string = "INR"

	// PriceCurrencyIQD captures enum value "IQD"
	PriceCurrencyIQD string = "IQD"

	// PriceCurrencyIRR captures enum value "IRR"
	PriceCurrencyIRR string = "IRR"

	// PriceCurrencyISK captures enum value "ISK"
	PriceCurrencyISK string = "ISK"

	// PriceCurrencyJEP captures enum value "JEP"
	PriceCurrencyJEP string = "JEP"

	// PriceCurrencyJMD captures enum value "JMD"
	PriceCurrencyJMD string = "JMD"

	// PriceCurrencyJOD captures enum value "JOD"
	PriceCurrencyJOD string = "JOD"

	// PriceCurrencyJPY captures enum value "JPY"
	PriceCurrencyJPY string = "JPY"

	// PriceCurrencyKES captures enum value "KES"
	PriceCurrencyKES string = "KES"

	// PriceCurrencyKGS captures enum value "KGS"
	PriceCurrencyKGS string = "KGS"

	// PriceCurrencyKHR captures enum value "KHR"
	PriceCurrencyKHR string = "KHR"

	// PriceCurrencyKMF captures enum value "KMF"
	PriceCurrencyKMF string = "KMF"

	// PriceCurrencyKPW captures enum value "KPW"
	PriceCurrencyKPW string = "KPW"

	// PriceCurrencyKRW captures enum value "KRW"
	PriceCurrencyKRW string = "KRW"

	// PriceCurrencyKWD captures enum value "KWD"
	PriceCurrencyKWD string = "KWD"

	// PriceCurrencyKYD captures enum value "KYD"
	PriceCurrencyKYD string = "KYD"

	// PriceCurrencyKZT captures enum value "KZT"
	PriceCurrencyKZT string = "KZT"

	// PriceCurrencyLAK captures enum value "LAK"
	PriceCurrencyLAK string = "LAK"

	// PriceCurrencyLBP captures enum value "LBP"
	PriceCurrencyLBP string = "LBP"

	// PriceCurrencyLKR captures enum value "LKR"
	PriceCurrencyLKR string = "LKR"

	// PriceCurrencyLRD captures enum value "LRD"
	PriceCurrencyLRD string = "LRD"

	// PriceCurrencyLSL captures enum value "LSL"
	PriceCurrencyLSL string = "LSL"

	// PriceCurrencyLTL captures enum value "LTL"
	PriceCurrencyLTL string = "LTL"

	// PriceCurrencyLVL captures enum value "LVL"
	PriceCurrencyLVL string = "LVL"

	// PriceCurrencyLYD captures enum value "LYD"
	PriceCurrencyLYD string = "LYD"

	// PriceCurrencyMAD captures enum value "MAD"
	PriceCurrencyMAD string = "MAD"

	// PriceCurrencyMDL captures enum value "MDL"
	PriceCurrencyMDL string = "MDL"

	// PriceCurrencyMGA captures enum value "MGA"
	PriceCurrencyMGA string = "MGA"

	// PriceCurrencyMKD captures enum value "MKD"
	PriceCurrencyMKD string = "MKD"

	// PriceCurrencyMMK captures enum value "MMK"
	PriceCurrencyMMK string = "MMK"

	// PriceCurrencyMNT captures enum value "MNT"
	PriceCurrencyMNT string = "MNT"

	// PriceCurrencyMOP captures enum value "MOP"
	PriceCurrencyMOP string = "MOP"

	// PriceCurrencyMRO captures enum value "MRO"
	PriceCurrencyMRO string = "MRO"

	// PriceCurrencyMUR captures enum value "MUR"
	PriceCurrencyMUR string = "MUR"

	// PriceCurrencyMVR captures enum value "MVR"
	PriceCurrencyMVR string = "MVR"

	// PriceCurrencyMWK captures enum value "MWK"
	PriceCurrencyMWK string = "MWK"

	// PriceCurrencyMXN captures enum value "MXN"
	PriceCurrencyMXN string = "MXN"

	// PriceCurrencyMYR captures enum value "MYR"
	PriceCurrencyMYR string = "MYR"

	// PriceCurrencyMZN captures enum value "MZN"
	PriceCurrencyMZN string = "MZN"

	// PriceCurrencyNAD captures enum value "NAD"
	PriceCurrencyNAD string = "NAD"

	// PriceCurrencyNGN captures enum value "NGN"
	PriceCurrencyNGN string = "NGN"

	// PriceCurrencyNIO captures enum value "NIO"
	PriceCurrencyNIO string = "NIO"

	// PriceCurrencyNOK captures enum value "NOK"
	PriceCurrencyNOK string = "NOK"

	// PriceCurrencyNPR captures enum value "NPR"
	PriceCurrencyNPR string = "NPR"

	// PriceCurrencyNZD captures enum value "NZD"
	PriceCurrencyNZD string = "NZD"

	// PriceCurrencyOMR captures enum value "OMR"
	PriceCurrencyOMR string = "OMR"

	// PriceCurrencyPAB captures enum value "PAB"
	PriceCurrencyPAB string = "PAB"

	// PriceCurrencyPEN captures enum value "PEN"
	PriceCurrencyPEN string = "PEN"

	// PriceCurrencyPGK captures enum value "PGK"
	PriceCurrencyPGK string = "PGK"

	// PriceCurrencyPHP captures enum value "PHP"
	PriceCurrencyPHP string = "PHP"

	// PriceCurrencyPKR captures enum value "PKR"
	PriceCurrencyPKR string = "PKR"

	// PriceCurrencyPLN captures enum value "PLN"
	PriceCurrencyPLN string = "PLN"

	// PriceCurrencyPYG captures enum value "PYG"
	PriceCurrencyPYG string = "PYG"

	// PriceCurrencyQAR captures enum value "QAR"
	PriceCurrencyQAR string = "QAR"

	// PriceCurrencyRON captures enum value "RON"
	PriceCurrencyRON string = "RON"

	// PriceCurrencyRSD captures enum value "RSD"
	PriceCurrencyRSD string = "RSD"

	// PriceCurrencyRUB captures enum value "RUB"
	PriceCurrencyRUB string = "RUB"

	// PriceCurrencyRWF captures enum value "RWF"
	PriceCurrencyRWF string = "RWF"

	// PriceCurrencySAR captures enum value "SAR"
	PriceCurrencySAR string = "SAR"

	// PriceCurrencySBD captures enum value "SBD"
	PriceCurrencySBD string = "SBD"

	// PriceCurrencySCR captures enum value "SCR"
	PriceCurrencySCR string = "SCR"

	// PriceCurrencySDG captures enum value "SDG"
	PriceCurrencySDG string = "SDG"

	// PriceCurrencySEK captures enum value "SEK"
	PriceCurrencySEK string = "SEK"

	// PriceCurrencySGD captures enum value "SGD"
	PriceCurrencySGD string = "SGD"

	// PriceCurrencySHP captures enum value "SHP"
	PriceCurrencySHP string = "SHP"

	// PriceCurrencySLL captures enum value "SLL"
	PriceCurrencySLL string = "SLL"

	// PriceCurrencySOS captures enum value "SOS"
	PriceCurrencySOS string = "SOS"

	// PriceCurrencySPL captures enum value "SPL"
	PriceCurrencySPL string = "SPL"

	// PriceCurrencySRD captures enum value "SRD"
	PriceCurrencySRD string = "SRD"

	// PriceCurrencySTD captures enum value "STD"
	PriceCurrencySTD string = "STD"

	// PriceCurrencySVC captures enum value "SVC"
	PriceCurrencySVC string = "SVC"

	// PriceCurrencySYP captures enum value "SYP"
	PriceCurrencySYP string = "SYP"

	// PriceCurrencySZL captures enum value "SZL"
	PriceCurrencySZL string = "SZL"

	// PriceCurrencyTHB captures enum value "THB"
	PriceCurrencyTHB string = "THB"

	// PriceCurrencyTJS captures enum value "TJS"
	PriceCurrencyTJS string = "TJS"

	// PriceCurrencyTMT captures enum value "TMT"
	PriceCurrencyTMT string = "TMT"

	// PriceCurrencyTND captures enum value "TND"
	PriceCurrencyTND string = "TND"

	// PriceCurrencyTOP captures enum value "TOP"
	PriceCurrencyTOP string = "TOP"

	// PriceCurrencyTRY captures enum value "TRY"
	PriceCurrencyTRY string = "TRY"

	// PriceCurrencyTTD captures enum value "TTD"
	PriceCurrencyTTD string = "TTD"

	// PriceCurrencyTVD captures enum value "TVD"
	PriceCurrencyTVD string = "TVD"

	// PriceCurrencyTWD captures enum value "TWD"
	PriceCurrencyTWD string = "TWD"

	// PriceCurrencyTZS captures enum value "TZS"
	PriceCurrencyTZS string = "TZS"

	// PriceCurrencyUAH captures enum value "UAH"
	PriceCurrencyUAH string = "UAH"

	// PriceCurrencyUGX captures enum value "UGX"
	PriceCurrencyUGX string = "UGX"

	// PriceCurrencyUSD captures enum value "USD"
	PriceCurrencyUSD string = "USD"

	// PriceCurrencyUYU captures enum value "UYU"
	PriceCurrencyUYU string = "UYU"

	// PriceCurrencyUZS captures enum value "UZS"
	PriceCurrencyUZS string = "UZS"

	// PriceCurrencyVEF captures enum value "VEF"
	PriceCurrencyVEF string = "VEF"

	// PriceCurrencyVND captures enum value "VND"
	PriceCurrencyVND string = "VND"

	// PriceCurrencyVUV captures enum value "VUV"
	PriceCurrencyVUV string = "VUV"

	// PriceCurrencyWST captures enum value "WST"
	PriceCurrencyWST string = "WST"

	// PriceCurrencyXAF captures enum value "XAF"
	PriceCurrencyXAF string = "XAF"

	// PriceCurrencyXCD captures enum value "XCD"
	PriceCurrencyXCD string = "XCD"

	// PriceCurrencyXDR captures enum value "XDR"
	PriceCurrencyXDR string = "XDR"

	// PriceCurrencyXOF captures enum value "XOF"
	PriceCurrencyXOF string = "XOF"

	// PriceCurrencyXPF captures enum value "XPF"
	PriceCurrencyXPF string = "XPF"

	// PriceCurrencyYER captures enum value "YER"
	PriceCurrencyYER string = "YER"

	// PriceCurrencyZAR captures enum value "ZAR"
	PriceCurrencyZAR string = "ZAR"

	// PriceCurrencyZMW captures enum value "ZMW"
	PriceCurrencyZMW string = "ZMW"

	// PriceCurrencyZWD captures enum value "ZWD"
	PriceCurrencyZWD string = "ZWD"

	// PriceCurrencyBTC captures enum value "BTC"
	PriceCurrencyBTC string = "BTC"
)

// prop value enum
func (m *Price) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, priceTypeCurrencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Price) validateCurrency(formats strfmt.Registry) error {
	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this price based on context it is used
func (m *Price) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Price) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Price) UnmarshalBinary(b []byte) error {
	var res Price
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
